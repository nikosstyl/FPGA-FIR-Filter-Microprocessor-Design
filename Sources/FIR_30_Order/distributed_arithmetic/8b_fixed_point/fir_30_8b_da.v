// -------------------------------------------------------------
//
// Module: fir_30_8b_da
// Generated by MATLAB(R) 9.12 and Filter Design HDL Coder 3.1.11.
// Generated on: 2023-06-22 12:10:53
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// FIRAdderStyle: tree
// MultiplierInputPipeline: 1
// MultiplierOutputPipeline: 1
// OptimizeForHDL: on
// TargetDirectory: W:\Nikos\UTh\Σχεδίαση Επεξεργαστών\Project\FIR_30_Order\distributed_arithmetic\8b_fixed_point
// AddPipelineRegisters: on
// Name: fir_30_8b_da
// DALUTPartition: [6  6  6  6  3]
// InputDataType: numerictype(1,8,0)
// TargetLanguage: Verilog
// TestBenchName: fir_30_8b_da_tb
// TestBenchStimulus: impulse step ramp chirp noise 

// Filter Specifications:
//
// Sample Rate     : 46 kHz
// Response        : Lowpass
// Specification   : N,Fp,Fst,Ap
// Stopband Edge   : 9.6 kHz
// Filter Order    : 30
// Passband Edge   : 8 kHz
// Passband Ripple : 60 dB
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Implementation    : Distributed arithmetic (DA)
// Folding Factor        : 8
// LUT Address Width     : 6
// Total LUT Size (bits) : 2200
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 31
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s8,8 -> [-5.000000e-01 5.000000e-01)
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module fir_30_8b_da
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [7:0] filter_in; //sfix8
  output  signed [20:0] filter_out; //sfix21_En8

////////////////////////////////////////////////////////////////
//Module Architecture: fir_30_8b_da
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [7:0] coeff1 = 8'b00000000; //sfix8_En8
  parameter signed [7:0] coeff2 = 8'b00000000; //sfix8_En8
  parameter signed [7:0] coeff3 = 8'b00000001; //sfix8_En8
  parameter signed [7:0] coeff4 = 8'b00000001; //sfix8_En8
  parameter signed [7:0] coeff5 = 8'b00000001; //sfix8_En8
  parameter signed [7:0] coeff6 = 8'b11111110; //sfix8_En8
  parameter signed [7:0] coeff7 = 8'b11111000; //sfix8_En8
  parameter signed [7:0] coeff8 = 8'b11101110; //sfix8_En8
  parameter signed [7:0] coeff9 = 8'b11100001; //sfix8_En8
  parameter signed [7:0] coeff10 = 8'b11011000; //sfix8_En8
  parameter signed [7:0] coeff11 = 8'b11011001; //sfix8_En8
  parameter signed [7:0] coeff12 = 8'b11101001; //sfix8_En8
  parameter signed [7:0] coeff13 = 8'b00000110; //sfix8_En8
  parameter signed [7:0] coeff14 = 8'b00101010; //sfix8_En8
  parameter signed [7:0] coeff15 = 8'b01000111; //sfix8_En8
  parameter signed [7:0] coeff16 = 8'b01010011; //sfix8_En8
  parameter signed [7:0] coeff17 = 8'b01000111; //sfix8_En8
  parameter signed [7:0] coeff18 = 8'b00101010; //sfix8_En8
  parameter signed [7:0] coeff19 = 8'b00000110; //sfix8_En8
  parameter signed [7:0] coeff20 = 8'b11101001; //sfix8_En8
  parameter signed [7:0] coeff21 = 8'b11011001; //sfix8_En8
  parameter signed [7:0] coeff22 = 8'b11011000; //sfix8_En8
  parameter signed [7:0] coeff23 = 8'b11100001; //sfix8_En8
  parameter signed [7:0] coeff24 = 8'b11101110; //sfix8_En8
  parameter signed [7:0] coeff25 = 8'b11111000; //sfix8_En8
  parameter signed [7:0] coeff26 = 8'b11111110; //sfix8_En8
  parameter signed [7:0] coeff27 = 8'b00000001; //sfix8_En8
  parameter signed [7:0] coeff28 = 8'b00000001; //sfix8_En8
  parameter signed [7:0] coeff29 = 8'b00000001; //sfix8_En8
  parameter signed [7:0] coeff30 = 8'b00000000; //sfix8_En8
  parameter signed [7:0] coeff31 = 8'b00000000; //sfix8_En8

  // Signals
  wire signed [7:0] filter_in_cast; // sfix8
  reg  [2:0] cur_count; // ufix3
  wire phase_7; // boolean
  wire phase_2; // boolean
  wire phase_3; // boolean
  wire serialoutb1; // ufix1
  reg  signed [7:0] shiftreg; // sfix8
  reg  delay_pipeline [0:223] ; // boolean
  wire [5:0] mem_addr_1; // ufix6
  reg  signed [5:0] memoutb1_1; // sfix6_En8
  wire [5:0] mem_addr_2; // ufix6
  reg  signed [8:0] memoutb1_2; // sfix9_En8
  wire [5:0] mem_addr_3; // ufix6
  reg  signed [9:0] memoutb1_3; // sfix10_En8
  wire [5:0] mem_addr_4; // ufix6
  reg  signed [8:0] memoutb1_4; // sfix9_En8
  wire [2:0] mem_addr_5; // ufix3
  reg  signed [2:0] memoutb1_5; // sfix3_En8
  wire signed [9:0] memoutb1; // sfix10_En8
  wire signed [9:0] sum1_1; // sfix10_En8
  wire signed [8:0] add_signext; // sfix9_En8
  wire signed [8:0] add_signext_1; // sfix9_En8
  reg  signed [9:0] sumpipe1_1; // sfix10_En8
  wire signed [10:0] sum1_2; // sfix11_En8
  wire signed [9:0] add_signext_2; // sfix10_En8
  wire signed [9:0] add_signext_3; // sfix10_En8
  reg  signed [10:0] sumpipe1_2; // sfix11_En8
  reg  signed [2:0] sumpipe1_3; // sfix3_En8
  wire signed [11:0] sum2_1; // sfix12_En8
  wire signed [10:0] add_signext_4; // sfix11_En8
  wire signed [10:0] add_signext_5; // sfix11_En8
  reg  signed [11:0] sumpipe2_1; // sfix12_En8
  reg  signed [2:0] sumpipe2_2; // sfix3_En8
  wire signed [12:0] sum3_1; // sfix13_En8
  wire signed [11:0] add_signext_6; // sfix12_En8
  wire signed [11:0] add_signext_7; // sfix12_En8
  reg  signed [12:0] sumpipe3_1; // sfix13_En8
  reg  signed [18:0] acc_out; // sfix19_En15
  wire signed [18:0] memoutb1_cast; // sfix19_En15
  wire signed [18:0] add_sub_out; // sfix19_En15
  wire signed [18:0] acc_out_shft; // sfix19_En15
  wire signed [18:0] acc_in; // sfix19_En15
  wire signed [18:0] addsub_add; // sfix19_En15
  wire signed [18:0] addsub_sub; // sfix19_En15
  wire signed [18:0] add_signext_8; // sfix19_En15
  wire signed [18:0] add_signext_9; // sfix19_En15
  wire signed [19:0] add_temp; // sfix20_En15
  wire signed [18:0] sub_signext; // sfix19_En15
  wire signed [18:0] sub_signext_1; // sfix19_En15
  wire signed [19:0] sub_temp; // sfix20_En15
  reg  signed [18:0] final_acc_out; // sfix19_En15
  wire signed [18:0] output_da; // sfix19_En8
  wire signed [20:0] output_typeconvert; // sfix21_En8
  reg  signed [20:0] output_register; // sfix21_En8

  // Block Statements
  assign filter_in_cast = filter_in;

  always @ (posedge clk or posedge reset)
    begin: Counter_process
      if (reset == 1'b1) begin
        cur_count <= 3'b111;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (cur_count >= 3'b111) begin
            cur_count <= 3'b000;
          end
          else begin
            cur_count <= cur_count + 3'b001;
          end
        end
      end
    end // Counter_process

  assign  phase_7 = (cur_count == 3'b111 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_2 = (cur_count == 3'b010 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_3 = (cur_count == 3'b011 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @ (posedge clk or posedge reset)
    begin: Serializer_1_process
      if (reset == 1'b1) begin
        shiftreg <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (phase_7 == 1'b1) begin
            shiftreg <= filter_in_cast;
          end
          else begin
            shiftreg <= {1'b0, shiftreg[7 : 1]};
          end
        end
      end 
    end // Serializer_1_process;

  assign   serialoutb1=shiftreg[0];
 
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_1_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 1'b0;
        delay_pipeline[1] <= 1'b0;
        delay_pipeline[2] <= 1'b0;
        delay_pipeline[3] <= 1'b0;
        delay_pipeline[4] <= 1'b0;
        delay_pipeline[5] <= 1'b0;
        delay_pipeline[6] <= 1'b0;
        delay_pipeline[7] <= 1'b0;
        delay_pipeline[8] <= 1'b0;
        delay_pipeline[9] <= 1'b0;
        delay_pipeline[10] <= 1'b0;
        delay_pipeline[11] <= 1'b0;
        delay_pipeline[12] <= 1'b0;
        delay_pipeline[13] <= 1'b0;
        delay_pipeline[14] <= 1'b0;
        delay_pipeline[15] <= 1'b0;
        delay_pipeline[16] <= 1'b0;
        delay_pipeline[17] <= 1'b0;
        delay_pipeline[18] <= 1'b0;
        delay_pipeline[19] <= 1'b0;
        delay_pipeline[20] <= 1'b0;
        delay_pipeline[21] <= 1'b0;
        delay_pipeline[22] <= 1'b0;
        delay_pipeline[23] <= 1'b0;
        delay_pipeline[24] <= 1'b0;
        delay_pipeline[25] <= 1'b0;
        delay_pipeline[26] <= 1'b0;
        delay_pipeline[27] <= 1'b0;
        delay_pipeline[28] <= 1'b0;
        delay_pipeline[29] <= 1'b0;
        delay_pipeline[30] <= 1'b0;
        delay_pipeline[31] <= 1'b0;
        delay_pipeline[32] <= 1'b0;
        delay_pipeline[33] <= 1'b0;
        delay_pipeline[34] <= 1'b0;
        delay_pipeline[35] <= 1'b0;
        delay_pipeline[36] <= 1'b0;
        delay_pipeline[37] <= 1'b0;
        delay_pipeline[38] <= 1'b0;
        delay_pipeline[39] <= 1'b0;
        delay_pipeline[40] <= 1'b0;
        delay_pipeline[41] <= 1'b0;
        delay_pipeline[42] <= 1'b0;
        delay_pipeline[43] <= 1'b0;
        delay_pipeline[44] <= 1'b0;
        delay_pipeline[45] <= 1'b0;
        delay_pipeline[46] <= 1'b0;
        delay_pipeline[47] <= 1'b0;
        delay_pipeline[48] <= 1'b0;
        delay_pipeline[49] <= 1'b0;
        delay_pipeline[50] <= 1'b0;
        delay_pipeline[51] <= 1'b0;
        delay_pipeline[52] <= 1'b0;
        delay_pipeline[53] <= 1'b0;
        delay_pipeline[54] <= 1'b0;
        delay_pipeline[55] <= 1'b0;
        delay_pipeline[56] <= 1'b0;
        delay_pipeline[57] <= 1'b0;
        delay_pipeline[58] <= 1'b0;
        delay_pipeline[59] <= 1'b0;
        delay_pipeline[60] <= 1'b0;
        delay_pipeline[61] <= 1'b0;
        delay_pipeline[62] <= 1'b0;
        delay_pipeline[63] <= 1'b0;
        delay_pipeline[64] <= 1'b0;
        delay_pipeline[65] <= 1'b0;
        delay_pipeline[66] <= 1'b0;
        delay_pipeline[67] <= 1'b0;
        delay_pipeline[68] <= 1'b0;
        delay_pipeline[69] <= 1'b0;
        delay_pipeline[70] <= 1'b0;
        delay_pipeline[71] <= 1'b0;
        delay_pipeline[72] <= 1'b0;
        delay_pipeline[73] <= 1'b0;
        delay_pipeline[74] <= 1'b0;
        delay_pipeline[75] <= 1'b0;
        delay_pipeline[76] <= 1'b0;
        delay_pipeline[77] <= 1'b0;
        delay_pipeline[78] <= 1'b0;
        delay_pipeline[79] <= 1'b0;
        delay_pipeline[80] <= 1'b0;
        delay_pipeline[81] <= 1'b0;
        delay_pipeline[82] <= 1'b0;
        delay_pipeline[83] <= 1'b0;
        delay_pipeline[84] <= 1'b0;
        delay_pipeline[85] <= 1'b0;
        delay_pipeline[86] <= 1'b0;
        delay_pipeline[87] <= 1'b0;
        delay_pipeline[88] <= 1'b0;
        delay_pipeline[89] <= 1'b0;
        delay_pipeline[90] <= 1'b0;
        delay_pipeline[91] <= 1'b0;
        delay_pipeline[92] <= 1'b0;
        delay_pipeline[93] <= 1'b0;
        delay_pipeline[94] <= 1'b0;
        delay_pipeline[95] <= 1'b0;
        delay_pipeline[96] <= 1'b0;
        delay_pipeline[97] <= 1'b0;
        delay_pipeline[98] <= 1'b0;
        delay_pipeline[99] <= 1'b0;
        delay_pipeline[100] <= 1'b0;
        delay_pipeline[101] <= 1'b0;
        delay_pipeline[102] <= 1'b0;
        delay_pipeline[103] <= 1'b0;
        delay_pipeline[104] <= 1'b0;
        delay_pipeline[105] <= 1'b0;
        delay_pipeline[106] <= 1'b0;
        delay_pipeline[107] <= 1'b0;
        delay_pipeline[108] <= 1'b0;
        delay_pipeline[109] <= 1'b0;
        delay_pipeline[110] <= 1'b0;
        delay_pipeline[111] <= 1'b0;
        delay_pipeline[112] <= 1'b0;
        delay_pipeline[113] <= 1'b0;
        delay_pipeline[114] <= 1'b0;
        delay_pipeline[115] <= 1'b0;
        delay_pipeline[116] <= 1'b0;
        delay_pipeline[117] <= 1'b0;
        delay_pipeline[118] <= 1'b0;
        delay_pipeline[119] <= 1'b0;
        delay_pipeline[120] <= 1'b0;
        delay_pipeline[121] <= 1'b0;
        delay_pipeline[122] <= 1'b0;
        delay_pipeline[123] <= 1'b0;
        delay_pipeline[124] <= 1'b0;
        delay_pipeline[125] <= 1'b0;
        delay_pipeline[126] <= 1'b0;
        delay_pipeline[127] <= 1'b0;
        delay_pipeline[128] <= 1'b0;
        delay_pipeline[129] <= 1'b0;
        delay_pipeline[130] <= 1'b0;
        delay_pipeline[131] <= 1'b0;
        delay_pipeline[132] <= 1'b0;
        delay_pipeline[133] <= 1'b0;
        delay_pipeline[134] <= 1'b0;
        delay_pipeline[135] <= 1'b0;
        delay_pipeline[136] <= 1'b0;
        delay_pipeline[137] <= 1'b0;
        delay_pipeline[138] <= 1'b0;
        delay_pipeline[139] <= 1'b0;
        delay_pipeline[140] <= 1'b0;
        delay_pipeline[141] <= 1'b0;
        delay_pipeline[142] <= 1'b0;
        delay_pipeline[143] <= 1'b0;
        delay_pipeline[144] <= 1'b0;
        delay_pipeline[145] <= 1'b0;
        delay_pipeline[146] <= 1'b0;
        delay_pipeline[147] <= 1'b0;
        delay_pipeline[148] <= 1'b0;
        delay_pipeline[149] <= 1'b0;
        delay_pipeline[150] <= 1'b0;
        delay_pipeline[151] <= 1'b0;
        delay_pipeline[152] <= 1'b0;
        delay_pipeline[153] <= 1'b0;
        delay_pipeline[154] <= 1'b0;
        delay_pipeline[155] <= 1'b0;
        delay_pipeline[156] <= 1'b0;
        delay_pipeline[157] <= 1'b0;
        delay_pipeline[158] <= 1'b0;
        delay_pipeline[159] <= 1'b0;
        delay_pipeline[160] <= 1'b0;
        delay_pipeline[161] <= 1'b0;
        delay_pipeline[162] <= 1'b0;
        delay_pipeline[163] <= 1'b0;
        delay_pipeline[164] <= 1'b0;
        delay_pipeline[165] <= 1'b0;
        delay_pipeline[166] <= 1'b0;
        delay_pipeline[167] <= 1'b0;
        delay_pipeline[168] <= 1'b0;
        delay_pipeline[169] <= 1'b0;
        delay_pipeline[170] <= 1'b0;
        delay_pipeline[171] <= 1'b0;
        delay_pipeline[172] <= 1'b0;
        delay_pipeline[173] <= 1'b0;
        delay_pipeline[174] <= 1'b0;
        delay_pipeline[175] <= 1'b0;
        delay_pipeline[176] <= 1'b0;
        delay_pipeline[177] <= 1'b0;
        delay_pipeline[178] <= 1'b0;
        delay_pipeline[179] <= 1'b0;
        delay_pipeline[180] <= 1'b0;
        delay_pipeline[181] <= 1'b0;
        delay_pipeline[182] <= 1'b0;
        delay_pipeline[183] <= 1'b0;
        delay_pipeline[184] <= 1'b0;
        delay_pipeline[185] <= 1'b0;
        delay_pipeline[186] <= 1'b0;
        delay_pipeline[187] <= 1'b0;
        delay_pipeline[188] <= 1'b0;
        delay_pipeline[189] <= 1'b0;
        delay_pipeline[190] <= 1'b0;
        delay_pipeline[191] <= 1'b0;
        delay_pipeline[192] <= 1'b0;
        delay_pipeline[193] <= 1'b0;
        delay_pipeline[194] <= 1'b0;
        delay_pipeline[195] <= 1'b0;
        delay_pipeline[196] <= 1'b0;
        delay_pipeline[197] <= 1'b0;
        delay_pipeline[198] <= 1'b0;
        delay_pipeline[199] <= 1'b0;
        delay_pipeline[200] <= 1'b0;
        delay_pipeline[201] <= 1'b0;
        delay_pipeline[202] <= 1'b0;
        delay_pipeline[203] <= 1'b0;
        delay_pipeline[204] <= 1'b0;
        delay_pipeline[205] <= 1'b0;
        delay_pipeline[206] <= 1'b0;
        delay_pipeline[207] <= 1'b0;
        delay_pipeline[208] <= 1'b0;
        delay_pipeline[209] <= 1'b0;
        delay_pipeline[210] <= 1'b0;
        delay_pipeline[211] <= 1'b0;
        delay_pipeline[212] <= 1'b0;
        delay_pipeline[213] <= 1'b0;
        delay_pipeline[214] <= 1'b0;
        delay_pipeline[215] <= 1'b0;
        delay_pipeline[216] <= 1'b0;
        delay_pipeline[217] <= 1'b0;
        delay_pipeline[218] <= 1'b0;
        delay_pipeline[219] <= 1'b0;
        delay_pipeline[220] <= 1'b0;
        delay_pipeline[221] <= 1'b0;
        delay_pipeline[222] <= 1'b0;
        delay_pipeline[223] <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= serialoutb1;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
          delay_pipeline[31] <= delay_pipeline[30];
          delay_pipeline[32] <= delay_pipeline[31];
          delay_pipeline[33] <= delay_pipeline[32];
          delay_pipeline[34] <= delay_pipeline[33];
          delay_pipeline[35] <= delay_pipeline[34];
          delay_pipeline[36] <= delay_pipeline[35];
          delay_pipeline[37] <= delay_pipeline[36];
          delay_pipeline[38] <= delay_pipeline[37];
          delay_pipeline[39] <= delay_pipeline[38];
          delay_pipeline[40] <= delay_pipeline[39];
          delay_pipeline[41] <= delay_pipeline[40];
          delay_pipeline[42] <= delay_pipeline[41];
          delay_pipeline[43] <= delay_pipeline[42];
          delay_pipeline[44] <= delay_pipeline[43];
          delay_pipeline[45] <= delay_pipeline[44];
          delay_pipeline[46] <= delay_pipeline[45];
          delay_pipeline[47] <= delay_pipeline[46];
          delay_pipeline[48] <= delay_pipeline[47];
          delay_pipeline[49] <= delay_pipeline[48];
          delay_pipeline[50] <= delay_pipeline[49];
          delay_pipeline[51] <= delay_pipeline[50];
          delay_pipeline[52] <= delay_pipeline[51];
          delay_pipeline[53] <= delay_pipeline[52];
          delay_pipeline[54] <= delay_pipeline[53];
          delay_pipeline[55] <= delay_pipeline[54];
          delay_pipeline[56] <= delay_pipeline[55];
          delay_pipeline[57] <= delay_pipeline[56];
          delay_pipeline[58] <= delay_pipeline[57];
          delay_pipeline[59] <= delay_pipeline[58];
          delay_pipeline[60] <= delay_pipeline[59];
          delay_pipeline[61] <= delay_pipeline[60];
          delay_pipeline[62] <= delay_pipeline[61];
          delay_pipeline[63] <= delay_pipeline[62];
          delay_pipeline[64] <= delay_pipeline[63];
          delay_pipeline[65] <= delay_pipeline[64];
          delay_pipeline[66] <= delay_pipeline[65];
          delay_pipeline[67] <= delay_pipeline[66];
          delay_pipeline[68] <= delay_pipeline[67];
          delay_pipeline[69] <= delay_pipeline[68];
          delay_pipeline[70] <= delay_pipeline[69];
          delay_pipeline[71] <= delay_pipeline[70];
          delay_pipeline[72] <= delay_pipeline[71];
          delay_pipeline[73] <= delay_pipeline[72];
          delay_pipeline[74] <= delay_pipeline[73];
          delay_pipeline[75] <= delay_pipeline[74];
          delay_pipeline[76] <= delay_pipeline[75];
          delay_pipeline[77] <= delay_pipeline[76];
          delay_pipeline[78] <= delay_pipeline[77];
          delay_pipeline[79] <= delay_pipeline[78];
          delay_pipeline[80] <= delay_pipeline[79];
          delay_pipeline[81] <= delay_pipeline[80];
          delay_pipeline[82] <= delay_pipeline[81];
          delay_pipeline[83] <= delay_pipeline[82];
          delay_pipeline[84] <= delay_pipeline[83];
          delay_pipeline[85] <= delay_pipeline[84];
          delay_pipeline[86] <= delay_pipeline[85];
          delay_pipeline[87] <= delay_pipeline[86];
          delay_pipeline[88] <= delay_pipeline[87];
          delay_pipeline[89] <= delay_pipeline[88];
          delay_pipeline[90] <= delay_pipeline[89];
          delay_pipeline[91] <= delay_pipeline[90];
          delay_pipeline[92] <= delay_pipeline[91];
          delay_pipeline[93] <= delay_pipeline[92];
          delay_pipeline[94] <= delay_pipeline[93];
          delay_pipeline[95] <= delay_pipeline[94];
          delay_pipeline[96] <= delay_pipeline[95];
          delay_pipeline[97] <= delay_pipeline[96];
          delay_pipeline[98] <= delay_pipeline[97];
          delay_pipeline[99] <= delay_pipeline[98];
          delay_pipeline[100] <= delay_pipeline[99];
          delay_pipeline[101] <= delay_pipeline[100];
          delay_pipeline[102] <= delay_pipeline[101];
          delay_pipeline[103] <= delay_pipeline[102];
          delay_pipeline[104] <= delay_pipeline[103];
          delay_pipeline[105] <= delay_pipeline[104];
          delay_pipeline[106] <= delay_pipeline[105];
          delay_pipeline[107] <= delay_pipeline[106];
          delay_pipeline[108] <= delay_pipeline[107];
          delay_pipeline[109] <= delay_pipeline[108];
          delay_pipeline[110] <= delay_pipeline[109];
          delay_pipeline[111] <= delay_pipeline[110];
          delay_pipeline[112] <= delay_pipeline[111];
          delay_pipeline[113] <= delay_pipeline[112];
          delay_pipeline[114] <= delay_pipeline[113];
          delay_pipeline[115] <= delay_pipeline[114];
          delay_pipeline[116] <= delay_pipeline[115];
          delay_pipeline[117] <= delay_pipeline[116];
          delay_pipeline[118] <= delay_pipeline[117];
          delay_pipeline[119] <= delay_pipeline[118];
          delay_pipeline[120] <= delay_pipeline[119];
          delay_pipeline[121] <= delay_pipeline[120];
          delay_pipeline[122] <= delay_pipeline[121];
          delay_pipeline[123] <= delay_pipeline[122];
          delay_pipeline[124] <= delay_pipeline[123];
          delay_pipeline[125] <= delay_pipeline[124];
          delay_pipeline[126] <= delay_pipeline[125];
          delay_pipeline[127] <= delay_pipeline[126];
          delay_pipeline[128] <= delay_pipeline[127];
          delay_pipeline[129] <= delay_pipeline[128];
          delay_pipeline[130] <= delay_pipeline[129];
          delay_pipeline[131] <= delay_pipeline[130];
          delay_pipeline[132] <= delay_pipeline[131];
          delay_pipeline[133] <= delay_pipeline[132];
          delay_pipeline[134] <= delay_pipeline[133];
          delay_pipeline[135] <= delay_pipeline[134];
          delay_pipeline[136] <= delay_pipeline[135];
          delay_pipeline[137] <= delay_pipeline[136];
          delay_pipeline[138] <= delay_pipeline[137];
          delay_pipeline[139] <= delay_pipeline[138];
          delay_pipeline[140] <= delay_pipeline[139];
          delay_pipeline[141] <= delay_pipeline[140];
          delay_pipeline[142] <= delay_pipeline[141];
          delay_pipeline[143] <= delay_pipeline[142];
          delay_pipeline[144] <= delay_pipeline[143];
          delay_pipeline[145] <= delay_pipeline[144];
          delay_pipeline[146] <= delay_pipeline[145];
          delay_pipeline[147] <= delay_pipeline[146];
          delay_pipeline[148] <= delay_pipeline[147];
          delay_pipeline[149] <= delay_pipeline[148];
          delay_pipeline[150] <= delay_pipeline[149];
          delay_pipeline[151] <= delay_pipeline[150];
          delay_pipeline[152] <= delay_pipeline[151];
          delay_pipeline[153] <= delay_pipeline[152];
          delay_pipeline[154] <= delay_pipeline[153];
          delay_pipeline[155] <= delay_pipeline[154];
          delay_pipeline[156] <= delay_pipeline[155];
          delay_pipeline[157] <= delay_pipeline[156];
          delay_pipeline[158] <= delay_pipeline[157];
          delay_pipeline[159] <= delay_pipeline[158];
          delay_pipeline[160] <= delay_pipeline[159];
          delay_pipeline[161] <= delay_pipeline[160];
          delay_pipeline[162] <= delay_pipeline[161];
          delay_pipeline[163] <= delay_pipeline[162];
          delay_pipeline[164] <= delay_pipeline[163];
          delay_pipeline[165] <= delay_pipeline[164];
          delay_pipeline[166] <= delay_pipeline[165];
          delay_pipeline[167] <= delay_pipeline[166];
          delay_pipeline[168] <= delay_pipeline[167];
          delay_pipeline[169] <= delay_pipeline[168];
          delay_pipeline[170] <= delay_pipeline[169];
          delay_pipeline[171] <= delay_pipeline[170];
          delay_pipeline[172] <= delay_pipeline[171];
          delay_pipeline[173] <= delay_pipeline[172];
          delay_pipeline[174] <= delay_pipeline[173];
          delay_pipeline[175] <= delay_pipeline[174];
          delay_pipeline[176] <= delay_pipeline[175];
          delay_pipeline[177] <= delay_pipeline[176];
          delay_pipeline[178] <= delay_pipeline[177];
          delay_pipeline[179] <= delay_pipeline[178];
          delay_pipeline[180] <= delay_pipeline[179];
          delay_pipeline[181] <= delay_pipeline[180];
          delay_pipeline[182] <= delay_pipeline[181];
          delay_pipeline[183] <= delay_pipeline[182];
          delay_pipeline[184] <= delay_pipeline[183];
          delay_pipeline[185] <= delay_pipeline[184];
          delay_pipeline[186] <= delay_pipeline[185];
          delay_pipeline[187] <= delay_pipeline[186];
          delay_pipeline[188] <= delay_pipeline[187];
          delay_pipeline[189] <= delay_pipeline[188];
          delay_pipeline[190] <= delay_pipeline[189];
          delay_pipeline[191] <= delay_pipeline[190];
          delay_pipeline[192] <= delay_pipeline[191];
          delay_pipeline[193] <= delay_pipeline[192];
          delay_pipeline[194] <= delay_pipeline[193];
          delay_pipeline[195] <= delay_pipeline[194];
          delay_pipeline[196] <= delay_pipeline[195];
          delay_pipeline[197] <= delay_pipeline[196];
          delay_pipeline[198] <= delay_pipeline[197];
          delay_pipeline[199] <= delay_pipeline[198];
          delay_pipeline[200] <= delay_pipeline[199];
          delay_pipeline[201] <= delay_pipeline[200];
          delay_pipeline[202] <= delay_pipeline[201];
          delay_pipeline[203] <= delay_pipeline[202];
          delay_pipeline[204] <= delay_pipeline[203];
          delay_pipeline[205] <= delay_pipeline[204];
          delay_pipeline[206] <= delay_pipeline[205];
          delay_pipeline[207] <= delay_pipeline[206];
          delay_pipeline[208] <= delay_pipeline[207];
          delay_pipeline[209] <= delay_pipeline[208];
          delay_pipeline[210] <= delay_pipeline[209];
          delay_pipeline[211] <= delay_pipeline[210];
          delay_pipeline[212] <= delay_pipeline[211];
          delay_pipeline[213] <= delay_pipeline[212];
          delay_pipeline[214] <= delay_pipeline[213];
          delay_pipeline[215] <= delay_pipeline[214];
          delay_pipeline[216] <= delay_pipeline[215];
          delay_pipeline[217] <= delay_pipeline[216];
          delay_pipeline[218] <= delay_pipeline[217];
          delay_pipeline[219] <= delay_pipeline[218];
          delay_pipeline[220] <= delay_pipeline[219];
          delay_pipeline[221] <= delay_pipeline[220];
          delay_pipeline[222] <= delay_pipeline[221];
          delay_pipeline[223] <= delay_pipeline[222];
        end
      end
    end // Delay_Pipeline_1_process


  assign mem_addr_1 = {delay_pipeline[55], delay_pipeline[47], delay_pipeline[39], delay_pipeline[31], delay_pipeline[23], delay_pipeline[15]};

  always @(mem_addr_1)
  begin
    case(mem_addr_1)
      6'b000000 : memoutb1_1 = 6'b000000;
      6'b000001 : memoutb1_1 = 6'b000001;
      6'b000010 : memoutb1_1 = 6'b000001;
      6'b000011 : memoutb1_1 = 6'b000010;
      6'b000100 : memoutb1_1 = 6'b000001;
      6'b000101 : memoutb1_1 = 6'b000010;
      6'b000110 : memoutb1_1 = 6'b000010;
      6'b000111 : memoutb1_1 = 6'b000011;
      6'b001000 : memoutb1_1 = 6'b111110;
      6'b001001 : memoutb1_1 = 6'b111111;
      6'b001010 : memoutb1_1 = 6'b111111;
      6'b001011 : memoutb1_1 = 6'b000000;
      6'b001100 : memoutb1_1 = 6'b111111;
      6'b001101 : memoutb1_1 = 6'b000000;
      6'b001110 : memoutb1_1 = 6'b000000;
      6'b001111 : memoutb1_1 = 6'b000001;
      6'b010000 : memoutb1_1 = 6'b111000;
      6'b010001 : memoutb1_1 = 6'b111001;
      6'b010010 : memoutb1_1 = 6'b111001;
      6'b010011 : memoutb1_1 = 6'b111010;
      6'b010100 : memoutb1_1 = 6'b111001;
      6'b010101 : memoutb1_1 = 6'b111010;
      6'b010110 : memoutb1_1 = 6'b111010;
      6'b010111 : memoutb1_1 = 6'b111011;
      6'b011000 : memoutb1_1 = 6'b110110;
      6'b011001 : memoutb1_1 = 6'b110111;
      6'b011010 : memoutb1_1 = 6'b110111;
      6'b011011 : memoutb1_1 = 6'b111000;
      6'b011100 : memoutb1_1 = 6'b110111;
      6'b011101 : memoutb1_1 = 6'b111000;
      6'b011110 : memoutb1_1 = 6'b111000;
      6'b011111 : memoutb1_1 = 6'b111001;
      6'b100000 : memoutb1_1 = 6'b101110;
      6'b100001 : memoutb1_1 = 6'b101111;
      6'b100010 : memoutb1_1 = 6'b101111;
      6'b100011 : memoutb1_1 = 6'b110000;
      6'b100100 : memoutb1_1 = 6'b101111;
      6'b100101 : memoutb1_1 = 6'b110000;
      6'b100110 : memoutb1_1 = 6'b110000;
      6'b100111 : memoutb1_1 = 6'b110001;
      6'b101000 : memoutb1_1 = 6'b101100;
      6'b101001 : memoutb1_1 = 6'b101101;
      6'b101010 : memoutb1_1 = 6'b101101;
      6'b101011 : memoutb1_1 = 6'b101110;
      6'b101100 : memoutb1_1 = 6'b101101;
      6'b101101 : memoutb1_1 = 6'b101110;
      6'b101110 : memoutb1_1 = 6'b101110;
      6'b101111 : memoutb1_1 = 6'b101111;
      6'b110000 : memoutb1_1 = 6'b100110;
      6'b110001 : memoutb1_1 = 6'b100111;
      6'b110010 : memoutb1_1 = 6'b100111;
      6'b110011 : memoutb1_1 = 6'b101000;
      6'b110100 : memoutb1_1 = 6'b100111;
      6'b110101 : memoutb1_1 = 6'b101000;
      6'b110110 : memoutb1_1 = 6'b101000;
      6'b110111 : memoutb1_1 = 6'b101001;
      6'b111000 : memoutb1_1 = 6'b100100;
      6'b111001 : memoutb1_1 = 6'b100101;
      6'b111010 : memoutb1_1 = 6'b100101;
      6'b111011 : memoutb1_1 = 6'b100110;
      6'b111100 : memoutb1_1 = 6'b100101;
      6'b111101 : memoutb1_1 = 6'b100110;
      6'b111110 : memoutb1_1 = 6'b100110;
      6'b111111 : memoutb1_1 = 6'b100111;
      default : memoutb1_1 = 6'b100111;
    endcase
  end

  assign mem_addr_2 = {delay_pipeline[103], delay_pipeline[95], delay_pipeline[87], delay_pipeline[79], delay_pipeline[71], delay_pipeline[63]};

  always @(mem_addr_2)
  begin
    case(mem_addr_2)
      6'b000000 : memoutb1_2 = 9'b000000000;
      6'b000001 : memoutb1_2 = 9'b111100001;
      6'b000010 : memoutb1_2 = 9'b111011000;
      6'b000011 : memoutb1_2 = 9'b110111001;
      6'b000100 : memoutb1_2 = 9'b111011001;
      6'b000101 : memoutb1_2 = 9'b110111010;
      6'b000110 : memoutb1_2 = 9'b110110001;
      6'b000111 : memoutb1_2 = 9'b110010010;
      6'b001000 : memoutb1_2 = 9'b111101001;
      6'b001001 : memoutb1_2 = 9'b111001010;
      6'b001010 : memoutb1_2 = 9'b111000001;
      6'b001011 : memoutb1_2 = 9'b110100010;
      6'b001100 : memoutb1_2 = 9'b111000010;
      6'b001101 : memoutb1_2 = 9'b110100011;
      6'b001110 : memoutb1_2 = 9'b110011010;
      6'b001111 : memoutb1_2 = 9'b101111011;
      6'b010000 : memoutb1_2 = 9'b000000110;
      6'b010001 : memoutb1_2 = 9'b111100111;
      6'b010010 : memoutb1_2 = 9'b111011110;
      6'b010011 : memoutb1_2 = 9'b110111111;
      6'b010100 : memoutb1_2 = 9'b111011111;
      6'b010101 : memoutb1_2 = 9'b111000000;
      6'b010110 : memoutb1_2 = 9'b110110111;
      6'b010111 : memoutb1_2 = 9'b110011000;
      6'b011000 : memoutb1_2 = 9'b111101111;
      6'b011001 : memoutb1_2 = 9'b111010000;
      6'b011010 : memoutb1_2 = 9'b111000111;
      6'b011011 : memoutb1_2 = 9'b110101000;
      6'b011100 : memoutb1_2 = 9'b111001000;
      6'b011101 : memoutb1_2 = 9'b110101001;
      6'b011110 : memoutb1_2 = 9'b110100000;
      6'b011111 : memoutb1_2 = 9'b110000001;
      6'b100000 : memoutb1_2 = 9'b000101010;
      6'b100001 : memoutb1_2 = 9'b000001011;
      6'b100010 : memoutb1_2 = 9'b000000010;
      6'b100011 : memoutb1_2 = 9'b111100011;
      6'b100100 : memoutb1_2 = 9'b000000011;
      6'b100101 : memoutb1_2 = 9'b111100100;
      6'b100110 : memoutb1_2 = 9'b111011011;
      6'b100111 : memoutb1_2 = 9'b110111100;
      6'b101000 : memoutb1_2 = 9'b000010011;
      6'b101001 : memoutb1_2 = 9'b111110100;
      6'b101010 : memoutb1_2 = 9'b111101011;
      6'b101011 : memoutb1_2 = 9'b111001100;
      6'b101100 : memoutb1_2 = 9'b111101100;
      6'b101101 : memoutb1_2 = 9'b111001101;
      6'b101110 : memoutb1_2 = 9'b111000100;
      6'b101111 : memoutb1_2 = 9'b110100101;
      6'b110000 : memoutb1_2 = 9'b000110000;
      6'b110001 : memoutb1_2 = 9'b000010001;
      6'b110010 : memoutb1_2 = 9'b000001000;
      6'b110011 : memoutb1_2 = 9'b111101001;
      6'b110100 : memoutb1_2 = 9'b000001001;
      6'b110101 : memoutb1_2 = 9'b111101010;
      6'b110110 : memoutb1_2 = 9'b111100001;
      6'b110111 : memoutb1_2 = 9'b111000010;
      6'b111000 : memoutb1_2 = 9'b000011001;
      6'b111001 : memoutb1_2 = 9'b111111010;
      6'b111010 : memoutb1_2 = 9'b111110001;
      6'b111011 : memoutb1_2 = 9'b111010010;
      6'b111100 : memoutb1_2 = 9'b111110010;
      6'b111101 : memoutb1_2 = 9'b111010011;
      6'b111110 : memoutb1_2 = 9'b111001010;
      6'b111111 : memoutb1_2 = 9'b110101011;
      default : memoutb1_2 = 9'b110101011;
    endcase
  end

  assign mem_addr_3 = {delay_pipeline[151], delay_pipeline[143], delay_pipeline[135], delay_pipeline[127], delay_pipeline[119], delay_pipeline[111]};

  always @(mem_addr_3)
  begin
    case(mem_addr_3)
      6'b000000 : memoutb1_3 = 10'b0000000000;
      6'b000001 : memoutb1_3 = 10'b0001000111;
      6'b000010 : memoutb1_3 = 10'b0001010011;
      6'b000011 : memoutb1_3 = 10'b0010011010;
      6'b000100 : memoutb1_3 = 10'b0001000111;
      6'b000101 : memoutb1_3 = 10'b0010001110;
      6'b000110 : memoutb1_3 = 10'b0010011010;
      6'b000111 : memoutb1_3 = 10'b0011100001;
      6'b001000 : memoutb1_3 = 10'b0000101010;
      6'b001001 : memoutb1_3 = 10'b0001110001;
      6'b001010 : memoutb1_3 = 10'b0001111101;
      6'b001011 : memoutb1_3 = 10'b0011000100;
      6'b001100 : memoutb1_3 = 10'b0001110001;
      6'b001101 : memoutb1_3 = 10'b0010111000;
      6'b001110 : memoutb1_3 = 10'b0011000100;
      6'b001111 : memoutb1_3 = 10'b0100001011;
      6'b010000 : memoutb1_3 = 10'b0000000110;
      6'b010001 : memoutb1_3 = 10'b0001001101;
      6'b010010 : memoutb1_3 = 10'b0001011001;
      6'b010011 : memoutb1_3 = 10'b0010100000;
      6'b010100 : memoutb1_3 = 10'b0001001101;
      6'b010101 : memoutb1_3 = 10'b0010010100;
      6'b010110 : memoutb1_3 = 10'b0010100000;
      6'b010111 : memoutb1_3 = 10'b0011100111;
      6'b011000 : memoutb1_3 = 10'b0000110000;
      6'b011001 : memoutb1_3 = 10'b0001110111;
      6'b011010 : memoutb1_3 = 10'b0010000011;
      6'b011011 : memoutb1_3 = 10'b0011001010;
      6'b011100 : memoutb1_3 = 10'b0001110111;
      6'b011101 : memoutb1_3 = 10'b0010111110;
      6'b011110 : memoutb1_3 = 10'b0011001010;
      6'b011111 : memoutb1_3 = 10'b0100010001;
      6'b100000 : memoutb1_3 = 10'b1111101001;
      6'b100001 : memoutb1_3 = 10'b0000110000;
      6'b100010 : memoutb1_3 = 10'b0000111100;
      6'b100011 : memoutb1_3 = 10'b0010000011;
      6'b100100 : memoutb1_3 = 10'b0000110000;
      6'b100101 : memoutb1_3 = 10'b0001110111;
      6'b100110 : memoutb1_3 = 10'b0010000011;
      6'b100111 : memoutb1_3 = 10'b0011001010;
      6'b101000 : memoutb1_3 = 10'b0000010011;
      6'b101001 : memoutb1_3 = 10'b0001011010;
      6'b101010 : memoutb1_3 = 10'b0001100110;
      6'b101011 : memoutb1_3 = 10'b0010101101;
      6'b101100 : memoutb1_3 = 10'b0001011010;
      6'b101101 : memoutb1_3 = 10'b0010100001;
      6'b101110 : memoutb1_3 = 10'b0010101101;
      6'b101111 : memoutb1_3 = 10'b0011110100;
      6'b110000 : memoutb1_3 = 10'b1111101111;
      6'b110001 : memoutb1_3 = 10'b0000110110;
      6'b110010 : memoutb1_3 = 10'b0001000010;
      6'b110011 : memoutb1_3 = 10'b0010001001;
      6'b110100 : memoutb1_3 = 10'b0000110110;
      6'b110101 : memoutb1_3 = 10'b0001111101;
      6'b110110 : memoutb1_3 = 10'b0010001001;
      6'b110111 : memoutb1_3 = 10'b0011010000;
      6'b111000 : memoutb1_3 = 10'b0000011001;
      6'b111001 : memoutb1_3 = 10'b0001100000;
      6'b111010 : memoutb1_3 = 10'b0001101100;
      6'b111011 : memoutb1_3 = 10'b0010110011;
      6'b111100 : memoutb1_3 = 10'b0001100000;
      6'b111101 : memoutb1_3 = 10'b0010100111;
      6'b111110 : memoutb1_3 = 10'b0010110011;
      6'b111111 : memoutb1_3 = 10'b0011111010;
      default : memoutb1_3 = 10'b0011111010;
    endcase
  end

  assign mem_addr_4 = {delay_pipeline[199], delay_pipeline[191], delay_pipeline[183], delay_pipeline[175], delay_pipeline[167], delay_pipeline[159]};

  always @(mem_addr_4)
  begin
    case(mem_addr_4)
      6'b000000 : memoutb1_4 = 9'b000000000;
      6'b000001 : memoutb1_4 = 9'b111011001;
      6'b000010 : memoutb1_4 = 9'b111011000;
      6'b000011 : memoutb1_4 = 9'b110110001;
      6'b000100 : memoutb1_4 = 9'b111100001;
      6'b000101 : memoutb1_4 = 9'b110111010;
      6'b000110 : memoutb1_4 = 9'b110111001;
      6'b000111 : memoutb1_4 = 9'b110010010;
      6'b001000 : memoutb1_4 = 9'b111101110;
      6'b001001 : memoutb1_4 = 9'b111000111;
      6'b001010 : memoutb1_4 = 9'b111000110;
      6'b001011 : memoutb1_4 = 9'b110011111;
      6'b001100 : memoutb1_4 = 9'b111001111;
      6'b001101 : memoutb1_4 = 9'b110101000;
      6'b001110 : memoutb1_4 = 9'b110100111;
      6'b001111 : memoutb1_4 = 9'b110000000;
      6'b010000 : memoutb1_4 = 9'b111111000;
      6'b010001 : memoutb1_4 = 9'b111010001;
      6'b010010 : memoutb1_4 = 9'b111010000;
      6'b010011 : memoutb1_4 = 9'b110101001;
      6'b010100 : memoutb1_4 = 9'b111011001;
      6'b010101 : memoutb1_4 = 9'b110110010;
      6'b010110 : memoutb1_4 = 9'b110110001;
      6'b010111 : memoutb1_4 = 9'b110001010;
      6'b011000 : memoutb1_4 = 9'b111100110;
      6'b011001 : memoutb1_4 = 9'b110111111;
      6'b011010 : memoutb1_4 = 9'b110111110;
      6'b011011 : memoutb1_4 = 9'b110010111;
      6'b011100 : memoutb1_4 = 9'b111000111;
      6'b011101 : memoutb1_4 = 9'b110100000;
      6'b011110 : memoutb1_4 = 9'b110011111;
      6'b011111 : memoutb1_4 = 9'b101111000;
      6'b100000 : memoutb1_4 = 9'b111111110;
      6'b100001 : memoutb1_4 = 9'b111010111;
      6'b100010 : memoutb1_4 = 9'b111010110;
      6'b100011 : memoutb1_4 = 9'b110101111;
      6'b100100 : memoutb1_4 = 9'b111011111;
      6'b100101 : memoutb1_4 = 9'b110111000;
      6'b100110 : memoutb1_4 = 9'b110110111;
      6'b100111 : memoutb1_4 = 9'b110010000;
      6'b101000 : memoutb1_4 = 9'b111101100;
      6'b101001 : memoutb1_4 = 9'b111000101;
      6'b101010 : memoutb1_4 = 9'b111000100;
      6'b101011 : memoutb1_4 = 9'b110011101;
      6'b101100 : memoutb1_4 = 9'b111001101;
      6'b101101 : memoutb1_4 = 9'b110100110;
      6'b101110 : memoutb1_4 = 9'b110100101;
      6'b101111 : memoutb1_4 = 9'b101111110;
      6'b110000 : memoutb1_4 = 9'b111110110;
      6'b110001 : memoutb1_4 = 9'b111001111;
      6'b110010 : memoutb1_4 = 9'b111001110;
      6'b110011 : memoutb1_4 = 9'b110100111;
      6'b110100 : memoutb1_4 = 9'b111010111;
      6'b110101 : memoutb1_4 = 9'b110110000;
      6'b110110 : memoutb1_4 = 9'b110101111;
      6'b110111 : memoutb1_4 = 9'b110001000;
      6'b111000 : memoutb1_4 = 9'b111100100;
      6'b111001 : memoutb1_4 = 9'b110111101;
      6'b111010 : memoutb1_4 = 9'b110111100;
      6'b111011 : memoutb1_4 = 9'b110010101;
      6'b111100 : memoutb1_4 = 9'b111000101;
      6'b111101 : memoutb1_4 = 9'b110011110;
      6'b111110 : memoutb1_4 = 9'b110011101;
      6'b111111 : memoutb1_4 = 9'b101110110;
      default : memoutb1_4 = 9'b101110110;
    endcase
  end

  assign mem_addr_5 = {delay_pipeline[223], delay_pipeline[215], delay_pipeline[207]};

  always @(mem_addr_5)
  begin
    case(mem_addr_5)
      3'b000 : memoutb1_5 = 3'b000;
      3'b001 : memoutb1_5 = 3'b001;
      3'b010 : memoutb1_5 = 3'b001;
      3'b011 : memoutb1_5 = 3'b010;
      3'b100 : memoutb1_5 = 3'b001;
      3'b101 : memoutb1_5 = 3'b010;
      3'b110 : memoutb1_5 = 3'b010;
      3'b111 : memoutb1_5 = 3'b011;
      default : memoutb1_5 = 3'b011;
    endcase
  end

  assign add_signext = $signed({{3{memoutb1_1[5]}}, memoutb1_1});
  assign add_signext_1 = memoutb1_2;
  assign sum1_1 = add_signext + add_signext_1;

  assign add_signext_2 = memoutb1_3;
  assign add_signext_3 = $signed({{1{memoutb1_4[8]}}, memoutb1_4});
  assign sum1_2 = add_signext_2 + add_signext_3;

  always @ (posedge clk or posedge reset)
    begin: temp_process1
      if (reset == 1'b1) begin
        sumpipe1_1 <= 0;
        sumpipe1_2 <= 0;
        sumpipe1_3 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe1_1 <= sum1_1;
          sumpipe1_2 <= sum1_2;
          sumpipe1_3 <= memoutb1_5;
        end
      end
    end // temp_process1

  assign add_signext_4 = $signed({{1{sumpipe1_1[9]}}, sumpipe1_1});
  assign add_signext_5 = sumpipe1_2;
  assign sum2_1 = add_signext_4 + add_signext_5;

  always @ (posedge clk or posedge reset)
    begin: temp_process2
      if (reset == 1'b1) begin
        sumpipe2_1 <= 0;
        sumpipe2_2 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe2_1 <= sum2_1;
          sumpipe2_2 <= sumpipe1_3;
        end
      end
    end // temp_process2

  assign add_signext_6 = sumpipe2_1;
  assign add_signext_7 = $signed({{9{sumpipe2_2[2]}}, sumpipe2_2});
  assign sum3_1 = add_signext_6 + add_signext_7;

  always @ (posedge clk or posedge reset)
    begin: temp_process3
      if (reset == 1'b1) begin
        sumpipe3_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe3_1 <= sum3_1;
        end
      end
    end // temp_process3

  assign memoutb1 = sumpipe3_1[9:0];

  //  Shift and add the LUT results to compute the scaled accumulated sum

  assign memoutb1_cast = $signed({memoutb1[9:0], 7'b0000000});

  assign acc_out_shft = $signed({{1{acc_out[18]}}, acc_out[18:1]});

  assign add_signext_8 = acc_out_shft;
  assign add_signext_9 = memoutb1_cast;
  assign add_temp = add_signext_8 + add_signext_9;
  assign addsub_add = add_temp[18:0];

  assign sub_signext = acc_out_shft;
  assign sub_signext_1 = memoutb1_cast;
  assign sub_temp = sub_signext - sub_signext_1;
  assign addsub_sub = sub_temp[18:0];

  assign add_sub_out = (phase_2 == 1'b1) ? addsub_sub :
                      addsub_add;

  assign acc_in = (phase_3 == 1'b1) ? memoutb1_cast :
            add_sub_out;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_process
      if (reset == 1'b1) begin
        acc_out <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          acc_out <= acc_in;
        end
      end
    end // Acc_reg_process

  always @ (posedge clk or posedge reset)
    begin: Finalsum_reg_process
      if (reset == 1'b1) begin
        final_acc_out <= 0;
      end
      else begin
        if (phase_3 == 1'b1) begin
          final_acc_out <= acc_out;
        end
      end
    end // Finalsum_reg_process

  assign output_da = final_acc_out;

  assign output_typeconvert = $signed({{2{output_da[18]}}, output_da});

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_7 == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // fir_30_8b_da

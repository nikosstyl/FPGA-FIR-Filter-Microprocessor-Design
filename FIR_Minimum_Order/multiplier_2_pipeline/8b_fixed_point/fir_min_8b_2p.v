// -------------------------------------------------------------
//
// Module: fir_min_8b_2p
// Generated by MATLAB(R) 9.12 and Filter Design HDL Coder 3.1.11.
// Generated on: 2023-06-19 20:38:10
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// FIRAdderStyle: tree
// MultiplierInputPipeline: 2
// MultiplierOutputPipeline: 2
// OptimizeForHDL: on
// TargetDirectory: W:\Nikos\UTh\Σχεδίαση Επεξεργαστών\Project\FIR_Minimum_Order\multiplier_2_pipeline\8b_fixed_point
// AddPipelineRegisters: on
// Name: fir_min_8b_2p
// InputDataType: numerictype(1,8,0)
// TargetLanguage: Verilog
// TestBenchName: fir_min_8b_2p_tb
// TestBenchStimulus: impulse step ramp chirp noise 

// Filter Specifications:
//
// Sample Rate     : 46 kHz
// Response        : Lowpass
// Specification   : Fp,Fst,Ap,Ast
// Stopband Atten. : 60 dB
// Passband Edge   : 8 kHz
// Stopband Edge   : 9.6 kHz
// Passband Ripple : 1 dB
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 61
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s8,8 -> [-5.000000e-01 5.000000e-01)
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module fir_min_8b_2p
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [7:0] filter_in; //sfix8
  output  signed [21:0] filter_out; //sfix22_En8

////////////////////////////////////////////////////////////////
//Module Architecture: fir_min_8b_2p
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [7:0] coeff1 = 8'b00000000; //sfix8_En8
  parameter signed [7:0] coeff2 = 8'b00000000; //sfix8_En8
  parameter signed [7:0] coeff3 = 8'b11111111; //sfix8_En8
  parameter signed [7:0] coeff4 = 8'b11111110; //sfix8_En8
  parameter signed [7:0] coeff5 = 8'b11111101; //sfix8_En8
  parameter signed [7:0] coeff6 = 8'b11111110; //sfix8_En8
  parameter signed [7:0] coeff7 = 8'b00000000; //sfix8_En8
  parameter signed [7:0] coeff8 = 8'b00000010; //sfix8_En8
  parameter signed [7:0] coeff9 = 8'b00000001; //sfix8_En8
  parameter signed [7:0] coeff10 = 8'b11111111; //sfix8_En8
  parameter signed [7:0] coeff11 = 8'b11111110; //sfix8_En8
  parameter signed [7:0] coeff12 = 8'b11111111; //sfix8_En8
  parameter signed [7:0] coeff13 = 8'b00000011; //sfix8_En8
  parameter signed [7:0] coeff14 = 8'b00000011; //sfix8_En8
  parameter signed [7:0] coeff15 = 8'b11111111; //sfix8_En8
  parameter signed [7:0] coeff16 = 8'b11111100; //sfix8_En8
  parameter signed [7:0] coeff17 = 8'b11111101; //sfix8_En8
  parameter signed [7:0] coeff18 = 8'b00000011; //sfix8_En8
  parameter signed [7:0] coeff19 = 8'b00000110; //sfix8_En8
  parameter signed [7:0] coeff20 = 8'b00000010; //sfix8_En8
  parameter signed [7:0] coeff21 = 8'b11111010; //sfix8_En8
  parameter signed [7:0] coeff22 = 8'b11111001; //sfix8_En8
  parameter signed [7:0] coeff23 = 8'b00000001; //sfix8_En8
  parameter signed [7:0] coeff24 = 8'b00001010; //sfix8_En8
  parameter signed [7:0] coeff25 = 8'b00001001; //sfix8_En8
  parameter signed [7:0] coeff26 = 8'b11111001; //sfix8_En8
  parameter signed [7:0] coeff27 = 8'b11101100; //sfix8_En8
  parameter signed [7:0] coeff28 = 8'b11110110; //sfix8_En8
  parameter signed [7:0] coeff29 = 8'b00011101; //sfix8_En8
  parameter signed [7:0] coeff30 = 8'b01001011; //sfix8_En8
  parameter signed [7:0] coeff31 = 8'b01011111; //sfix8_En8
  parameter signed [7:0] coeff32 = 8'b01001011; //sfix8_En8
  parameter signed [7:0] coeff33 = 8'b00011101; //sfix8_En8
  parameter signed [7:0] coeff34 = 8'b11110110; //sfix8_En8
  parameter signed [7:0] coeff35 = 8'b11101100; //sfix8_En8
  parameter signed [7:0] coeff36 = 8'b11111001; //sfix8_En8
  parameter signed [7:0] coeff37 = 8'b00001001; //sfix8_En8
  parameter signed [7:0] coeff38 = 8'b00001010; //sfix8_En8
  parameter signed [7:0] coeff39 = 8'b00000001; //sfix8_En8
  parameter signed [7:0] coeff40 = 8'b11111001; //sfix8_En8
  parameter signed [7:0] coeff41 = 8'b11111010; //sfix8_En8
  parameter signed [7:0] coeff42 = 8'b00000010; //sfix8_En8
  parameter signed [7:0] coeff43 = 8'b00000110; //sfix8_En8
  parameter signed [7:0] coeff44 = 8'b00000011; //sfix8_En8
  parameter signed [7:0] coeff45 = 8'b11111101; //sfix8_En8
  parameter signed [7:0] coeff46 = 8'b11111100; //sfix8_En8
  parameter signed [7:0] coeff47 = 8'b11111111; //sfix8_En8
  parameter signed [7:0] coeff48 = 8'b00000011; //sfix8_En8
  parameter signed [7:0] coeff49 = 8'b00000011; //sfix8_En8
  parameter signed [7:0] coeff50 = 8'b11111111; //sfix8_En8
  parameter signed [7:0] coeff51 = 8'b11111110; //sfix8_En8
  parameter signed [7:0] coeff52 = 8'b11111111; //sfix8_En8
  parameter signed [7:0] coeff53 = 8'b00000001; //sfix8_En8
  parameter signed [7:0] coeff54 = 8'b00000010; //sfix8_En8
  parameter signed [7:0] coeff55 = 8'b00000000; //sfix8_En8
  parameter signed [7:0] coeff56 = 8'b11111110; //sfix8_En8
  parameter signed [7:0] coeff57 = 8'b11111101; //sfix8_En8
  parameter signed [7:0] coeff58 = 8'b11111110; //sfix8_En8
  parameter signed [7:0] coeff59 = 8'b11111111; //sfix8_En8
  parameter signed [7:0] coeff60 = 8'b00000000; //sfix8_En8
  parameter signed [7:0] coeff61 = 8'b00000000; //sfix8_En8

  // Signals
  reg  signed [7:0] delay_pipeline [0:60] ; // sfix8
  wire signed [15:0] product59; // sfix16_En8
  wire signed [7:0] delay_pipeline_58_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe [0:1] ; // sfix8
  wire signed [15:0] product59_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_1 [0:1] ; // sfix16_En8
  wire signed [8:0] mulpwr2_temp; // sfix9
  wire signed [15:0] product58; // sfix16_En8
  wire signed [7:0] delay_pipeline_57_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe_2 [0:1] ; // sfix8
  wire signed [15:0] product58_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_3 [0:1] ; // sfix16_En8
  wire signed [8:0] mulpwr2_temp_1; // sfix9
  wire signed [15:0] product57; // sfix16_En8
  reg  signed [7:0] delay_pipeline_56_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_56_under_pipe_1; // sfix8
  reg  signed [7:0] coeff57_pipe; // sfix8_En8
  reg  signed [7:0] coeff57_pipe_1; // sfix8_En8
  reg  signed [15:0] product57_pipe; // sfix16_En8
  reg  signed [15:0] product57_pipe_1; // sfix16_En8
  wire signed [15:0] product56; // sfix16_En8
  wire signed [7:0] delay_pipeline_55_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe_4 [0:1] ; // sfix8
  wire signed [15:0] product56_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_5 [0:1] ; // sfix16_En8
  wire signed [8:0] mulpwr2_temp_2; // sfix9
  wire signed [15:0] product54; // sfix16_En8
  wire signed [7:0] delay_pipeline_53_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe_6 [0:1] ; // sfix8
  wire signed [15:0] product54_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_7 [0:1] ; // sfix16_En8
  wire signed [15:0] product53; // sfix16_En8
  wire signed [7:0] delay_pipeline_52_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe_8 [0:1] ; // sfix8
  wire signed [15:0] product53_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_9 [0:1] ; // sfix16_En8
  wire signed [15:0] product52; // sfix16_En8
  wire signed [7:0] delay_pipeline_51_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe_10 [0:1] ; // sfix8
  wire signed [15:0] product52_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_11 [0:1] ; // sfix16_En8
  wire signed [8:0] mulpwr2_temp_3; // sfix9
  wire signed [15:0] product51; // sfix16_En8
  wire signed [7:0] delay_pipeline_50_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe_12 [0:1] ; // sfix8
  wire signed [15:0] product51_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_13 [0:1] ; // sfix16_En8
  wire signed [8:0] mulpwr2_temp_4; // sfix9
  wire signed [15:0] product50; // sfix16_En8
  wire signed [7:0] delay_pipeline_49_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe_14 [0:1] ; // sfix8
  wire signed [15:0] product50_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_15 [0:1] ; // sfix16_En8
  wire signed [8:0] mulpwr2_temp_5; // sfix9
  wire signed [15:0] product49; // sfix16_En8
  reg  signed [7:0] delay_pipeline_48_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_48_under_pipe_1; // sfix8
  reg  signed [7:0] coeff49_pipe; // sfix8_En8
  reg  signed [7:0] coeff49_pipe_1; // sfix8_En8
  reg  signed [15:0] product49_pipe; // sfix16_En8
  reg  signed [15:0] product49_pipe_1; // sfix16_En8
  wire signed [15:0] product48; // sfix16_En8
  reg  signed [7:0] delay_pipeline_47_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_47_under_pipe_1; // sfix8
  reg  signed [7:0] coeff48_pipe; // sfix8_En8
  reg  signed [7:0] coeff48_pipe_1; // sfix8_En8
  reg  signed [15:0] product48_pipe; // sfix16_En8
  reg  signed [15:0] product48_pipe_1; // sfix16_En8
  wire signed [15:0] product47; // sfix16_En8
  wire signed [7:0] delay_pipeline_46_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe_16 [0:1] ; // sfix8
  wire signed [15:0] product47_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_17 [0:1] ; // sfix16_En8
  wire signed [8:0] mulpwr2_temp_6; // sfix9
  wire signed [15:0] product46; // sfix16_En8
  wire signed [7:0] delay_pipeline_45_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe_18 [0:1] ; // sfix8
  wire signed [15:0] product46_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_19 [0:1] ; // sfix16_En8
  wire signed [8:0] mulpwr2_temp_7; // sfix9
  wire signed [15:0] product45; // sfix16_En8
  reg  signed [7:0] delay_pipeline_44_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_44_under_pipe_1; // sfix8
  reg  signed [7:0] coeff45_pipe; // sfix8_En8
  reg  signed [7:0] coeff45_pipe_1; // sfix8_En8
  reg  signed [15:0] product45_pipe; // sfix16_En8
  reg  signed [15:0] product45_pipe_1; // sfix16_En8
  wire signed [15:0] product44; // sfix16_En8
  reg  signed [7:0] delay_pipeline_43_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_43_under_pipe_1; // sfix8
  reg  signed [7:0] coeff44_pipe; // sfix8_En8
  reg  signed [7:0] coeff44_pipe_1; // sfix8_En8
  reg  signed [15:0] product44_pipe; // sfix16_En8
  reg  signed [15:0] product44_pipe_1; // sfix16_En8
  wire signed [15:0] product43; // sfix16_En8
  reg  signed [7:0] delay_pipeline_42_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_42_under_pipe_1; // sfix8
  reg  signed [7:0] coeff43_pipe; // sfix8_En8
  reg  signed [7:0] coeff43_pipe_1; // sfix8_En8
  reg  signed [15:0] product43_pipe; // sfix16_En8
  reg  signed [15:0] product43_pipe_1; // sfix16_En8
  wire signed [15:0] product42; // sfix16_En8
  wire signed [7:0] delay_pipeline_41_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe_20 [0:1] ; // sfix8
  wire signed [15:0] product42_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_21 [0:1] ; // sfix16_En8
  wire signed [15:0] product41; // sfix16_En8
  reg  signed [7:0] delay_pipeline_40_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_40_under_pipe_1; // sfix8
  reg  signed [7:0] coeff41_pipe; // sfix8_En8
  reg  signed [7:0] coeff41_pipe_1; // sfix8_En8
  reg  signed [15:0] product41_pipe; // sfix16_En8
  reg  signed [15:0] product41_pipe_1; // sfix16_En8
  wire signed [15:0] product40; // sfix16_En8
  reg  signed [7:0] delay_pipeline_39_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_39_under_pipe_1; // sfix8
  reg  signed [7:0] coeff40_pipe; // sfix8_En8
  reg  signed [7:0] coeff40_pipe_1; // sfix8_En8
  reg  signed [15:0] product40_pipe; // sfix16_En8
  reg  signed [15:0] product40_pipe_1; // sfix16_En8
  wire signed [15:0] product39; // sfix16_En8
  wire signed [7:0] delay_pipeline_38_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe_22 [0:1] ; // sfix8
  wire signed [15:0] product39_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_23 [0:1] ; // sfix16_En8
  wire signed [15:0] product38; // sfix16_En8
  reg  signed [7:0] delay_pipeline_37_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_37_under_pipe_1; // sfix8
  reg  signed [7:0] coeff38_pipe; // sfix8_En8
  reg  signed [7:0] coeff38_pipe_1; // sfix8_En8
  reg  signed [15:0] product38_pipe; // sfix16_En8
  reg  signed [15:0] product38_pipe_1; // sfix16_En8
  wire signed [15:0] product37; // sfix16_En8
  reg  signed [7:0] delay_pipeline_36_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_36_under_pipe_1; // sfix8
  reg  signed [7:0] coeff37_pipe; // sfix8_En8
  reg  signed [7:0] coeff37_pipe_1; // sfix8_En8
  reg  signed [15:0] product37_pipe; // sfix16_En8
  reg  signed [15:0] product37_pipe_1; // sfix16_En8
  wire signed [15:0] product36; // sfix16_En8
  reg  signed [7:0] delay_pipeline_35_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_35_under_pipe_1; // sfix8
  reg  signed [7:0] coeff36_pipe; // sfix8_En8
  reg  signed [7:0] coeff36_pipe_1; // sfix8_En8
  reg  signed [15:0] product36_pipe; // sfix16_En8
  reg  signed [15:0] product36_pipe_1; // sfix16_En8
  wire signed [15:0] product35; // sfix16_En8
  reg  signed [7:0] delay_pipeline_34_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_34_under_pipe_1; // sfix8
  reg  signed [7:0] coeff35_pipe; // sfix8_En8
  reg  signed [7:0] coeff35_pipe_1; // sfix8_En8
  reg  signed [15:0] product35_pipe; // sfix16_En8
  reg  signed [15:0] product35_pipe_1; // sfix16_En8
  wire signed [15:0] product34; // sfix16_En8
  reg  signed [7:0] delay_pipeline_33_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_33_under_pipe_1; // sfix8
  reg  signed [7:0] coeff34_pipe; // sfix8_En8
  reg  signed [7:0] coeff34_pipe_1; // sfix8_En8
  reg  signed [15:0] product34_pipe; // sfix16_En8
  reg  signed [15:0] product34_pipe_1; // sfix16_En8
  wire signed [15:0] product33; // sfix16_En8
  reg  signed [7:0] delay_pipeline_32_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_32_under_pipe_1; // sfix8
  reg  signed [7:0] coeff33_pipe; // sfix8_En8
  reg  signed [7:0] coeff33_pipe_1; // sfix8_En8
  reg  signed [15:0] product33_pipe; // sfix16_En8
  reg  signed [15:0] product33_pipe_1; // sfix16_En8
  wire signed [15:0] product32; // sfix16_En8
  reg  signed [7:0] delay_pipeline_31_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_31_under_pipe_1; // sfix8
  reg  signed [7:0] coeff32_pipe; // sfix8_En8
  reg  signed [7:0] coeff32_pipe_1; // sfix8_En8
  reg  signed [15:0] product32_pipe; // sfix16_En8
  reg  signed [15:0] product32_pipe_1; // sfix16_En8
  wire signed [15:0] product31; // sfix16_En8
  reg  signed [7:0] delay_pipeline_30_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_30_under_pipe_1; // sfix8
  reg  signed [7:0] coeff31_pipe; // sfix8_En8
  reg  signed [7:0] coeff31_pipe_1; // sfix8_En8
  reg  signed [15:0] product31_pipe; // sfix16_En8
  reg  signed [15:0] product31_pipe_1; // sfix16_En8
  wire signed [15:0] product30; // sfix16_En8
  reg  signed [7:0] delay_pipeline_29_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_29_under_pipe_1; // sfix8
  reg  signed [7:0] coeff30_pipe; // sfix8_En8
  reg  signed [7:0] coeff30_pipe_1; // sfix8_En8
  reg  signed [15:0] product30_pipe; // sfix16_En8
  reg  signed [15:0] product30_pipe_1; // sfix16_En8
  wire signed [15:0] product29; // sfix16_En8
  reg  signed [7:0] delay_pipeline_28_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_28_under_pipe_1; // sfix8
  reg  signed [7:0] coeff29_pipe; // sfix8_En8
  reg  signed [7:0] coeff29_pipe_1; // sfix8_En8
  reg  signed [15:0] product29_pipe; // sfix16_En8
  reg  signed [15:0] product29_pipe_1; // sfix16_En8
  wire signed [15:0] product28; // sfix16_En8
  reg  signed [7:0] delay_pipeline_27_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_27_under_pipe_1; // sfix8
  reg  signed [7:0] coeff28_pipe; // sfix8_En8
  reg  signed [7:0] coeff28_pipe_1; // sfix8_En8
  reg  signed [15:0] product28_pipe; // sfix16_En8
  reg  signed [15:0] product28_pipe_1; // sfix16_En8
  wire signed [15:0] product27; // sfix16_En8
  reg  signed [7:0] delay_pipeline_26_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_26_under_pipe_1; // sfix8
  reg  signed [7:0] coeff27_pipe; // sfix8_En8
  reg  signed [7:0] coeff27_pipe_1; // sfix8_En8
  reg  signed [15:0] product27_pipe; // sfix16_En8
  reg  signed [15:0] product27_pipe_1; // sfix16_En8
  wire signed [15:0] product26; // sfix16_En8
  reg  signed [7:0] delay_pipeline_25_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_25_under_pipe_1; // sfix8
  reg  signed [7:0] coeff26_pipe; // sfix8_En8
  reg  signed [7:0] coeff26_pipe_1; // sfix8_En8
  reg  signed [15:0] product26_pipe; // sfix16_En8
  reg  signed [15:0] product26_pipe_1; // sfix16_En8
  wire signed [15:0] product25; // sfix16_En8
  reg  signed [7:0] delay_pipeline_24_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_24_under_pipe_1; // sfix8
  reg  signed [7:0] coeff25_pipe; // sfix8_En8
  reg  signed [7:0] coeff25_pipe_1; // sfix8_En8
  reg  signed [15:0] product25_pipe; // sfix16_En8
  reg  signed [15:0] product25_pipe_1; // sfix16_En8
  wire signed [15:0] product24; // sfix16_En8
  reg  signed [7:0] delay_pipeline_23_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_23_under_pipe_1; // sfix8
  reg  signed [7:0] coeff24_pipe; // sfix8_En8
  reg  signed [7:0] coeff24_pipe_1; // sfix8_En8
  reg  signed [15:0] product24_pipe; // sfix16_En8
  reg  signed [15:0] product24_pipe_1; // sfix16_En8
  wire signed [15:0] product23; // sfix16_En8
  wire signed [7:0] delay_pipeline_22_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe_24 [0:1] ; // sfix8
  wire signed [15:0] product23_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_25 [0:1] ; // sfix16_En8
  wire signed [15:0] product22; // sfix16_En8
  reg  signed [7:0] delay_pipeline_21_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_21_under_pipe_1; // sfix8
  reg  signed [7:0] coeff22_pipe; // sfix8_En8
  reg  signed [7:0] coeff22_pipe_1; // sfix8_En8
  reg  signed [15:0] product22_pipe; // sfix16_En8
  reg  signed [15:0] product22_pipe_1; // sfix16_En8
  wire signed [15:0] product21; // sfix16_En8
  reg  signed [7:0] delay_pipeline_20_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_20_under_pipe_1; // sfix8
  reg  signed [7:0] coeff21_pipe; // sfix8_En8
  reg  signed [7:0] coeff21_pipe_1; // sfix8_En8
  reg  signed [15:0] product21_pipe; // sfix16_En8
  reg  signed [15:0] product21_pipe_1; // sfix16_En8
  wire signed [15:0] product20; // sfix16_En8
  wire signed [7:0] delay_pipeline_19_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe_26 [0:1] ; // sfix8
  wire signed [15:0] product20_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_27 [0:1] ; // sfix16_En8
  wire signed [15:0] product19; // sfix16_En8
  reg  signed [7:0] delay_pipeline_18_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_18_under_pipe_1; // sfix8
  reg  signed [7:0] coeff19_pipe; // sfix8_En8
  reg  signed [7:0] coeff19_pipe_1; // sfix8_En8
  reg  signed [15:0] product19_pipe; // sfix16_En8
  reg  signed [15:0] product19_pipe_1; // sfix16_En8
  wire signed [15:0] product18; // sfix16_En8
  reg  signed [7:0] delay_pipeline_17_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_17_under_pipe_1; // sfix8
  reg  signed [7:0] coeff18_pipe; // sfix8_En8
  reg  signed [7:0] coeff18_pipe_1; // sfix8_En8
  reg  signed [15:0] product18_pipe; // sfix16_En8
  reg  signed [15:0] product18_pipe_1; // sfix16_En8
  wire signed [15:0] product17; // sfix16_En8
  reg  signed [7:0] delay_pipeline_16_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_16_under_pipe_1; // sfix8
  reg  signed [7:0] coeff17_pipe; // sfix8_En8
  reg  signed [7:0] coeff17_pipe_1; // sfix8_En8
  reg  signed [15:0] product17_pipe; // sfix16_En8
  reg  signed [15:0] product17_pipe_1; // sfix16_En8
  wire signed [15:0] product16; // sfix16_En8
  wire signed [7:0] delay_pipeline_15_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe_28 [0:1] ; // sfix8
  wire signed [15:0] product16_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_29 [0:1] ; // sfix16_En8
  wire signed [8:0] mulpwr2_temp_8; // sfix9
  wire signed [15:0] product15; // sfix16_En8
  wire signed [7:0] delay_pipeline_14_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe_30 [0:1] ; // sfix8
  wire signed [15:0] product15_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_31 [0:1] ; // sfix16_En8
  wire signed [8:0] mulpwr2_temp_9; // sfix9
  wire signed [15:0] product14; // sfix16_En8
  reg  signed [7:0] delay_pipeline_13_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_13_under_pipe_1; // sfix8
  reg  signed [7:0] coeff14_pipe; // sfix8_En8
  reg  signed [7:0] coeff14_pipe_1; // sfix8_En8
  reg  signed [15:0] product14_pipe; // sfix16_En8
  reg  signed [15:0] product14_pipe_1; // sfix16_En8
  wire signed [15:0] product13; // sfix16_En8
  reg  signed [7:0] delay_pipeline_12_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_12_under_pipe_1; // sfix8
  reg  signed [7:0] coeff13_pipe; // sfix8_En8
  reg  signed [7:0] coeff13_pipe_1; // sfix8_En8
  reg  signed [15:0] product13_pipe; // sfix16_En8
  reg  signed [15:0] product13_pipe_1; // sfix16_En8
  wire signed [15:0] product12; // sfix16_En8
  wire signed [7:0] delay_pipeline_11_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe_32 [0:1] ; // sfix8
  wire signed [15:0] product12_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_33 [0:1] ; // sfix16_En8
  wire signed [8:0] mulpwr2_temp_10; // sfix9
  wire signed [15:0] product11; // sfix16_En8
  wire signed [7:0] delay_pipeline_10_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe_34 [0:1] ; // sfix8
  wire signed [15:0] product11_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_35 [0:1] ; // sfix16_En8
  wire signed [8:0] mulpwr2_temp_11; // sfix9
  wire signed [15:0] product10; // sfix16_En8
  wire signed [7:0] delay_pipeline_9_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe_36 [0:1] ; // sfix8
  wire signed [15:0] product10_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_37 [0:1] ; // sfix16_En8
  wire signed [8:0] mulpwr2_temp_12; // sfix9
  wire signed [15:0] product9; // sfix16_En8
  wire signed [7:0] delay_pipeline_8_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe_38 [0:1] ; // sfix8
  wire signed [15:0] product9_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_39 [0:1] ; // sfix16_En8
  wire signed [15:0] product8; // sfix16_En8
  wire signed [7:0] delay_pipeline_7_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe_40 [0:1] ; // sfix8
  wire signed [15:0] product8_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_41 [0:1] ; // sfix16_En8
  wire signed [15:0] product6; // sfix16_En8
  wire signed [7:0] delay_pipeline_5_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe_42 [0:1] ; // sfix8
  wire signed [15:0] product6_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_43 [0:1] ; // sfix16_En8
  wire signed [8:0] mulpwr2_temp_13; // sfix9
  wire signed [15:0] product5; // sfix16_En8
  reg  signed [7:0] delay_pipeline_4_under_pipe; // sfix8
  reg  signed [7:0] delay_pipeline_4_under_pipe_1; // sfix8
  reg  signed [7:0] coeff5_pipe; // sfix8_En8
  reg  signed [7:0] coeff5_pipe_1; // sfix8_En8
  reg  signed [15:0] product5_pipe; // sfix16_En8
  reg  signed [15:0] product5_pipe_1; // sfix16_En8
  wire signed [15:0] product4; // sfix16_En8
  wire signed [7:0] delay_pipeline_3_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe_44 [0:1] ; // sfix8
  wire signed [15:0] product4_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_45 [0:1] ; // sfix16_En8
  wire signed [8:0] mulpwr2_temp_14; // sfix9
  wire signed [15:0] product3; // sfix16_En8
  wire signed [7:0] delay_pipeline_2_pipe; // sfix8
  reg  signed [7:0] int_delay_pipe_46 [0:1] ; // sfix8
  wire signed [15:0] product3_pipe; // sfix16_En8
  reg  signed [15:0] int_delay_pipe_47 [0:1] ; // sfix16_En8
  wire signed [8:0] mulpwr2_temp_15; // sfix9
  wire signed [21:0] sum_final; // sfix22_En8
  wire signed [21:0] sum1_1; // sfix22_En8
  wire signed [15:0] add_signext; // sfix16_En8
  wire signed [15:0] add_signext_1; // sfix16_En8
  wire signed [16:0] add_temp; // sfix17_En8
  reg  signed [21:0] sumpipe1_1; // sfix22_En8
  wire signed [21:0] sum1_2; // sfix22_En8
  wire signed [15:0] add_signext_2; // sfix16_En8
  wire signed [15:0] add_signext_3; // sfix16_En8
  wire signed [16:0] add_temp_1; // sfix17_En8
  reg  signed [21:0] sumpipe1_2; // sfix22_En8
  wire signed [21:0] sum1_3; // sfix22_En8
  wire signed [15:0] add_signext_4; // sfix16_En8
  wire signed [15:0] add_signext_5; // sfix16_En8
  wire signed [16:0] add_temp_2; // sfix17_En8
  reg  signed [21:0] sumpipe1_3; // sfix22_En8
  wire signed [21:0] sum1_4; // sfix22_En8
  wire signed [15:0] add_signext_6; // sfix16_En8
  wire signed [15:0] add_signext_7; // sfix16_En8
  wire signed [16:0] add_temp_3; // sfix17_En8
  reg  signed [21:0] sumpipe1_4; // sfix22_En8
  wire signed [21:0] sum1_5; // sfix22_En8
  wire signed [15:0] add_signext_8; // sfix16_En8
  wire signed [15:0] add_signext_9; // sfix16_En8
  wire signed [16:0] add_temp_4; // sfix17_En8
  reg  signed [21:0] sumpipe1_5; // sfix22_En8
  wire signed [21:0] sum1_6; // sfix22_En8
  wire signed [15:0] add_signext_10; // sfix16_En8
  wire signed [15:0] add_signext_11; // sfix16_En8
  wire signed [16:0] add_temp_5; // sfix17_En8
  reg  signed [21:0] sumpipe1_6; // sfix22_En8
  wire signed [21:0] sum1_7; // sfix22_En8
  wire signed [15:0] add_signext_12; // sfix16_En8
  wire signed [15:0] add_signext_13; // sfix16_En8
  wire signed [16:0] add_temp_6; // sfix17_En8
  reg  signed [21:0] sumpipe1_7; // sfix22_En8
  wire signed [21:0] sum1_8; // sfix22_En8
  wire signed [15:0] add_signext_14; // sfix16_En8
  wire signed [15:0] add_signext_15; // sfix16_En8
  wire signed [16:0] add_temp_7; // sfix17_En8
  reg  signed [21:0] sumpipe1_8; // sfix22_En8
  wire signed [21:0] sum1_9; // sfix22_En8
  wire signed [15:0] add_signext_16; // sfix16_En8
  wire signed [15:0] add_signext_17; // sfix16_En8
  wire signed [16:0] add_temp_8; // sfix17_En8
  reg  signed [21:0] sumpipe1_9; // sfix22_En8
  wire signed [21:0] sum1_10; // sfix22_En8
  wire signed [15:0] add_signext_18; // sfix16_En8
  wire signed [15:0] add_signext_19; // sfix16_En8
  wire signed [16:0] add_temp_9; // sfix17_En8
  reg  signed [21:0] sumpipe1_10; // sfix22_En8
  wire signed [21:0] sum1_11; // sfix22_En8
  wire signed [15:0] add_signext_20; // sfix16_En8
  wire signed [15:0] add_signext_21; // sfix16_En8
  wire signed [16:0] add_temp_10; // sfix17_En8
  reg  signed [21:0] sumpipe1_11; // sfix22_En8
  wire signed [21:0] sum1_12; // sfix22_En8
  wire signed [15:0] add_signext_22; // sfix16_En8
  wire signed [15:0] add_signext_23; // sfix16_En8
  wire signed [16:0] add_temp_11; // sfix17_En8
  reg  signed [21:0] sumpipe1_12; // sfix22_En8
  wire signed [21:0] sum1_13; // sfix22_En8
  wire signed [15:0] add_signext_24; // sfix16_En8
  wire signed [15:0] add_signext_25; // sfix16_En8
  wire signed [16:0] add_temp_12; // sfix17_En8
  reg  signed [21:0] sumpipe1_13; // sfix22_En8
  wire signed [21:0] sum1_14; // sfix22_En8
  wire signed [15:0] add_signext_26; // sfix16_En8
  wire signed [15:0] add_signext_27; // sfix16_En8
  wire signed [16:0] add_temp_13; // sfix17_En8
  reg  signed [21:0] sumpipe1_14; // sfix22_En8
  wire signed [21:0] sum1_15; // sfix22_En8
  wire signed [15:0] add_signext_28; // sfix16_En8
  wire signed [15:0] add_signext_29; // sfix16_En8
  wire signed [16:0] add_temp_14; // sfix17_En8
  reg  signed [21:0] sumpipe1_15; // sfix22_En8
  wire signed [21:0] sum1_16; // sfix22_En8
  wire signed [15:0] add_signext_30; // sfix16_En8
  wire signed [15:0] add_signext_31; // sfix16_En8
  wire signed [16:0] add_temp_15; // sfix17_En8
  reg  signed [21:0] sumpipe1_16; // sfix22_En8
  wire signed [21:0] sum1_17; // sfix22_En8
  wire signed [15:0] add_signext_32; // sfix16_En8
  wire signed [15:0] add_signext_33; // sfix16_En8
  wire signed [16:0] add_temp_16; // sfix17_En8
  reg  signed [21:0] sumpipe1_17; // sfix22_En8
  wire signed [21:0] sum1_18; // sfix22_En8
  wire signed [15:0] add_signext_34; // sfix16_En8
  wire signed [15:0] add_signext_35; // sfix16_En8
  wire signed [16:0] add_temp_17; // sfix17_En8
  reg  signed [21:0] sumpipe1_18; // sfix22_En8
  wire signed [21:0] sum1_19; // sfix22_En8
  wire signed [15:0] add_signext_36; // sfix16_En8
  wire signed [15:0] add_signext_37; // sfix16_En8
  wire signed [16:0] add_temp_18; // sfix17_En8
  reg  signed [21:0] sumpipe1_19; // sfix22_En8
  wire signed [21:0] sum1_20; // sfix22_En8
  wire signed [15:0] add_signext_38; // sfix16_En8
  wire signed [15:0] add_signext_39; // sfix16_En8
  wire signed [16:0] add_temp_19; // sfix17_En8
  reg  signed [21:0] sumpipe1_20; // sfix22_En8
  wire signed [21:0] sum1_21; // sfix22_En8
  wire signed [15:0] add_signext_40; // sfix16_En8
  wire signed [15:0] add_signext_41; // sfix16_En8
  wire signed [16:0] add_temp_20; // sfix17_En8
  reg  signed [21:0] sumpipe1_21; // sfix22_En8
  wire signed [21:0] sum1_22; // sfix22_En8
  wire signed [15:0] add_signext_42; // sfix16_En8
  wire signed [15:0] add_signext_43; // sfix16_En8
  wire signed [16:0] add_temp_21; // sfix17_En8
  reg  signed [21:0] sumpipe1_22; // sfix22_En8
  wire signed [21:0] sum1_23; // sfix22_En8
  wire signed [15:0] add_signext_44; // sfix16_En8
  wire signed [15:0] add_signext_45; // sfix16_En8
  wire signed [16:0] add_temp_22; // sfix17_En8
  reg  signed [21:0] sumpipe1_23; // sfix22_En8
  wire signed [21:0] sum1_24; // sfix22_En8
  wire signed [15:0] add_signext_46; // sfix16_En8
  wire signed [15:0] add_signext_47; // sfix16_En8
  wire signed [16:0] add_temp_23; // sfix17_En8
  reg  signed [21:0] sumpipe1_24; // sfix22_En8
  wire signed [21:0] sum1_25; // sfix22_En8
  wire signed [15:0] add_signext_48; // sfix16_En8
  wire signed [15:0] add_signext_49; // sfix16_En8
  wire signed [16:0] add_temp_24; // sfix17_En8
  reg  signed [21:0] sumpipe1_25; // sfix22_En8
  wire signed [21:0] sum1_26; // sfix22_En8
  wire signed [15:0] add_signext_50; // sfix16_En8
  wire signed [15:0] add_signext_51; // sfix16_En8
  wire signed [16:0] add_temp_25; // sfix17_En8
  reg  signed [21:0] sumpipe1_26; // sfix22_En8
  wire signed [21:0] sum1_27; // sfix22_En8
  wire signed [15:0] add_signext_52; // sfix16_En8
  wire signed [15:0] add_signext_53; // sfix16_En8
  wire signed [16:0] add_temp_26; // sfix17_En8
  reg  signed [21:0] sumpipe1_27; // sfix22_En8
  reg  signed [15:0] sumpipe1_28; // sfix16_En8
  wire signed [21:0] sum2_1; // sfix22_En8
  wire signed [21:0] add_signext_54; // sfix22_En8
  wire signed [21:0] add_signext_55; // sfix22_En8
  wire signed [22:0] add_temp_27; // sfix23_En8
  reg  signed [21:0] sumpipe2_1; // sfix22_En8
  wire signed [21:0] sum2_2; // sfix22_En8
  wire signed [21:0] add_signext_56; // sfix22_En8
  wire signed [21:0] add_signext_57; // sfix22_En8
  wire signed [22:0] add_temp_28; // sfix23_En8
  reg  signed [21:0] sumpipe2_2; // sfix22_En8
  wire signed [21:0] sum2_3; // sfix22_En8
  wire signed [21:0] add_signext_58; // sfix22_En8
  wire signed [21:0] add_signext_59; // sfix22_En8
  wire signed [22:0] add_temp_29; // sfix23_En8
  reg  signed [21:0] sumpipe2_3; // sfix22_En8
  wire signed [21:0] sum2_4; // sfix22_En8
  wire signed [21:0] add_signext_60; // sfix22_En8
  wire signed [21:0] add_signext_61; // sfix22_En8
  wire signed [22:0] add_temp_30; // sfix23_En8
  reg  signed [21:0] sumpipe2_4; // sfix22_En8
  wire signed [21:0] sum2_5; // sfix22_En8
  wire signed [21:0] add_signext_62; // sfix22_En8
  wire signed [21:0] add_signext_63; // sfix22_En8
  wire signed [22:0] add_temp_31; // sfix23_En8
  reg  signed [21:0] sumpipe2_5; // sfix22_En8
  wire signed [21:0] sum2_6; // sfix22_En8
  wire signed [21:0] add_signext_64; // sfix22_En8
  wire signed [21:0] add_signext_65; // sfix22_En8
  wire signed [22:0] add_temp_32; // sfix23_En8
  reg  signed [21:0] sumpipe2_6; // sfix22_En8
  wire signed [21:0] sum2_7; // sfix22_En8
  wire signed [21:0] add_signext_66; // sfix22_En8
  wire signed [21:0] add_signext_67; // sfix22_En8
  wire signed [22:0] add_temp_33; // sfix23_En8
  reg  signed [21:0] sumpipe2_7; // sfix22_En8
  wire signed [21:0] sum2_8; // sfix22_En8
  wire signed [21:0] add_signext_68; // sfix22_En8
  wire signed [21:0] add_signext_69; // sfix22_En8
  wire signed [22:0] add_temp_34; // sfix23_En8
  reg  signed [21:0] sumpipe2_8; // sfix22_En8
  wire signed [21:0] sum2_9; // sfix22_En8
  wire signed [21:0] add_signext_70; // sfix22_En8
  wire signed [21:0] add_signext_71; // sfix22_En8
  wire signed [22:0] add_temp_35; // sfix23_En8
  reg  signed [21:0] sumpipe2_9; // sfix22_En8
  wire signed [21:0] sum2_10; // sfix22_En8
  wire signed [21:0] add_signext_72; // sfix22_En8
  wire signed [21:0] add_signext_73; // sfix22_En8
  wire signed [22:0] add_temp_36; // sfix23_En8
  reg  signed [21:0] sumpipe2_10; // sfix22_En8
  wire signed [21:0] sum2_11; // sfix22_En8
  wire signed [21:0] add_signext_74; // sfix22_En8
  wire signed [21:0] add_signext_75; // sfix22_En8
  wire signed [22:0] add_temp_37; // sfix23_En8
  reg  signed [21:0] sumpipe2_11; // sfix22_En8
  wire signed [21:0] sum2_12; // sfix22_En8
  wire signed [21:0] add_signext_76; // sfix22_En8
  wire signed [21:0] add_signext_77; // sfix22_En8
  wire signed [22:0] add_temp_38; // sfix23_En8
  reg  signed [21:0] sumpipe2_12; // sfix22_En8
  wire signed [21:0] sum2_13; // sfix22_En8
  wire signed [21:0] add_signext_78; // sfix22_En8
  wire signed [21:0] add_signext_79; // sfix22_En8
  wire signed [22:0] add_temp_39; // sfix23_En8
  reg  signed [21:0] sumpipe2_13; // sfix22_En8
  wire signed [21:0] sum2_14; // sfix22_En8
  wire signed [21:0] add_signext_80; // sfix22_En8
  wire signed [21:0] add_signext_81; // sfix22_En8
  wire signed [22:0] add_temp_40; // sfix23_En8
  reg  signed [21:0] sumpipe2_14; // sfix22_En8
  wire signed [21:0] sum3_1; // sfix22_En8
  wire signed [21:0] add_signext_82; // sfix22_En8
  wire signed [21:0] add_signext_83; // sfix22_En8
  wire signed [22:0] add_temp_41; // sfix23_En8
  reg  signed [21:0] sumpipe3_1; // sfix22_En8
  wire signed [21:0] sum3_2; // sfix22_En8
  wire signed [21:0] add_signext_84; // sfix22_En8
  wire signed [21:0] add_signext_85; // sfix22_En8
  wire signed [22:0] add_temp_42; // sfix23_En8
  reg  signed [21:0] sumpipe3_2; // sfix22_En8
  wire signed [21:0] sum3_3; // sfix22_En8
  wire signed [21:0] add_signext_86; // sfix22_En8
  wire signed [21:0] add_signext_87; // sfix22_En8
  wire signed [22:0] add_temp_43; // sfix23_En8
  reg  signed [21:0] sumpipe3_3; // sfix22_En8
  wire signed [21:0] sum3_4; // sfix22_En8
  wire signed [21:0] add_signext_88; // sfix22_En8
  wire signed [21:0] add_signext_89; // sfix22_En8
  wire signed [22:0] add_temp_44; // sfix23_En8
  reg  signed [21:0] sumpipe3_4; // sfix22_En8
  wire signed [21:0] sum3_5; // sfix22_En8
  wire signed [21:0] add_signext_90; // sfix22_En8
  wire signed [21:0] add_signext_91; // sfix22_En8
  wire signed [22:0] add_temp_45; // sfix23_En8
  reg  signed [21:0] sumpipe3_5; // sfix22_En8
  wire signed [21:0] sum3_6; // sfix22_En8
  wire signed [21:0] add_signext_92; // sfix22_En8
  wire signed [21:0] add_signext_93; // sfix22_En8
  wire signed [22:0] add_temp_46; // sfix23_En8
  reg  signed [21:0] sumpipe3_6; // sfix22_En8
  wire signed [21:0] sum3_7; // sfix22_En8
  wire signed [21:0] add_signext_94; // sfix22_En8
  wire signed [21:0] add_signext_95; // sfix22_En8
  wire signed [22:0] add_temp_47; // sfix23_En8
  reg  signed [21:0] sumpipe3_7; // sfix22_En8
  wire signed [21:0] sum4_1; // sfix22_En8
  wire signed [21:0] add_signext_96; // sfix22_En8
  wire signed [21:0] add_signext_97; // sfix22_En8
  wire signed [22:0] add_temp_48; // sfix23_En8
  reg  signed [21:0] sumpipe4_1; // sfix22_En8
  wire signed [21:0] sum4_2; // sfix22_En8
  wire signed [21:0] add_signext_98; // sfix22_En8
  wire signed [21:0] add_signext_99; // sfix22_En8
  wire signed [22:0] add_temp_49; // sfix23_En8
  reg  signed [21:0] sumpipe4_2; // sfix22_En8
  wire signed [21:0] sum4_3; // sfix22_En8
  wire signed [21:0] add_signext_100; // sfix22_En8
  wire signed [21:0] add_signext_101; // sfix22_En8
  wire signed [22:0] add_temp_50; // sfix23_En8
  reg  signed [21:0] sumpipe4_3; // sfix22_En8
  reg  signed [21:0] sumpipe4_4; // sfix22_En8
  wire signed [21:0] sum5_1; // sfix22_En8
  wire signed [21:0] add_signext_102; // sfix22_En8
  wire signed [21:0] add_signext_103; // sfix22_En8
  wire signed [22:0] add_temp_51; // sfix23_En8
  reg  signed [21:0] sumpipe5_1; // sfix22_En8
  wire signed [21:0] sum5_2; // sfix22_En8
  wire signed [21:0] add_signext_104; // sfix22_En8
  wire signed [21:0] add_signext_105; // sfix22_En8
  wire signed [22:0] add_temp_52; // sfix23_En8
  reg  signed [21:0] sumpipe5_2; // sfix22_En8
  wire signed [21:0] sum6_1; // sfix22_En8
  wire signed [21:0] add_signext_106; // sfix22_En8
  wire signed [21:0] add_signext_107; // sfix22_En8
  wire signed [22:0] add_temp_53; // sfix23_En8
  reg  signed [21:0] sumpipe6_1; // sfix22_En8
  reg  signed [21:0] output_register; // sfix22_En8

  // Block Statements
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
        delay_pipeline[18] <= 0;
        delay_pipeline[19] <= 0;
        delay_pipeline[20] <= 0;
        delay_pipeline[21] <= 0;
        delay_pipeline[22] <= 0;
        delay_pipeline[23] <= 0;
        delay_pipeline[24] <= 0;
        delay_pipeline[25] <= 0;
        delay_pipeline[26] <= 0;
        delay_pipeline[27] <= 0;
        delay_pipeline[28] <= 0;
        delay_pipeline[29] <= 0;
        delay_pipeline[30] <= 0;
        delay_pipeline[31] <= 0;
        delay_pipeline[32] <= 0;
        delay_pipeline[33] <= 0;
        delay_pipeline[34] <= 0;
        delay_pipeline[35] <= 0;
        delay_pipeline[36] <= 0;
        delay_pipeline[37] <= 0;
        delay_pipeline[38] <= 0;
        delay_pipeline[39] <= 0;
        delay_pipeline[40] <= 0;
        delay_pipeline[41] <= 0;
        delay_pipeline[42] <= 0;
        delay_pipeline[43] <= 0;
        delay_pipeline[44] <= 0;
        delay_pipeline[45] <= 0;
        delay_pipeline[46] <= 0;
        delay_pipeline[47] <= 0;
        delay_pipeline[48] <= 0;
        delay_pipeline[49] <= 0;
        delay_pipeline[50] <= 0;
        delay_pipeline[51] <= 0;
        delay_pipeline[52] <= 0;
        delay_pipeline[53] <= 0;
        delay_pipeline[54] <= 0;
        delay_pipeline[55] <= 0;
        delay_pipeline[56] <= 0;
        delay_pipeline[57] <= 0;
        delay_pipeline[58] <= 0;
        delay_pipeline[59] <= 0;
        delay_pipeline[60] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
          delay_pipeline[31] <= delay_pipeline[30];
          delay_pipeline[32] <= delay_pipeline[31];
          delay_pipeline[33] <= delay_pipeline[32];
          delay_pipeline[34] <= delay_pipeline[33];
          delay_pipeline[35] <= delay_pipeline[34];
          delay_pipeline[36] <= delay_pipeline[35];
          delay_pipeline[37] <= delay_pipeline[36];
          delay_pipeline[38] <= delay_pipeline[37];
          delay_pipeline[39] <= delay_pipeline[38];
          delay_pipeline[40] <= delay_pipeline[39];
          delay_pipeline[41] <= delay_pipeline[40];
          delay_pipeline[42] <= delay_pipeline[41];
          delay_pipeline[43] <= delay_pipeline[42];
          delay_pipeline[44] <= delay_pipeline[43];
          delay_pipeline[45] <= delay_pipeline[44];
          delay_pipeline[46] <= delay_pipeline[45];
          delay_pipeline[47] <= delay_pipeline[46];
          delay_pipeline[48] <= delay_pipeline[47];
          delay_pipeline[49] <= delay_pipeline[48];
          delay_pipeline[50] <= delay_pipeline[49];
          delay_pipeline[51] <= delay_pipeline[50];
          delay_pipeline[52] <= delay_pipeline[51];
          delay_pipeline[53] <= delay_pipeline[52];
          delay_pipeline[54] <= delay_pipeline[53];
          delay_pipeline[55] <= delay_pipeline[54];
          delay_pipeline[56] <= delay_pipeline[55];
          delay_pipeline[57] <= delay_pipeline[56];
          delay_pipeline[58] <= delay_pipeline[57];
          delay_pipeline[59] <= delay_pipeline[58];
          delay_pipeline[60] <= delay_pipeline[59];
        end
      end
    end // Delay_Pipeline_process


  always @ (posedge clk or posedge reset)
    begin: temp_process1
      if (reset == 1'b1) begin
        int_delay_pipe[0] <= 8'b00000000;
        int_delay_pipe[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe[1] <= int_delay_pipe[0];
          int_delay_pipe[0] <= delay_pipeline[58];
        end
      end
    end // temp_process1
  assign delay_pipeline_58_pipe = int_delay_pipe[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process2
      if (reset == 1'b1) begin
        int_delay_pipe_1[0] <= 16'b0000000000000000;
        int_delay_pipe_1[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_1[1] <= int_delay_pipe_1[0];
          int_delay_pipe_1[0] <= product59_pipe;
        end
      end
    end // temp_process2
  assign product59 = int_delay_pipe_1[1];

  assign mulpwr2_temp = (delay_pipeline_58_pipe==8'b10000000) ? $signed({1'b0, delay_pipeline_58_pipe}) : -delay_pipeline_58_pipe;

  assign product59_pipe = $signed({{7{mulpwr2_temp[8]}}, mulpwr2_temp});

  always @ (posedge clk or posedge reset)
    begin: temp_process3
      if (reset == 1'b1) begin
        int_delay_pipe_2[0] <= 8'b00000000;
        int_delay_pipe_2[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_2[1] <= int_delay_pipe_2[0];
          int_delay_pipe_2[0] <= delay_pipeline[57];
        end
      end
    end // temp_process3
  assign delay_pipeline_57_pipe = int_delay_pipe_2[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process4
      if (reset == 1'b1) begin
        int_delay_pipe_3[0] <= 16'b0000000000000000;
        int_delay_pipe_3[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_3[1] <= int_delay_pipe_3[0];
          int_delay_pipe_3[0] <= product58_pipe;
        end
      end
    end // temp_process4
  assign product58 = int_delay_pipe_3[1];

  assign mulpwr2_temp_1 = (delay_pipeline_57_pipe==8'b10000000) ? $signed({1'b0, delay_pipeline_57_pipe}) : -delay_pipeline_57_pipe;

  assign product58_pipe = $signed({mulpwr2_temp_1[8:0], 1'b0});

  always @ (posedge clk or posedge reset)
    begin: temp_process5
      if (reset == 1'b1) begin
        delay_pipeline_56_under_pipe <= 0;
        delay_pipeline_56_under_pipe_1 <= 0;
        coeff57_pipe <= 0;
        coeff57_pipe_1 <= 0;
        product57_pipe <= 0;
        product57_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_56_under_pipe <= delay_pipeline[56];
          delay_pipeline_56_under_pipe_1 <= delay_pipeline_56_under_pipe;
          coeff57_pipe <= coeff57;
          coeff57_pipe_1 <= coeff57_pipe;

          product57_pipe <= delay_pipeline_56_under_pipe_1 * coeff57_pipe_1;

          product57_pipe_1 <= product57_pipe;
        end
      end
    end // temp_process5

  assign product57 = product57_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process6
      if (reset == 1'b1) begin
        int_delay_pipe_4[0] <= 8'b00000000;
        int_delay_pipe_4[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_4[1] <= int_delay_pipe_4[0];
          int_delay_pipe_4[0] <= delay_pipeline[55];
        end
      end
    end // temp_process6
  assign delay_pipeline_55_pipe = int_delay_pipe_4[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process7
      if (reset == 1'b1) begin
        int_delay_pipe_5[0] <= 16'b0000000000000000;
        int_delay_pipe_5[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_5[1] <= int_delay_pipe_5[0];
          int_delay_pipe_5[0] <= product56_pipe;
        end
      end
    end // temp_process7
  assign product56 = int_delay_pipe_5[1];

  assign mulpwr2_temp_2 = (delay_pipeline_55_pipe==8'b10000000) ? $signed({1'b0, delay_pipeline_55_pipe}) : -delay_pipeline_55_pipe;

  assign product56_pipe = $signed({mulpwr2_temp_2[8:0], 1'b0});

  always @ (posedge clk or posedge reset)
    begin: temp_process8
      if (reset == 1'b1) begin
        int_delay_pipe_6[0] <= 8'b00000000;
        int_delay_pipe_6[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_6[1] <= int_delay_pipe_6[0];
          int_delay_pipe_6[0] <= delay_pipeline[53];
        end
      end
    end // temp_process8
  assign delay_pipeline_53_pipe = int_delay_pipe_6[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process9
      if (reset == 1'b1) begin
        int_delay_pipe_7[0] <= 16'b0000000000000000;
        int_delay_pipe_7[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_7[1] <= int_delay_pipe_7[0];
          int_delay_pipe_7[0] <= product54_pipe;
        end
      end
    end // temp_process9
  assign product54 = int_delay_pipe_7[1];

  assign product54_pipe = $signed({delay_pipeline_53_pipe[7:0], 1'b0});

  always @ (posedge clk or posedge reset)
    begin: temp_process10
      if (reset == 1'b1) begin
        int_delay_pipe_8[0] <= 8'b00000000;
        int_delay_pipe_8[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_8[1] <= int_delay_pipe_8[0];
          int_delay_pipe_8[0] <= delay_pipeline[52];
        end
      end
    end // temp_process10
  assign delay_pipeline_52_pipe = int_delay_pipe_8[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process11
      if (reset == 1'b1) begin
        int_delay_pipe_9[0] <= 16'b0000000000000000;
        int_delay_pipe_9[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_9[1] <= int_delay_pipe_9[0];
          int_delay_pipe_9[0] <= product53_pipe;
        end
      end
    end // temp_process11
  assign product53 = int_delay_pipe_9[1];

  assign product53_pipe = $signed({{8{delay_pipeline_52_pipe[7]}}, delay_pipeline_52_pipe});

  always @ (posedge clk or posedge reset)
    begin: temp_process12
      if (reset == 1'b1) begin
        int_delay_pipe_10[0] <= 8'b00000000;
        int_delay_pipe_10[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_10[1] <= int_delay_pipe_10[0];
          int_delay_pipe_10[0] <= delay_pipeline[51];
        end
      end
    end // temp_process12
  assign delay_pipeline_51_pipe = int_delay_pipe_10[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process13
      if (reset == 1'b1) begin
        int_delay_pipe_11[0] <= 16'b0000000000000000;
        int_delay_pipe_11[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_11[1] <= int_delay_pipe_11[0];
          int_delay_pipe_11[0] <= product52_pipe;
        end
      end
    end // temp_process13
  assign product52 = int_delay_pipe_11[1];

  assign mulpwr2_temp_3 = (delay_pipeline_51_pipe==8'b10000000) ? $signed({1'b0, delay_pipeline_51_pipe}) : -delay_pipeline_51_pipe;

  assign product52_pipe = $signed({{7{mulpwr2_temp_3[8]}}, mulpwr2_temp_3});

  always @ (posedge clk or posedge reset)
    begin: temp_process14
      if (reset == 1'b1) begin
        int_delay_pipe_12[0] <= 8'b00000000;
        int_delay_pipe_12[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_12[1] <= int_delay_pipe_12[0];
          int_delay_pipe_12[0] <= delay_pipeline[50];
        end
      end
    end // temp_process14
  assign delay_pipeline_50_pipe = int_delay_pipe_12[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process15
      if (reset == 1'b1) begin
        int_delay_pipe_13[0] <= 16'b0000000000000000;
        int_delay_pipe_13[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_13[1] <= int_delay_pipe_13[0];
          int_delay_pipe_13[0] <= product51_pipe;
        end
      end
    end // temp_process15
  assign product51 = int_delay_pipe_13[1];

  assign mulpwr2_temp_4 = (delay_pipeline_50_pipe==8'b10000000) ? $signed({1'b0, delay_pipeline_50_pipe}) : -delay_pipeline_50_pipe;

  assign product51_pipe = $signed({mulpwr2_temp_4[8:0], 1'b0});

  always @ (posedge clk or posedge reset)
    begin: temp_process16
      if (reset == 1'b1) begin
        int_delay_pipe_14[0] <= 8'b00000000;
        int_delay_pipe_14[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_14[1] <= int_delay_pipe_14[0];
          int_delay_pipe_14[0] <= delay_pipeline[49];
        end
      end
    end // temp_process16
  assign delay_pipeline_49_pipe = int_delay_pipe_14[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process17
      if (reset == 1'b1) begin
        int_delay_pipe_15[0] <= 16'b0000000000000000;
        int_delay_pipe_15[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_15[1] <= int_delay_pipe_15[0];
          int_delay_pipe_15[0] <= product50_pipe;
        end
      end
    end // temp_process17
  assign product50 = int_delay_pipe_15[1];

  assign mulpwr2_temp_5 = (delay_pipeline_49_pipe==8'b10000000) ? $signed({1'b0, delay_pipeline_49_pipe}) : -delay_pipeline_49_pipe;

  assign product50_pipe = $signed({{7{mulpwr2_temp_5[8]}}, mulpwr2_temp_5});

  always @ (posedge clk or posedge reset)
    begin: temp_process18
      if (reset == 1'b1) begin
        delay_pipeline_48_under_pipe <= 0;
        delay_pipeline_48_under_pipe_1 <= 0;
        coeff49_pipe <= 0;
        coeff49_pipe_1 <= 0;
        product49_pipe <= 0;
        product49_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_48_under_pipe <= delay_pipeline[48];
          delay_pipeline_48_under_pipe_1 <= delay_pipeline_48_under_pipe;
          coeff49_pipe <= coeff49;
          coeff49_pipe_1 <= coeff49_pipe;

          product49_pipe <= delay_pipeline_48_under_pipe_1 * coeff49_pipe_1;

          product49_pipe_1 <= product49_pipe;
        end
      end
    end // temp_process18

  assign product49 = product49_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process19
      if (reset == 1'b1) begin
        delay_pipeline_47_under_pipe <= 0;
        delay_pipeline_47_under_pipe_1 <= 0;
        coeff48_pipe <= 0;
        coeff48_pipe_1 <= 0;
        product48_pipe <= 0;
        product48_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_47_under_pipe <= delay_pipeline[47];
          delay_pipeline_47_under_pipe_1 <= delay_pipeline_47_under_pipe;
          coeff48_pipe <= coeff48;
          coeff48_pipe_1 <= coeff48_pipe;

          product48_pipe <= delay_pipeline_47_under_pipe_1 * coeff48_pipe_1;

          product48_pipe_1 <= product48_pipe;
        end
      end
    end // temp_process19

  assign product48 = product48_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process20
      if (reset == 1'b1) begin
        int_delay_pipe_16[0] <= 8'b00000000;
        int_delay_pipe_16[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_16[1] <= int_delay_pipe_16[0];
          int_delay_pipe_16[0] <= delay_pipeline[46];
        end
      end
    end // temp_process20
  assign delay_pipeline_46_pipe = int_delay_pipe_16[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process21
      if (reset == 1'b1) begin
        int_delay_pipe_17[0] <= 16'b0000000000000000;
        int_delay_pipe_17[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_17[1] <= int_delay_pipe_17[0];
          int_delay_pipe_17[0] <= product47_pipe;
        end
      end
    end // temp_process21
  assign product47 = int_delay_pipe_17[1];

  assign mulpwr2_temp_6 = (delay_pipeline_46_pipe==8'b10000000) ? $signed({1'b0, delay_pipeline_46_pipe}) : -delay_pipeline_46_pipe;

  assign product47_pipe = $signed({{7{mulpwr2_temp_6[8]}}, mulpwr2_temp_6});

  always @ (posedge clk or posedge reset)
    begin: temp_process22
      if (reset == 1'b1) begin
        int_delay_pipe_18[0] <= 8'b00000000;
        int_delay_pipe_18[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_18[1] <= int_delay_pipe_18[0];
          int_delay_pipe_18[0] <= delay_pipeline[45];
        end
      end
    end // temp_process22
  assign delay_pipeline_45_pipe = int_delay_pipe_18[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process23
      if (reset == 1'b1) begin
        int_delay_pipe_19[0] <= 16'b0000000000000000;
        int_delay_pipe_19[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_19[1] <= int_delay_pipe_19[0];
          int_delay_pipe_19[0] <= product46_pipe;
        end
      end
    end // temp_process23
  assign product46 = int_delay_pipe_19[1];

  assign mulpwr2_temp_7 = (delay_pipeline_45_pipe==8'b10000000) ? $signed({1'b0, delay_pipeline_45_pipe}) : -delay_pipeline_45_pipe;

  assign product46_pipe = $signed({mulpwr2_temp_7[8:0], 2'b00});

  always @ (posedge clk or posedge reset)
    begin: temp_process24
      if (reset == 1'b1) begin
        delay_pipeline_44_under_pipe <= 0;
        delay_pipeline_44_under_pipe_1 <= 0;
        coeff45_pipe <= 0;
        coeff45_pipe_1 <= 0;
        product45_pipe <= 0;
        product45_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_44_under_pipe <= delay_pipeline[44];
          delay_pipeline_44_under_pipe_1 <= delay_pipeline_44_under_pipe;
          coeff45_pipe <= coeff45;
          coeff45_pipe_1 <= coeff45_pipe;

          product45_pipe <= delay_pipeline_44_under_pipe_1 * coeff45_pipe_1;

          product45_pipe_1 <= product45_pipe;
        end
      end
    end // temp_process24

  assign product45 = product45_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process25
      if (reset == 1'b1) begin
        delay_pipeline_43_under_pipe <= 0;
        delay_pipeline_43_under_pipe_1 <= 0;
        coeff44_pipe <= 0;
        coeff44_pipe_1 <= 0;
        product44_pipe <= 0;
        product44_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_43_under_pipe <= delay_pipeline[43];
          delay_pipeline_43_under_pipe_1 <= delay_pipeline_43_under_pipe;
          coeff44_pipe <= coeff44;
          coeff44_pipe_1 <= coeff44_pipe;

          product44_pipe <= delay_pipeline_43_under_pipe_1 * coeff44_pipe_1;

          product44_pipe_1 <= product44_pipe;
        end
      end
    end // temp_process25

  assign product44 = product44_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process26
      if (reset == 1'b1) begin
        delay_pipeline_42_under_pipe <= 0;
        delay_pipeline_42_under_pipe_1 <= 0;
        coeff43_pipe <= 0;
        coeff43_pipe_1 <= 0;
        product43_pipe <= 0;
        product43_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_42_under_pipe <= delay_pipeline[42];
          delay_pipeline_42_under_pipe_1 <= delay_pipeline_42_under_pipe;
          coeff43_pipe <= coeff43;
          coeff43_pipe_1 <= coeff43_pipe;

          product43_pipe <= delay_pipeline_42_under_pipe_1 * coeff43_pipe_1;

          product43_pipe_1 <= product43_pipe;
        end
      end
    end // temp_process26

  assign product43 = product43_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process27
      if (reset == 1'b1) begin
        int_delay_pipe_20[0] <= 8'b00000000;
        int_delay_pipe_20[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_20[1] <= int_delay_pipe_20[0];
          int_delay_pipe_20[0] <= delay_pipeline[41];
        end
      end
    end // temp_process27
  assign delay_pipeline_41_pipe = int_delay_pipe_20[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process28
      if (reset == 1'b1) begin
        int_delay_pipe_21[0] <= 16'b0000000000000000;
        int_delay_pipe_21[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_21[1] <= int_delay_pipe_21[0];
          int_delay_pipe_21[0] <= product42_pipe;
        end
      end
    end // temp_process28
  assign product42 = int_delay_pipe_21[1];

  assign product42_pipe = $signed({delay_pipeline_41_pipe[7:0], 1'b0});

  always @ (posedge clk or posedge reset)
    begin: temp_process29
      if (reset == 1'b1) begin
        delay_pipeline_40_under_pipe <= 0;
        delay_pipeline_40_under_pipe_1 <= 0;
        coeff41_pipe <= 0;
        coeff41_pipe_1 <= 0;
        product41_pipe <= 0;
        product41_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_40_under_pipe <= delay_pipeline[40];
          delay_pipeline_40_under_pipe_1 <= delay_pipeline_40_under_pipe;
          coeff41_pipe <= coeff41;
          coeff41_pipe_1 <= coeff41_pipe;

          product41_pipe <= delay_pipeline_40_under_pipe_1 * coeff41_pipe_1;

          product41_pipe_1 <= product41_pipe;
        end
      end
    end // temp_process29

  assign product41 = product41_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process30
      if (reset == 1'b1) begin
        delay_pipeline_39_under_pipe <= 0;
        delay_pipeline_39_under_pipe_1 <= 0;
        coeff40_pipe <= 0;
        coeff40_pipe_1 <= 0;
        product40_pipe <= 0;
        product40_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_39_under_pipe <= delay_pipeline[39];
          delay_pipeline_39_under_pipe_1 <= delay_pipeline_39_under_pipe;
          coeff40_pipe <= coeff40;
          coeff40_pipe_1 <= coeff40_pipe;

          product40_pipe <= delay_pipeline_39_under_pipe_1 * coeff40_pipe_1;

          product40_pipe_1 <= product40_pipe;
        end
      end
    end // temp_process30

  assign product40 = product40_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process31
      if (reset == 1'b1) begin
        int_delay_pipe_22[0] <= 8'b00000000;
        int_delay_pipe_22[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_22[1] <= int_delay_pipe_22[0];
          int_delay_pipe_22[0] <= delay_pipeline[38];
        end
      end
    end // temp_process31
  assign delay_pipeline_38_pipe = int_delay_pipe_22[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process32
      if (reset == 1'b1) begin
        int_delay_pipe_23[0] <= 16'b0000000000000000;
        int_delay_pipe_23[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_23[1] <= int_delay_pipe_23[0];
          int_delay_pipe_23[0] <= product39_pipe;
        end
      end
    end // temp_process32
  assign product39 = int_delay_pipe_23[1];

  assign product39_pipe = $signed({{8{delay_pipeline_38_pipe[7]}}, delay_pipeline_38_pipe});

  always @ (posedge clk or posedge reset)
    begin: temp_process33
      if (reset == 1'b1) begin
        delay_pipeline_37_under_pipe <= 0;
        delay_pipeline_37_under_pipe_1 <= 0;
        coeff38_pipe <= 0;
        coeff38_pipe_1 <= 0;
        product38_pipe <= 0;
        product38_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_37_under_pipe <= delay_pipeline[37];
          delay_pipeline_37_under_pipe_1 <= delay_pipeline_37_under_pipe;
          coeff38_pipe <= coeff38;
          coeff38_pipe_1 <= coeff38_pipe;

          product38_pipe <= delay_pipeline_37_under_pipe_1 * coeff38_pipe_1;

          product38_pipe_1 <= product38_pipe;
        end
      end
    end // temp_process33

  assign product38 = product38_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process34
      if (reset == 1'b1) begin
        delay_pipeline_36_under_pipe <= 0;
        delay_pipeline_36_under_pipe_1 <= 0;
        coeff37_pipe <= 0;
        coeff37_pipe_1 <= 0;
        product37_pipe <= 0;
        product37_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_36_under_pipe <= delay_pipeline[36];
          delay_pipeline_36_under_pipe_1 <= delay_pipeline_36_under_pipe;
          coeff37_pipe <= coeff37;
          coeff37_pipe_1 <= coeff37_pipe;

          product37_pipe <= delay_pipeline_36_under_pipe_1 * coeff37_pipe_1;

          product37_pipe_1 <= product37_pipe;
        end
      end
    end // temp_process34

  assign product37 = product37_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process35
      if (reset == 1'b1) begin
        delay_pipeline_35_under_pipe <= 0;
        delay_pipeline_35_under_pipe_1 <= 0;
        coeff36_pipe <= 0;
        coeff36_pipe_1 <= 0;
        product36_pipe <= 0;
        product36_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_35_under_pipe <= delay_pipeline[35];
          delay_pipeline_35_under_pipe_1 <= delay_pipeline_35_under_pipe;
          coeff36_pipe <= coeff36;
          coeff36_pipe_1 <= coeff36_pipe;

          product36_pipe <= delay_pipeline_35_under_pipe_1 * coeff36_pipe_1;

          product36_pipe_1 <= product36_pipe;
        end
      end
    end // temp_process35

  assign product36 = product36_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process36
      if (reset == 1'b1) begin
        delay_pipeline_34_under_pipe <= 0;
        delay_pipeline_34_under_pipe_1 <= 0;
        coeff35_pipe <= 0;
        coeff35_pipe_1 <= 0;
        product35_pipe <= 0;
        product35_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_34_under_pipe <= delay_pipeline[34];
          delay_pipeline_34_under_pipe_1 <= delay_pipeline_34_under_pipe;
          coeff35_pipe <= coeff35;
          coeff35_pipe_1 <= coeff35_pipe;

          product35_pipe <= delay_pipeline_34_under_pipe_1 * coeff35_pipe_1;

          product35_pipe_1 <= product35_pipe;
        end
      end
    end // temp_process36

  assign product35 = product35_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process37
      if (reset == 1'b1) begin
        delay_pipeline_33_under_pipe <= 0;
        delay_pipeline_33_under_pipe_1 <= 0;
        coeff34_pipe <= 0;
        coeff34_pipe_1 <= 0;
        product34_pipe <= 0;
        product34_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_33_under_pipe <= delay_pipeline[33];
          delay_pipeline_33_under_pipe_1 <= delay_pipeline_33_under_pipe;
          coeff34_pipe <= coeff34;
          coeff34_pipe_1 <= coeff34_pipe;

          product34_pipe <= delay_pipeline_33_under_pipe_1 * coeff34_pipe_1;

          product34_pipe_1 <= product34_pipe;
        end
      end
    end // temp_process37

  assign product34 = product34_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process38
      if (reset == 1'b1) begin
        delay_pipeline_32_under_pipe <= 0;
        delay_pipeline_32_under_pipe_1 <= 0;
        coeff33_pipe <= 0;
        coeff33_pipe_1 <= 0;
        product33_pipe <= 0;
        product33_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_32_under_pipe <= delay_pipeline[32];
          delay_pipeline_32_under_pipe_1 <= delay_pipeline_32_under_pipe;
          coeff33_pipe <= coeff33;
          coeff33_pipe_1 <= coeff33_pipe;

          product33_pipe <= delay_pipeline_32_under_pipe_1 * coeff33_pipe_1;

          product33_pipe_1 <= product33_pipe;
        end
      end
    end // temp_process38

  assign product33 = product33_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process39
      if (reset == 1'b1) begin
        delay_pipeline_31_under_pipe <= 0;
        delay_pipeline_31_under_pipe_1 <= 0;
        coeff32_pipe <= 0;
        coeff32_pipe_1 <= 0;
        product32_pipe <= 0;
        product32_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_31_under_pipe <= delay_pipeline[31];
          delay_pipeline_31_under_pipe_1 <= delay_pipeline_31_under_pipe;
          coeff32_pipe <= coeff32;
          coeff32_pipe_1 <= coeff32_pipe;

          product32_pipe <= delay_pipeline_31_under_pipe_1 * coeff32_pipe_1;

          product32_pipe_1 <= product32_pipe;
        end
      end
    end // temp_process39

  assign product32 = product32_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process40
      if (reset == 1'b1) begin
        delay_pipeline_30_under_pipe <= 0;
        delay_pipeline_30_under_pipe_1 <= 0;
        coeff31_pipe <= 0;
        coeff31_pipe_1 <= 0;
        product31_pipe <= 0;
        product31_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_30_under_pipe <= delay_pipeline[30];
          delay_pipeline_30_under_pipe_1 <= delay_pipeline_30_under_pipe;
          coeff31_pipe <= coeff31;
          coeff31_pipe_1 <= coeff31_pipe;

          product31_pipe <= delay_pipeline_30_under_pipe_1 * coeff31_pipe_1;

          product31_pipe_1 <= product31_pipe;
        end
      end
    end // temp_process40

  assign product31 = product31_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process41
      if (reset == 1'b1) begin
        delay_pipeline_29_under_pipe <= 0;
        delay_pipeline_29_under_pipe_1 <= 0;
        coeff30_pipe <= 0;
        coeff30_pipe_1 <= 0;
        product30_pipe <= 0;
        product30_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_29_under_pipe <= delay_pipeline[29];
          delay_pipeline_29_under_pipe_1 <= delay_pipeline_29_under_pipe;
          coeff30_pipe <= coeff30;
          coeff30_pipe_1 <= coeff30_pipe;

          product30_pipe <= delay_pipeline_29_under_pipe_1 * coeff30_pipe_1;

          product30_pipe_1 <= product30_pipe;
        end
      end
    end // temp_process41

  assign product30 = product30_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process42
      if (reset == 1'b1) begin
        delay_pipeline_28_under_pipe <= 0;
        delay_pipeline_28_under_pipe_1 <= 0;
        coeff29_pipe <= 0;
        coeff29_pipe_1 <= 0;
        product29_pipe <= 0;
        product29_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_28_under_pipe <= delay_pipeline[28];
          delay_pipeline_28_under_pipe_1 <= delay_pipeline_28_under_pipe;
          coeff29_pipe <= coeff29;
          coeff29_pipe_1 <= coeff29_pipe;

          product29_pipe <= delay_pipeline_28_under_pipe_1 * coeff29_pipe_1;

          product29_pipe_1 <= product29_pipe;
        end
      end
    end // temp_process42

  assign product29 = product29_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process43
      if (reset == 1'b1) begin
        delay_pipeline_27_under_pipe <= 0;
        delay_pipeline_27_under_pipe_1 <= 0;
        coeff28_pipe <= 0;
        coeff28_pipe_1 <= 0;
        product28_pipe <= 0;
        product28_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_27_under_pipe <= delay_pipeline[27];
          delay_pipeline_27_under_pipe_1 <= delay_pipeline_27_under_pipe;
          coeff28_pipe <= coeff28;
          coeff28_pipe_1 <= coeff28_pipe;

          product28_pipe <= delay_pipeline_27_under_pipe_1 * coeff28_pipe_1;

          product28_pipe_1 <= product28_pipe;
        end
      end
    end // temp_process43

  assign product28 = product28_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process44
      if (reset == 1'b1) begin
        delay_pipeline_26_under_pipe <= 0;
        delay_pipeline_26_under_pipe_1 <= 0;
        coeff27_pipe <= 0;
        coeff27_pipe_1 <= 0;
        product27_pipe <= 0;
        product27_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_26_under_pipe <= delay_pipeline[26];
          delay_pipeline_26_under_pipe_1 <= delay_pipeline_26_under_pipe;
          coeff27_pipe <= coeff27;
          coeff27_pipe_1 <= coeff27_pipe;

          product27_pipe <= delay_pipeline_26_under_pipe_1 * coeff27_pipe_1;

          product27_pipe_1 <= product27_pipe;
        end
      end
    end // temp_process44

  assign product27 = product27_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process45
      if (reset == 1'b1) begin
        delay_pipeline_25_under_pipe <= 0;
        delay_pipeline_25_under_pipe_1 <= 0;
        coeff26_pipe <= 0;
        coeff26_pipe_1 <= 0;
        product26_pipe <= 0;
        product26_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_25_under_pipe <= delay_pipeline[25];
          delay_pipeline_25_under_pipe_1 <= delay_pipeline_25_under_pipe;
          coeff26_pipe <= coeff26;
          coeff26_pipe_1 <= coeff26_pipe;

          product26_pipe <= delay_pipeline_25_under_pipe_1 * coeff26_pipe_1;

          product26_pipe_1 <= product26_pipe;
        end
      end
    end // temp_process45

  assign product26 = product26_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process46
      if (reset == 1'b1) begin
        delay_pipeline_24_under_pipe <= 0;
        delay_pipeline_24_under_pipe_1 <= 0;
        coeff25_pipe <= 0;
        coeff25_pipe_1 <= 0;
        product25_pipe <= 0;
        product25_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_24_under_pipe <= delay_pipeline[24];
          delay_pipeline_24_under_pipe_1 <= delay_pipeline_24_under_pipe;
          coeff25_pipe <= coeff25;
          coeff25_pipe_1 <= coeff25_pipe;

          product25_pipe <= delay_pipeline_24_under_pipe_1 * coeff25_pipe_1;

          product25_pipe_1 <= product25_pipe;
        end
      end
    end // temp_process46

  assign product25 = product25_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process47
      if (reset == 1'b1) begin
        delay_pipeline_23_under_pipe <= 0;
        delay_pipeline_23_under_pipe_1 <= 0;
        coeff24_pipe <= 0;
        coeff24_pipe_1 <= 0;
        product24_pipe <= 0;
        product24_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_23_under_pipe <= delay_pipeline[23];
          delay_pipeline_23_under_pipe_1 <= delay_pipeline_23_under_pipe;
          coeff24_pipe <= coeff24;
          coeff24_pipe_1 <= coeff24_pipe;

          product24_pipe <= delay_pipeline_23_under_pipe_1 * coeff24_pipe_1;

          product24_pipe_1 <= product24_pipe;
        end
      end
    end // temp_process47

  assign product24 = product24_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process48
      if (reset == 1'b1) begin
        int_delay_pipe_24[0] <= 8'b00000000;
        int_delay_pipe_24[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_24[1] <= int_delay_pipe_24[0];
          int_delay_pipe_24[0] <= delay_pipeline[22];
        end
      end
    end // temp_process48
  assign delay_pipeline_22_pipe = int_delay_pipe_24[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process49
      if (reset == 1'b1) begin
        int_delay_pipe_25[0] <= 16'b0000000000000000;
        int_delay_pipe_25[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_25[1] <= int_delay_pipe_25[0];
          int_delay_pipe_25[0] <= product23_pipe;
        end
      end
    end // temp_process49
  assign product23 = int_delay_pipe_25[1];

  assign product23_pipe = $signed({{8{delay_pipeline_22_pipe[7]}}, delay_pipeline_22_pipe});

  always @ (posedge clk or posedge reset)
    begin: temp_process50
      if (reset == 1'b1) begin
        delay_pipeline_21_under_pipe <= 0;
        delay_pipeline_21_under_pipe_1 <= 0;
        coeff22_pipe <= 0;
        coeff22_pipe_1 <= 0;
        product22_pipe <= 0;
        product22_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_21_under_pipe <= delay_pipeline[21];
          delay_pipeline_21_under_pipe_1 <= delay_pipeline_21_under_pipe;
          coeff22_pipe <= coeff22;
          coeff22_pipe_1 <= coeff22_pipe;

          product22_pipe <= delay_pipeline_21_under_pipe_1 * coeff22_pipe_1;

          product22_pipe_1 <= product22_pipe;
        end
      end
    end // temp_process50

  assign product22 = product22_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process51
      if (reset == 1'b1) begin
        delay_pipeline_20_under_pipe <= 0;
        delay_pipeline_20_under_pipe_1 <= 0;
        coeff21_pipe <= 0;
        coeff21_pipe_1 <= 0;
        product21_pipe <= 0;
        product21_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_20_under_pipe <= delay_pipeline[20];
          delay_pipeline_20_under_pipe_1 <= delay_pipeline_20_under_pipe;
          coeff21_pipe <= coeff21;
          coeff21_pipe_1 <= coeff21_pipe;

          product21_pipe <= delay_pipeline_20_under_pipe_1 * coeff21_pipe_1;

          product21_pipe_1 <= product21_pipe;
        end
      end
    end // temp_process51

  assign product21 = product21_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process52
      if (reset == 1'b1) begin
        int_delay_pipe_26[0] <= 8'b00000000;
        int_delay_pipe_26[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_26[1] <= int_delay_pipe_26[0];
          int_delay_pipe_26[0] <= delay_pipeline[19];
        end
      end
    end // temp_process52
  assign delay_pipeline_19_pipe = int_delay_pipe_26[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process53
      if (reset == 1'b1) begin
        int_delay_pipe_27[0] <= 16'b0000000000000000;
        int_delay_pipe_27[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_27[1] <= int_delay_pipe_27[0];
          int_delay_pipe_27[0] <= product20_pipe;
        end
      end
    end // temp_process53
  assign product20 = int_delay_pipe_27[1];

  assign product20_pipe = $signed({delay_pipeline_19_pipe[7:0], 1'b0});

  always @ (posedge clk or posedge reset)
    begin: temp_process54
      if (reset == 1'b1) begin
        delay_pipeline_18_under_pipe <= 0;
        delay_pipeline_18_under_pipe_1 <= 0;
        coeff19_pipe <= 0;
        coeff19_pipe_1 <= 0;
        product19_pipe <= 0;
        product19_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_18_under_pipe <= delay_pipeline[18];
          delay_pipeline_18_under_pipe_1 <= delay_pipeline_18_under_pipe;
          coeff19_pipe <= coeff19;
          coeff19_pipe_1 <= coeff19_pipe;

          product19_pipe <= delay_pipeline_18_under_pipe_1 * coeff19_pipe_1;

          product19_pipe_1 <= product19_pipe;
        end
      end
    end // temp_process54

  assign product19 = product19_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process55
      if (reset == 1'b1) begin
        delay_pipeline_17_under_pipe <= 0;
        delay_pipeline_17_under_pipe_1 <= 0;
        coeff18_pipe <= 0;
        coeff18_pipe_1 <= 0;
        product18_pipe <= 0;
        product18_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_17_under_pipe <= delay_pipeline[17];
          delay_pipeline_17_under_pipe_1 <= delay_pipeline_17_under_pipe;
          coeff18_pipe <= coeff18;
          coeff18_pipe_1 <= coeff18_pipe;

          product18_pipe <= delay_pipeline_17_under_pipe_1 * coeff18_pipe_1;

          product18_pipe_1 <= product18_pipe;
        end
      end
    end // temp_process55

  assign product18 = product18_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process56
      if (reset == 1'b1) begin
        delay_pipeline_16_under_pipe <= 0;
        delay_pipeline_16_under_pipe_1 <= 0;
        coeff17_pipe <= 0;
        coeff17_pipe_1 <= 0;
        product17_pipe <= 0;
        product17_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_16_under_pipe <= delay_pipeline[16];
          delay_pipeline_16_under_pipe_1 <= delay_pipeline_16_under_pipe;
          coeff17_pipe <= coeff17;
          coeff17_pipe_1 <= coeff17_pipe;

          product17_pipe <= delay_pipeline_16_under_pipe_1 * coeff17_pipe_1;

          product17_pipe_1 <= product17_pipe;
        end
      end
    end // temp_process56

  assign product17 = product17_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process57
      if (reset == 1'b1) begin
        int_delay_pipe_28[0] <= 8'b00000000;
        int_delay_pipe_28[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_28[1] <= int_delay_pipe_28[0];
          int_delay_pipe_28[0] <= delay_pipeline[15];
        end
      end
    end // temp_process57
  assign delay_pipeline_15_pipe = int_delay_pipe_28[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process58
      if (reset == 1'b1) begin
        int_delay_pipe_29[0] <= 16'b0000000000000000;
        int_delay_pipe_29[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_29[1] <= int_delay_pipe_29[0];
          int_delay_pipe_29[0] <= product16_pipe;
        end
      end
    end // temp_process58
  assign product16 = int_delay_pipe_29[1];

  assign mulpwr2_temp_8 = (delay_pipeline_15_pipe==8'b10000000) ? $signed({1'b0, delay_pipeline_15_pipe}) : -delay_pipeline_15_pipe;

  assign product16_pipe = $signed({mulpwr2_temp_8[8:0], 2'b00});

  always @ (posedge clk or posedge reset)
    begin: temp_process59
      if (reset == 1'b1) begin
        int_delay_pipe_30[0] <= 8'b00000000;
        int_delay_pipe_30[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_30[1] <= int_delay_pipe_30[0];
          int_delay_pipe_30[0] <= delay_pipeline[14];
        end
      end
    end // temp_process59
  assign delay_pipeline_14_pipe = int_delay_pipe_30[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process60
      if (reset == 1'b1) begin
        int_delay_pipe_31[0] <= 16'b0000000000000000;
        int_delay_pipe_31[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_31[1] <= int_delay_pipe_31[0];
          int_delay_pipe_31[0] <= product15_pipe;
        end
      end
    end // temp_process60
  assign product15 = int_delay_pipe_31[1];

  assign mulpwr2_temp_9 = (delay_pipeline_14_pipe==8'b10000000) ? $signed({1'b0, delay_pipeline_14_pipe}) : -delay_pipeline_14_pipe;

  assign product15_pipe = $signed({{7{mulpwr2_temp_9[8]}}, mulpwr2_temp_9});

  always @ (posedge clk or posedge reset)
    begin: temp_process61
      if (reset == 1'b1) begin
        delay_pipeline_13_under_pipe <= 0;
        delay_pipeline_13_under_pipe_1 <= 0;
        coeff14_pipe <= 0;
        coeff14_pipe_1 <= 0;
        product14_pipe <= 0;
        product14_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_13_under_pipe <= delay_pipeline[13];
          delay_pipeline_13_under_pipe_1 <= delay_pipeline_13_under_pipe;
          coeff14_pipe <= coeff14;
          coeff14_pipe_1 <= coeff14_pipe;

          product14_pipe <= delay_pipeline_13_under_pipe_1 * coeff14_pipe_1;

          product14_pipe_1 <= product14_pipe;
        end
      end
    end // temp_process61

  assign product14 = product14_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process62
      if (reset == 1'b1) begin
        delay_pipeline_12_under_pipe <= 0;
        delay_pipeline_12_under_pipe_1 <= 0;
        coeff13_pipe <= 0;
        coeff13_pipe_1 <= 0;
        product13_pipe <= 0;
        product13_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_12_under_pipe <= delay_pipeline[12];
          delay_pipeline_12_under_pipe_1 <= delay_pipeline_12_under_pipe;
          coeff13_pipe <= coeff13;
          coeff13_pipe_1 <= coeff13_pipe;

          product13_pipe <= delay_pipeline_12_under_pipe_1 * coeff13_pipe_1;

          product13_pipe_1 <= product13_pipe;
        end
      end
    end // temp_process62

  assign product13 = product13_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process63
      if (reset == 1'b1) begin
        int_delay_pipe_32[0] <= 8'b00000000;
        int_delay_pipe_32[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_32[1] <= int_delay_pipe_32[0];
          int_delay_pipe_32[0] <= delay_pipeline[11];
        end
      end
    end // temp_process63
  assign delay_pipeline_11_pipe = int_delay_pipe_32[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process64
      if (reset == 1'b1) begin
        int_delay_pipe_33[0] <= 16'b0000000000000000;
        int_delay_pipe_33[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_33[1] <= int_delay_pipe_33[0];
          int_delay_pipe_33[0] <= product12_pipe;
        end
      end
    end // temp_process64
  assign product12 = int_delay_pipe_33[1];

  assign mulpwr2_temp_10 = (delay_pipeline_11_pipe==8'b10000000) ? $signed({1'b0, delay_pipeline_11_pipe}) : -delay_pipeline_11_pipe;

  assign product12_pipe = $signed({{7{mulpwr2_temp_10[8]}}, mulpwr2_temp_10});

  always @ (posedge clk or posedge reset)
    begin: temp_process65
      if (reset == 1'b1) begin
        int_delay_pipe_34[0] <= 8'b00000000;
        int_delay_pipe_34[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_34[1] <= int_delay_pipe_34[0];
          int_delay_pipe_34[0] <= delay_pipeline[10];
        end
      end
    end // temp_process65
  assign delay_pipeline_10_pipe = int_delay_pipe_34[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process66
      if (reset == 1'b1) begin
        int_delay_pipe_35[0] <= 16'b0000000000000000;
        int_delay_pipe_35[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_35[1] <= int_delay_pipe_35[0];
          int_delay_pipe_35[0] <= product11_pipe;
        end
      end
    end // temp_process66
  assign product11 = int_delay_pipe_35[1];

  assign mulpwr2_temp_11 = (delay_pipeline_10_pipe==8'b10000000) ? $signed({1'b0, delay_pipeline_10_pipe}) : -delay_pipeline_10_pipe;

  assign product11_pipe = $signed({mulpwr2_temp_11[8:0], 1'b0});

  always @ (posedge clk or posedge reset)
    begin: temp_process67
      if (reset == 1'b1) begin
        int_delay_pipe_36[0] <= 8'b00000000;
        int_delay_pipe_36[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_36[1] <= int_delay_pipe_36[0];
          int_delay_pipe_36[0] <= delay_pipeline[9];
        end
      end
    end // temp_process67
  assign delay_pipeline_9_pipe = int_delay_pipe_36[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process68
      if (reset == 1'b1) begin
        int_delay_pipe_37[0] <= 16'b0000000000000000;
        int_delay_pipe_37[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_37[1] <= int_delay_pipe_37[0];
          int_delay_pipe_37[0] <= product10_pipe;
        end
      end
    end // temp_process68
  assign product10 = int_delay_pipe_37[1];

  assign mulpwr2_temp_12 = (delay_pipeline_9_pipe==8'b10000000) ? $signed({1'b0, delay_pipeline_9_pipe}) : -delay_pipeline_9_pipe;

  assign product10_pipe = $signed({{7{mulpwr2_temp_12[8]}}, mulpwr2_temp_12});

  always @ (posedge clk or posedge reset)
    begin: temp_process69
      if (reset == 1'b1) begin
        int_delay_pipe_38[0] <= 8'b00000000;
        int_delay_pipe_38[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_38[1] <= int_delay_pipe_38[0];
          int_delay_pipe_38[0] <= delay_pipeline[8];
        end
      end
    end // temp_process69
  assign delay_pipeline_8_pipe = int_delay_pipe_38[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process70
      if (reset == 1'b1) begin
        int_delay_pipe_39[0] <= 16'b0000000000000000;
        int_delay_pipe_39[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_39[1] <= int_delay_pipe_39[0];
          int_delay_pipe_39[0] <= product9_pipe;
        end
      end
    end // temp_process70
  assign product9 = int_delay_pipe_39[1];

  assign product9_pipe = $signed({{8{delay_pipeline_8_pipe[7]}}, delay_pipeline_8_pipe});

  always @ (posedge clk or posedge reset)
    begin: temp_process71
      if (reset == 1'b1) begin
        int_delay_pipe_40[0] <= 8'b00000000;
        int_delay_pipe_40[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_40[1] <= int_delay_pipe_40[0];
          int_delay_pipe_40[0] <= delay_pipeline[7];
        end
      end
    end // temp_process71
  assign delay_pipeline_7_pipe = int_delay_pipe_40[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process72
      if (reset == 1'b1) begin
        int_delay_pipe_41[0] <= 16'b0000000000000000;
        int_delay_pipe_41[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_41[1] <= int_delay_pipe_41[0];
          int_delay_pipe_41[0] <= product8_pipe;
        end
      end
    end // temp_process72
  assign product8 = int_delay_pipe_41[1];

  assign product8_pipe = $signed({delay_pipeline_7_pipe[7:0], 1'b0});

  always @ (posedge clk or posedge reset)
    begin: temp_process73
      if (reset == 1'b1) begin
        int_delay_pipe_42[0] <= 8'b00000000;
        int_delay_pipe_42[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_42[1] <= int_delay_pipe_42[0];
          int_delay_pipe_42[0] <= delay_pipeline[5];
        end
      end
    end // temp_process73
  assign delay_pipeline_5_pipe = int_delay_pipe_42[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process74
      if (reset == 1'b1) begin
        int_delay_pipe_43[0] <= 16'b0000000000000000;
        int_delay_pipe_43[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_43[1] <= int_delay_pipe_43[0];
          int_delay_pipe_43[0] <= product6_pipe;
        end
      end
    end // temp_process74
  assign product6 = int_delay_pipe_43[1];

  assign mulpwr2_temp_13 = (delay_pipeline_5_pipe==8'b10000000) ? $signed({1'b0, delay_pipeline_5_pipe}) : -delay_pipeline_5_pipe;

  assign product6_pipe = $signed({mulpwr2_temp_13[8:0], 1'b0});

  always @ (posedge clk or posedge reset)
    begin: temp_process75
      if (reset == 1'b1) begin
        delay_pipeline_4_under_pipe <= 0;
        delay_pipeline_4_under_pipe_1 <= 0;
        coeff5_pipe <= 0;
        coeff5_pipe_1 <= 0;
        product5_pipe <= 0;
        product5_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_4_under_pipe <= delay_pipeline[4];
          delay_pipeline_4_under_pipe_1 <= delay_pipeline_4_under_pipe;
          coeff5_pipe <= coeff5;
          coeff5_pipe_1 <= coeff5_pipe;

          product5_pipe <= delay_pipeline_4_under_pipe_1 * coeff5_pipe_1;

          product5_pipe_1 <= product5_pipe;
        end
      end
    end // temp_process75

  assign product5 = product5_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process76
      if (reset == 1'b1) begin
        int_delay_pipe_44[0] <= 8'b00000000;
        int_delay_pipe_44[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_44[1] <= int_delay_pipe_44[0];
          int_delay_pipe_44[0] <= delay_pipeline[3];
        end
      end
    end // temp_process76
  assign delay_pipeline_3_pipe = int_delay_pipe_44[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process77
      if (reset == 1'b1) begin
        int_delay_pipe_45[0] <= 16'b0000000000000000;
        int_delay_pipe_45[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_45[1] <= int_delay_pipe_45[0];
          int_delay_pipe_45[0] <= product4_pipe;
        end
      end
    end // temp_process77
  assign product4 = int_delay_pipe_45[1];

  assign mulpwr2_temp_14 = (delay_pipeline_3_pipe==8'b10000000) ? $signed({1'b0, delay_pipeline_3_pipe}) : -delay_pipeline_3_pipe;

  assign product4_pipe = $signed({mulpwr2_temp_14[8:0], 1'b0});

  always @ (posedge clk or posedge reset)
    begin: temp_process78
      if (reset == 1'b1) begin
        int_delay_pipe_46[0] <= 8'b00000000;
        int_delay_pipe_46[1] <= 8'b00000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_46[1] <= int_delay_pipe_46[0];
          int_delay_pipe_46[0] <= delay_pipeline[2];
        end
      end
    end // temp_process78
  assign delay_pipeline_2_pipe = int_delay_pipe_46[1];

  always @ (posedge clk or posedge reset)
    begin: temp_process79
      if (reset == 1'b1) begin
        int_delay_pipe_47[0] <= 16'b0000000000000000;
        int_delay_pipe_47[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe_47[1] <= int_delay_pipe_47[0];
          int_delay_pipe_47[0] <= product3_pipe;
        end
      end
    end // temp_process79
  assign product3 = int_delay_pipe_47[1];

  assign mulpwr2_temp_15 = (delay_pipeline_2_pipe==8'b10000000) ? $signed({1'b0, delay_pipeline_2_pipe}) : -delay_pipeline_2_pipe;

  assign product3_pipe = $signed({{7{mulpwr2_temp_15[8]}}, mulpwr2_temp_15});

  assign add_signext = product59;
  assign add_signext_1 = product58;
  assign add_temp = add_signext + add_signext_1;
  assign sum1_1 = $signed({{5{add_temp[16]}}, add_temp});

  assign add_signext_2 = product57;
  assign add_signext_3 = product56;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sum1_2 = $signed({{5{add_temp_1[16]}}, add_temp_1});

  assign add_signext_4 = product54;
  assign add_signext_5 = product53;
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sum1_3 = $signed({{5{add_temp_2[16]}}, add_temp_2});

  assign add_signext_6 = product52;
  assign add_signext_7 = product51;
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sum1_4 = $signed({{5{add_temp_3[16]}}, add_temp_3});

  assign add_signext_8 = product50;
  assign add_signext_9 = product49;
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sum1_5 = $signed({{5{add_temp_4[16]}}, add_temp_4});

  assign add_signext_10 = product48;
  assign add_signext_11 = product47;
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sum1_6 = $signed({{5{add_temp_5[16]}}, add_temp_5});

  assign add_signext_12 = product46;
  assign add_signext_13 = product45;
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sum1_7 = $signed({{5{add_temp_6[16]}}, add_temp_6});

  assign add_signext_14 = product44;
  assign add_signext_15 = product43;
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sum1_8 = $signed({{5{add_temp_7[16]}}, add_temp_7});

  assign add_signext_16 = product42;
  assign add_signext_17 = product41;
  assign add_temp_8 = add_signext_16 + add_signext_17;
  assign sum1_9 = $signed({{5{add_temp_8[16]}}, add_temp_8});

  assign add_signext_18 = product40;
  assign add_signext_19 = product39;
  assign add_temp_9 = add_signext_18 + add_signext_19;
  assign sum1_10 = $signed({{5{add_temp_9[16]}}, add_temp_9});

  assign add_signext_20 = product38;
  assign add_signext_21 = product37;
  assign add_temp_10 = add_signext_20 + add_signext_21;
  assign sum1_11 = $signed({{5{add_temp_10[16]}}, add_temp_10});

  assign add_signext_22 = product36;
  assign add_signext_23 = product35;
  assign add_temp_11 = add_signext_22 + add_signext_23;
  assign sum1_12 = $signed({{5{add_temp_11[16]}}, add_temp_11});

  assign add_signext_24 = product34;
  assign add_signext_25 = product33;
  assign add_temp_12 = add_signext_24 + add_signext_25;
  assign sum1_13 = $signed({{5{add_temp_12[16]}}, add_temp_12});

  assign add_signext_26 = product32;
  assign add_signext_27 = product31;
  assign add_temp_13 = add_signext_26 + add_signext_27;
  assign sum1_14 = $signed({{5{add_temp_13[16]}}, add_temp_13});

  assign add_signext_28 = product30;
  assign add_signext_29 = product29;
  assign add_temp_14 = add_signext_28 + add_signext_29;
  assign sum1_15 = $signed({{5{add_temp_14[16]}}, add_temp_14});

  assign add_signext_30 = product28;
  assign add_signext_31 = product27;
  assign add_temp_15 = add_signext_30 + add_signext_31;
  assign sum1_16 = $signed({{5{add_temp_15[16]}}, add_temp_15});

  assign add_signext_32 = product26;
  assign add_signext_33 = product25;
  assign add_temp_16 = add_signext_32 + add_signext_33;
  assign sum1_17 = $signed({{5{add_temp_16[16]}}, add_temp_16});

  assign add_signext_34 = product24;
  assign add_signext_35 = product23;
  assign add_temp_17 = add_signext_34 + add_signext_35;
  assign sum1_18 = $signed({{5{add_temp_17[16]}}, add_temp_17});

  assign add_signext_36 = product22;
  assign add_signext_37 = product21;
  assign add_temp_18 = add_signext_36 + add_signext_37;
  assign sum1_19 = $signed({{5{add_temp_18[16]}}, add_temp_18});

  assign add_signext_38 = product20;
  assign add_signext_39 = product19;
  assign add_temp_19 = add_signext_38 + add_signext_39;
  assign sum1_20 = $signed({{5{add_temp_19[16]}}, add_temp_19});

  assign add_signext_40 = product18;
  assign add_signext_41 = product17;
  assign add_temp_20 = add_signext_40 + add_signext_41;
  assign sum1_21 = $signed({{5{add_temp_20[16]}}, add_temp_20});

  assign add_signext_42 = product16;
  assign add_signext_43 = product15;
  assign add_temp_21 = add_signext_42 + add_signext_43;
  assign sum1_22 = $signed({{5{add_temp_21[16]}}, add_temp_21});

  assign add_signext_44 = product14;
  assign add_signext_45 = product13;
  assign add_temp_22 = add_signext_44 + add_signext_45;
  assign sum1_23 = $signed({{5{add_temp_22[16]}}, add_temp_22});

  assign add_signext_46 = product12;
  assign add_signext_47 = product11;
  assign add_temp_23 = add_signext_46 + add_signext_47;
  assign sum1_24 = $signed({{5{add_temp_23[16]}}, add_temp_23});

  assign add_signext_48 = product10;
  assign add_signext_49 = product9;
  assign add_temp_24 = add_signext_48 + add_signext_49;
  assign sum1_25 = $signed({{5{add_temp_24[16]}}, add_temp_24});

  assign add_signext_50 = product8;
  assign add_signext_51 = product6;
  assign add_temp_25 = add_signext_50 + add_signext_51;
  assign sum1_26 = $signed({{5{add_temp_25[16]}}, add_temp_25});

  assign add_signext_52 = product5;
  assign add_signext_53 = product4;
  assign add_temp_26 = add_signext_52 + add_signext_53;
  assign sum1_27 = $signed({{5{add_temp_26[16]}}, add_temp_26});

  always @ (posedge clk or posedge reset)
    begin: temp_process80
      if (reset == 1'b1) begin
        sumpipe1_1 <= 0;
        sumpipe1_2 <= 0;
        sumpipe1_3 <= 0;
        sumpipe1_4 <= 0;
        sumpipe1_5 <= 0;
        sumpipe1_6 <= 0;
        sumpipe1_7 <= 0;
        sumpipe1_8 <= 0;
        sumpipe1_9 <= 0;
        sumpipe1_10 <= 0;
        sumpipe1_11 <= 0;
        sumpipe1_12 <= 0;
        sumpipe1_13 <= 0;
        sumpipe1_14 <= 0;
        sumpipe1_15 <= 0;
        sumpipe1_16 <= 0;
        sumpipe1_17 <= 0;
        sumpipe1_18 <= 0;
        sumpipe1_19 <= 0;
        sumpipe1_20 <= 0;
        sumpipe1_21 <= 0;
        sumpipe1_22 <= 0;
        sumpipe1_23 <= 0;
        sumpipe1_24 <= 0;
        sumpipe1_25 <= 0;
        sumpipe1_26 <= 0;
        sumpipe1_27 <= 0;
        sumpipe1_28 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe1_1 <= sum1_1;
          sumpipe1_2 <= sum1_2;
          sumpipe1_3 <= sum1_3;
          sumpipe1_4 <= sum1_4;
          sumpipe1_5 <= sum1_5;
          sumpipe1_6 <= sum1_6;
          sumpipe1_7 <= sum1_7;
          sumpipe1_8 <= sum1_8;
          sumpipe1_9 <= sum1_9;
          sumpipe1_10 <= sum1_10;
          sumpipe1_11 <= sum1_11;
          sumpipe1_12 <= sum1_12;
          sumpipe1_13 <= sum1_13;
          sumpipe1_14 <= sum1_14;
          sumpipe1_15 <= sum1_15;
          sumpipe1_16 <= sum1_16;
          sumpipe1_17 <= sum1_17;
          sumpipe1_18 <= sum1_18;
          sumpipe1_19 <= sum1_19;
          sumpipe1_20 <= sum1_20;
          sumpipe1_21 <= sum1_21;
          sumpipe1_22 <= sum1_22;
          sumpipe1_23 <= sum1_23;
          sumpipe1_24 <= sum1_24;
          sumpipe1_25 <= sum1_25;
          sumpipe1_26 <= sum1_26;
          sumpipe1_27 <= sum1_27;
          sumpipe1_28 <= product3;
        end
      end
    end // temp_process80

  assign add_signext_54 = sumpipe1_1;
  assign add_signext_55 = sumpipe1_2;
  assign add_temp_27 = add_signext_54 + add_signext_55;
  assign sum2_1 = add_temp_27[21:0];

  assign add_signext_56 = sumpipe1_3;
  assign add_signext_57 = sumpipe1_4;
  assign add_temp_28 = add_signext_56 + add_signext_57;
  assign sum2_2 = add_temp_28[21:0];

  assign add_signext_58 = sumpipe1_5;
  assign add_signext_59 = sumpipe1_6;
  assign add_temp_29 = add_signext_58 + add_signext_59;
  assign sum2_3 = add_temp_29[21:0];

  assign add_signext_60 = sumpipe1_7;
  assign add_signext_61 = sumpipe1_8;
  assign add_temp_30 = add_signext_60 + add_signext_61;
  assign sum2_4 = add_temp_30[21:0];

  assign add_signext_62 = sumpipe1_9;
  assign add_signext_63 = sumpipe1_10;
  assign add_temp_31 = add_signext_62 + add_signext_63;
  assign sum2_5 = add_temp_31[21:0];

  assign add_signext_64 = sumpipe1_11;
  assign add_signext_65 = sumpipe1_12;
  assign add_temp_32 = add_signext_64 + add_signext_65;
  assign sum2_6 = add_temp_32[21:0];

  assign add_signext_66 = sumpipe1_13;
  assign add_signext_67 = sumpipe1_14;
  assign add_temp_33 = add_signext_66 + add_signext_67;
  assign sum2_7 = add_temp_33[21:0];

  assign add_signext_68 = sumpipe1_15;
  assign add_signext_69 = sumpipe1_16;
  assign add_temp_34 = add_signext_68 + add_signext_69;
  assign sum2_8 = add_temp_34[21:0];

  assign add_signext_70 = sumpipe1_17;
  assign add_signext_71 = sumpipe1_18;
  assign add_temp_35 = add_signext_70 + add_signext_71;
  assign sum2_9 = add_temp_35[21:0];

  assign add_signext_72 = sumpipe1_19;
  assign add_signext_73 = sumpipe1_20;
  assign add_temp_36 = add_signext_72 + add_signext_73;
  assign sum2_10 = add_temp_36[21:0];

  assign add_signext_74 = sumpipe1_21;
  assign add_signext_75 = sumpipe1_22;
  assign add_temp_37 = add_signext_74 + add_signext_75;
  assign sum2_11 = add_temp_37[21:0];

  assign add_signext_76 = sumpipe1_23;
  assign add_signext_77 = sumpipe1_24;
  assign add_temp_38 = add_signext_76 + add_signext_77;
  assign sum2_12 = add_temp_38[21:0];

  assign add_signext_78 = sumpipe1_25;
  assign add_signext_79 = sumpipe1_26;
  assign add_temp_39 = add_signext_78 + add_signext_79;
  assign sum2_13 = add_temp_39[21:0];

  assign add_signext_80 = sumpipe1_27;
  assign add_signext_81 = $signed({{6{sumpipe1_28[15]}}, sumpipe1_28});
  assign add_temp_40 = add_signext_80 + add_signext_81;
  assign sum2_14 = add_temp_40[21:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process81
      if (reset == 1'b1) begin
        sumpipe2_1 <= 0;
        sumpipe2_2 <= 0;
        sumpipe2_3 <= 0;
        sumpipe2_4 <= 0;
        sumpipe2_5 <= 0;
        sumpipe2_6 <= 0;
        sumpipe2_7 <= 0;
        sumpipe2_8 <= 0;
        sumpipe2_9 <= 0;
        sumpipe2_10 <= 0;
        sumpipe2_11 <= 0;
        sumpipe2_12 <= 0;
        sumpipe2_13 <= 0;
        sumpipe2_14 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe2_1 <= sum2_1;
          sumpipe2_2 <= sum2_2;
          sumpipe2_3 <= sum2_3;
          sumpipe2_4 <= sum2_4;
          sumpipe2_5 <= sum2_5;
          sumpipe2_6 <= sum2_6;
          sumpipe2_7 <= sum2_7;
          sumpipe2_8 <= sum2_8;
          sumpipe2_9 <= sum2_9;
          sumpipe2_10 <= sum2_10;
          sumpipe2_11 <= sum2_11;
          sumpipe2_12 <= sum2_12;
          sumpipe2_13 <= sum2_13;
          sumpipe2_14 <= sum2_14;
        end
      end
    end // temp_process81

  assign add_signext_82 = sumpipe2_1;
  assign add_signext_83 = sumpipe2_2;
  assign add_temp_41 = add_signext_82 + add_signext_83;
  assign sum3_1 = add_temp_41[21:0];

  assign add_signext_84 = sumpipe2_3;
  assign add_signext_85 = sumpipe2_4;
  assign add_temp_42 = add_signext_84 + add_signext_85;
  assign sum3_2 = add_temp_42[21:0];

  assign add_signext_86 = sumpipe2_5;
  assign add_signext_87 = sumpipe2_6;
  assign add_temp_43 = add_signext_86 + add_signext_87;
  assign sum3_3 = add_temp_43[21:0];

  assign add_signext_88 = sumpipe2_7;
  assign add_signext_89 = sumpipe2_8;
  assign add_temp_44 = add_signext_88 + add_signext_89;
  assign sum3_4 = add_temp_44[21:0];

  assign add_signext_90 = sumpipe2_9;
  assign add_signext_91 = sumpipe2_10;
  assign add_temp_45 = add_signext_90 + add_signext_91;
  assign sum3_5 = add_temp_45[21:0];

  assign add_signext_92 = sumpipe2_11;
  assign add_signext_93 = sumpipe2_12;
  assign add_temp_46 = add_signext_92 + add_signext_93;
  assign sum3_6 = add_temp_46[21:0];

  assign add_signext_94 = sumpipe2_13;
  assign add_signext_95 = sumpipe2_14;
  assign add_temp_47 = add_signext_94 + add_signext_95;
  assign sum3_7 = add_temp_47[21:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process82
      if (reset == 1'b1) begin
        sumpipe3_1 <= 0;
        sumpipe3_2 <= 0;
        sumpipe3_3 <= 0;
        sumpipe3_4 <= 0;
        sumpipe3_5 <= 0;
        sumpipe3_6 <= 0;
        sumpipe3_7 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe3_1 <= sum3_1;
          sumpipe3_2 <= sum3_2;
          sumpipe3_3 <= sum3_3;
          sumpipe3_4 <= sum3_4;
          sumpipe3_5 <= sum3_5;
          sumpipe3_6 <= sum3_6;
          sumpipe3_7 <= sum3_7;
        end
      end
    end // temp_process82

  assign add_signext_96 = sumpipe3_1;
  assign add_signext_97 = sumpipe3_2;
  assign add_temp_48 = add_signext_96 + add_signext_97;
  assign sum4_1 = add_temp_48[21:0];

  assign add_signext_98 = sumpipe3_3;
  assign add_signext_99 = sumpipe3_4;
  assign add_temp_49 = add_signext_98 + add_signext_99;
  assign sum4_2 = add_temp_49[21:0];

  assign add_signext_100 = sumpipe3_5;
  assign add_signext_101 = sumpipe3_6;
  assign add_temp_50 = add_signext_100 + add_signext_101;
  assign sum4_3 = add_temp_50[21:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process83
      if (reset == 1'b1) begin
        sumpipe4_1 <= 0;
        sumpipe4_2 <= 0;
        sumpipe4_3 <= 0;
        sumpipe4_4 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe4_1 <= sum4_1;
          sumpipe4_2 <= sum4_2;
          sumpipe4_3 <= sum4_3;
          sumpipe4_4 <= sumpipe3_7;
        end
      end
    end // temp_process83

  assign add_signext_102 = sumpipe4_1;
  assign add_signext_103 = sumpipe4_2;
  assign add_temp_51 = add_signext_102 + add_signext_103;
  assign sum5_1 = add_temp_51[21:0];

  assign add_signext_104 = sumpipe4_3;
  assign add_signext_105 = sumpipe4_4;
  assign add_temp_52 = add_signext_104 + add_signext_105;
  assign sum5_2 = add_temp_52[21:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process84
      if (reset == 1'b1) begin
        sumpipe5_1 <= 0;
        sumpipe5_2 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe5_1 <= sum5_1;
          sumpipe5_2 <= sum5_2;
        end
      end
    end // temp_process84

  assign add_signext_106 = sumpipe5_1;
  assign add_signext_107 = sumpipe5_2;
  assign add_temp_53 = add_signext_106 + add_signext_107;
  assign sum6_1 = add_temp_53[21:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process85
      if (reset == 1'b1) begin
        sumpipe6_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe6_1 <= sum6_1;
        end
      end
    end // temp_process85

  assign sum_final = sumpipe6_1;

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= sum_final;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // fir_min_8b_2p

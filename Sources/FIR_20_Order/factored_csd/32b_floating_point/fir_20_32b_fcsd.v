// -------------------------------------------------------------
//
// Module: fir_20_32b_fcsd
// Generated by MATLAB(R) 9.12 and Filter Design HDL Coder 3.1.11.
// Generated on: 2023-06-21 23:54:01
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// CoeffMultipliers: Factored-CSD
// FIRAdderStyle: tree
// OptimizeForHDL: on
// TargetDirectory: W:\Nikos\UTh\Σχεδίαση Επεξεργαστών\Project\FIR_20_Order\factored_csd\32b_floating_point
// AddPipelineRegisters: on
// Name: fir_20_32b_fcsd
// InputDataType: numerictype(1,32,0)
// TargetLanguage: Verilog
// TestBenchName: fir_20_32b_fcsd_tb
// TestBenchStimulus: impulse step ramp chirp noise 

// Filter Specifications:
//
// Sample Rate     : 46 kHz
// Response        : Lowpass
// Specification   : N,Fp,Fst,Ap
// Stopband Edge   : 9.6 kHz
// Filter Order    : 20
// Passband Edge   : 8 kHz
// Passband Ripple : 60 dB
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 21
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s32,32 -> [-5.000000e-01 5.000000e-01)
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module fir_20_32b_fcsd
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [31:0] filter_in; //sfix32
  output  signed [68:0] filter_out; //sfix69_En32

////////////////////////////////////////////////////////////////
//Module Architecture: fir_20_32b_fcsd
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [31:0] coeff1 = 32'h00065332; //sfix32_En32
  parameter signed [31:0] coeff2 = 32'h00383D90; //sfix32_En32
  parameter signed [31:0] coeff3 = 32'h00FF1D6E; //sfix32_En32
  parameter signed [31:0] coeff4 = 32'h0327DFF2; //sfix32_En32
  parameter signed [31:0] coeff5 = 32'h07CD0ACB; //sfix32_En32
  parameter signed [31:0] coeff6 = 32'h0FEC18BB; //sfix32_En32
  parameter signed [31:0] coeff7 = 32'h1BB71D82; //sfix32_En32
  parameter signed [31:0] coeff8 = 32'h29FA0C85; //sfix32_En32
  parameter signed [31:0] coeff9 = 32'h3807CC7C; //sfix32_En32
  parameter signed [31:0] coeff10 = 32'h42701751; //sfix32_En32
  parameter signed [31:0] coeff11 = 32'h464995CD; //sfix32_En32
  parameter signed [31:0] coeff12 = 32'h42701751; //sfix32_En32
  parameter signed [31:0] coeff13 = 32'h3807CC7C; //sfix32_En32
  parameter signed [31:0] coeff14 = 32'h29FA0C85; //sfix32_En32
  parameter signed [31:0] coeff15 = 32'h1BB71D82; //sfix32_En32
  parameter signed [31:0] coeff16 = 32'h0FEC18BB; //sfix32_En32
  parameter signed [31:0] coeff17 = 32'h07CD0ACB; //sfix32_En32
  parameter signed [31:0] coeff18 = 32'h0327DFF2; //sfix32_En32
  parameter signed [31:0] coeff19 = 32'h00FF1D6E; //sfix32_En32
  parameter signed [31:0] coeff20 = 32'h00383D90; //sfix32_En32
  parameter signed [31:0] coeff21 = 32'h00065332; //sfix32_En32

  // Signals
  reg  signed [31:0] delay_pipeline [0:20] ; // sfix32
  wire signed [63:0] product21; // sfix64_En32
  wire signed [51:0] mulcsd_temp; // sfix52_En32
  wire signed [63:0] product20; // sfix64_En32
  wire signed [54:0] mulcsd_temp_1; // sfix55_En32
  wire signed [63:0] product19; // sfix64_En32
  wire signed [56:0] mulcsd_temp_2; // sfix57_En32
  wire signed [63:0] product18; // sfix64_En32
  wire signed [58:0] mulcsd_temp_3; // sfix59_En32
  wire signed [63:0] product17; // sfix64_En32
  wire signed [45:0] factoredcsd_temp; // sfix46_En14
  wire signed [45:0] mulcsd_temp_4; // sfix46_En14
  wire signed [53:0] factoredcsd_temp_1; // sfix54_En22
  wire signed [53:0] mulcsd_temp_5; // sfix54_En22
  wire signed [58:0] factoredcsd_temp_2; // sfix59_En27
  wire signed [58:0] mulcsd_temp_6; // sfix59_En27
  wire signed [58:0] factoredcsd_temp_3; // sfix59_En30
  wire signed [61:0] mulcsd_temp_7; // sfix62_En30
  wire signed [58:0] factoredcsd_temp_4; // sfix59_En32
  wire signed [63:0] product16; // sfix64_En32
  wire signed [60:0] mulcsd_temp_8; // sfix61_En32
  wire signed [63:0] product15; // sfix64_En32
  wire signed [61:0] mulcsd_temp_9; // sfix62_En32
  wire signed [63:0] product14; // sfix64_En32
  wire signed [61:0] mulcsd_temp_10; // sfix62_En32
  wire signed [63:0] product13; // sfix64_En32
  wire signed [62:0] mulcsd_temp_11; // sfix63_En32
  wire signed [63:0] product12; // sfix64_En32
  wire signed [62:0] mulcsd_temp_12; // sfix63_En32
  wire signed [63:0] product11; // sfix64_En32
  wire signed [62:0] mulcsd_temp_13; // sfix63_En32
  wire signed [63:0] product10; // sfix64_En32
  wire signed [62:0] mulcsd_temp_14; // sfix63_En32
  wire signed [63:0] product9; // sfix64_En32
  wire signed [62:0] mulcsd_temp_15; // sfix63_En32
  wire signed [63:0] product8; // sfix64_En32
  wire signed [61:0] mulcsd_temp_16; // sfix62_En32
  wire signed [63:0] product7; // sfix64_En32
  wire signed [61:0] mulcsd_temp_17; // sfix62_En32
  wire signed [63:0] product6; // sfix64_En32
  wire signed [60:0] mulcsd_temp_18; // sfix61_En32
  wire signed [63:0] product5; // sfix64_En32
  wire signed [45:0] factoredcsd_temp_5; // sfix46_En14
  wire signed [45:0] mulcsd_temp_19; // sfix46_En14
  wire signed [53:0] factoredcsd_temp_6; // sfix54_En22
  wire signed [53:0] mulcsd_temp_20; // sfix54_En22
  wire signed [58:0] factoredcsd_temp_7; // sfix59_En27
  wire signed [58:0] mulcsd_temp_21; // sfix59_En27
  wire signed [58:0] factoredcsd_temp_8; // sfix59_En30
  wire signed [61:0] mulcsd_temp_22; // sfix62_En30
  wire signed [58:0] factoredcsd_temp_9; // sfix59_En32
  wire signed [63:0] product4; // sfix64_En32
  wire signed [58:0] mulcsd_temp_23; // sfix59_En32
  wire signed [63:0] product3; // sfix64_En32
  wire signed [56:0] mulcsd_temp_24; // sfix57_En32
  wire signed [63:0] product2; // sfix64_En32
  wire signed [54:0] mulcsd_temp_25; // sfix55_En32
  wire signed [63:0] product1; // sfix64_En32
  wire signed [51:0] mulcsd_temp_26; // sfix52_En32
  wire signed [68:0] sum_final; // sfix69_En32
  wire signed [68:0] sum1_1; // sfix69_En32
  wire signed [63:0] add_signext; // sfix64_En32
  wire signed [63:0] add_signext_1; // sfix64_En32
  wire signed [64:0] add_temp; // sfix65_En32
  reg  signed [68:0] sumpipe1_1; // sfix69_En32
  wire signed [68:0] sum1_2; // sfix69_En32
  wire signed [63:0] add_signext_2; // sfix64_En32
  wire signed [63:0] add_signext_3; // sfix64_En32
  wire signed [64:0] add_temp_1; // sfix65_En32
  reg  signed [68:0] sumpipe1_2; // sfix69_En32
  wire signed [68:0] sum1_3; // sfix69_En32
  wire signed [63:0] add_signext_4; // sfix64_En32
  wire signed [63:0] add_signext_5; // sfix64_En32
  wire signed [64:0] add_temp_2; // sfix65_En32
  reg  signed [68:0] sumpipe1_3; // sfix69_En32
  wire signed [68:0] sum1_4; // sfix69_En32
  wire signed [63:0] add_signext_6; // sfix64_En32
  wire signed [63:0] add_signext_7; // sfix64_En32
  wire signed [64:0] add_temp_3; // sfix65_En32
  reg  signed [68:0] sumpipe1_4; // sfix69_En32
  wire signed [68:0] sum1_5; // sfix69_En32
  wire signed [63:0] add_signext_8; // sfix64_En32
  wire signed [63:0] add_signext_9; // sfix64_En32
  wire signed [64:0] add_temp_4; // sfix65_En32
  reg  signed [68:0] sumpipe1_5; // sfix69_En32
  wire signed [68:0] sum1_6; // sfix69_En32
  wire signed [63:0] add_signext_10; // sfix64_En32
  wire signed [63:0] add_signext_11; // sfix64_En32
  wire signed [64:0] add_temp_5; // sfix65_En32
  reg  signed [68:0] sumpipe1_6; // sfix69_En32
  wire signed [68:0] sum1_7; // sfix69_En32
  wire signed [63:0] add_signext_12; // sfix64_En32
  wire signed [63:0] add_signext_13; // sfix64_En32
  wire signed [64:0] add_temp_6; // sfix65_En32
  reg  signed [68:0] sumpipe1_7; // sfix69_En32
  wire signed [68:0] sum1_8; // sfix69_En32
  wire signed [63:0] add_signext_14; // sfix64_En32
  wire signed [63:0] add_signext_15; // sfix64_En32
  wire signed [64:0] add_temp_7; // sfix65_En32
  reg  signed [68:0] sumpipe1_8; // sfix69_En32
  wire signed [68:0] sum1_9; // sfix69_En32
  wire signed [63:0] add_signext_16; // sfix64_En32
  wire signed [63:0] add_signext_17; // sfix64_En32
  wire signed [64:0] add_temp_8; // sfix65_En32
  reg  signed [68:0] sumpipe1_9; // sfix69_En32
  wire signed [68:0] sum1_10; // sfix69_En32
  wire signed [63:0] add_signext_18; // sfix64_En32
  wire signed [63:0] add_signext_19; // sfix64_En32
  wire signed [64:0] add_temp_9; // sfix65_En32
  reg  signed [68:0] sumpipe1_10; // sfix69_En32
  reg  signed [63:0] sumpipe1_11; // sfix64_En32
  wire signed [68:0] sum2_1; // sfix69_En32
  wire signed [68:0] add_signext_20; // sfix69_En32
  wire signed [68:0] add_signext_21; // sfix69_En32
  wire signed [69:0] add_temp_10; // sfix70_En32
  reg  signed [68:0] sumpipe2_1; // sfix69_En32
  wire signed [68:0] sum2_2; // sfix69_En32
  wire signed [68:0] add_signext_22; // sfix69_En32
  wire signed [68:0] add_signext_23; // sfix69_En32
  wire signed [69:0] add_temp_11; // sfix70_En32
  reg  signed [68:0] sumpipe2_2; // sfix69_En32
  wire signed [68:0] sum2_3; // sfix69_En32
  wire signed [68:0] add_signext_24; // sfix69_En32
  wire signed [68:0] add_signext_25; // sfix69_En32
  wire signed [69:0] add_temp_12; // sfix70_En32
  reg  signed [68:0] sumpipe2_3; // sfix69_En32
  wire signed [68:0] sum2_4; // sfix69_En32
  wire signed [68:0] add_signext_26; // sfix69_En32
  wire signed [68:0] add_signext_27; // sfix69_En32
  wire signed [69:0] add_temp_13; // sfix70_En32
  reg  signed [68:0] sumpipe2_4; // sfix69_En32
  wire signed [68:0] sum2_5; // sfix69_En32
  wire signed [68:0] add_signext_28; // sfix69_En32
  wire signed [68:0] add_signext_29; // sfix69_En32
  wire signed [69:0] add_temp_14; // sfix70_En32
  reg  signed [68:0] sumpipe2_5; // sfix69_En32
  reg  signed [63:0] sumpipe2_6; // sfix64_En32
  wire signed [68:0] sum3_1; // sfix69_En32
  wire signed [68:0] add_signext_30; // sfix69_En32
  wire signed [68:0] add_signext_31; // sfix69_En32
  wire signed [69:0] add_temp_15; // sfix70_En32
  reg  signed [68:0] sumpipe3_1; // sfix69_En32
  wire signed [68:0] sum3_2; // sfix69_En32
  wire signed [68:0] add_signext_32; // sfix69_En32
  wire signed [68:0] add_signext_33; // sfix69_En32
  wire signed [69:0] add_temp_16; // sfix70_En32
  reg  signed [68:0] sumpipe3_2; // sfix69_En32
  wire signed [68:0] sum3_3; // sfix69_En32
  wire signed [68:0] add_signext_34; // sfix69_En32
  wire signed [68:0] add_signext_35; // sfix69_En32
  wire signed [69:0] add_temp_17; // sfix70_En32
  reg  signed [68:0] sumpipe3_3; // sfix69_En32
  wire signed [68:0] sum4_1; // sfix69_En32
  wire signed [68:0] add_signext_36; // sfix69_En32
  wire signed [68:0] add_signext_37; // sfix69_En32
  wire signed [69:0] add_temp_18; // sfix70_En32
  reg  signed [68:0] sumpipe4_1; // sfix69_En32
  reg  signed [68:0] sumpipe4_2; // sfix69_En32
  wire signed [68:0] sum5_1; // sfix69_En32
  wire signed [68:0] add_signext_38; // sfix69_En32
  wire signed [68:0] add_signext_39; // sfix69_En32
  wire signed [69:0] add_temp_19; // sfix70_En32
  reg  signed [68:0] sumpipe5_1; // sfix69_En32
  reg  signed [68:0] output_register; // sfix69_En32

  // Block Statements
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
        delay_pipeline[18] <= 0;
        delay_pipeline[19] <= 0;
        delay_pipeline[20] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
        end
      end
    end // Delay_Pipeline_process


// For FCSD of 414514, optimizing to CSD due to lower cost
  assign mulcsd_temp = 
        $signed({delay_pipeline[20], 19'b0000000000000000000}) -
        $signed({delay_pipeline[20], 17'b00000000000000000}) +
        $signed({delay_pipeline[20], 14'b00000000000000}) +
        $signed({delay_pipeline[20], 12'b000000000000}) +
        $signed({delay_pipeline[20], 10'b0000000000}) -
        $signed({delay_pipeline[20], 8'b00000000}) +
        $signed({delay_pipeline[20], 6'b000000}) -
        $signed({delay_pipeline[20], 4'b0000}) +
        $signed({delay_pipeline[20], 1'b0});
  assign product21 = $signed({{12{mulcsd_temp[51]}}, mulcsd_temp});

// For FCSD of 3685776, optimizing to CSD due to lower cost
  assign mulcsd_temp_1 = 
        $signed({delay_pipeline[19], 22'b0000000000000000000000}) -
        $signed({delay_pipeline[19], 19'b0000000000000000000}) +
        $signed({delay_pipeline[19], 14'b00000000000000}) -
        $signed({delay_pipeline[19], 10'b0000000000}) +
        $signed({delay_pipeline[19], 9'b000000000}) -
        $signed({delay_pipeline[19], 7'b0000000}) +
        $signed({delay_pipeline[19], 4'b0000});
  assign product20 = $signed({{9{mulcsd_temp_1[54]}}, mulcsd_temp_1});

// For FCSD of 16719214, optimizing to CSD due to lower cost
  assign mulcsd_temp_2 = 
        $signed({delay_pipeline[18], 24'b000000000000000000000000}) -
        $signed({delay_pipeline[18], 16'b0000000000000000}) +
        $signed({delay_pipeline[18], 13'b0000000000000}) -
        $signed({delay_pipeline[18], 10'b0000000000}) +
        $signed({delay_pipeline[18], 8'b00000000}) +
        $signed({delay_pipeline[18], 7'b0000000}) -
        $signed({delay_pipeline[18], 5'b00000}) +
        $signed({delay_pipeline[18], 4'b0000}) -
        $signed({delay_pipeline[18], 1'b0});
  assign product19 = $signed({{7{mulcsd_temp_2[56]}}, mulcsd_temp_2});

// For FCSD of 52944882, optimizing to CSD due to lower cost
  assign mulcsd_temp_3 = 
        $signed({delay_pipeline[17], 26'b00000000000000000000000000}) -
        $signed({delay_pipeline[17], 24'b000000000000000000000000}) +
        $signed({delay_pipeline[17], 21'b000000000000000000000}) +
        $signed({delay_pipeline[17], 19'b0000000000000000000}) -
        $signed({delay_pipeline[17], 14'b00000000000000}) +
        $signed({delay_pipeline[17], 13'b0000000000000}) -
        $signed({delay_pipeline[17], 4'b0000}) +
        $signed({delay_pipeline[17], 1'b0});
  assign product18 = $signed({{5{mulcsd_temp_3[58]}}, mulcsd_temp_3});

// For FCSD of 130878155, using factorization: 11239 137 17 5 
// 
  assign mulcsd_temp_4 = 
        $signed({delay_pipeline[16], 13'b0000000000000}) +
        $signed({delay_pipeline[16], 11'b00000000000}) +
        $signed({delay_pipeline[16], 10'b0000000000}) -
        $signed({delay_pipeline[16], 5'b00000}) +
        $signed({delay_pipeline[16], 3'b000}) -
        delay_pipeline[16];
  assign factoredcsd_temp = mulcsd_temp_4;

  assign mulcsd_temp_5 = 
        $signed({factoredcsd_temp, 7'b0000000}) +
        $signed({factoredcsd_temp, 3'b000}) +
        factoredcsd_temp;
  assign factoredcsd_temp_1 = mulcsd_temp_5;

  assign mulcsd_temp_6 = 
        $signed({factoredcsd_temp_1, 4'b0000}) +
        factoredcsd_temp_1;
  assign factoredcsd_temp_2 = mulcsd_temp_6;

  assign mulcsd_temp_7 = 
        $signed({factoredcsd_temp_2, 2'b00}) +
        factoredcsd_temp_2;
  assign factoredcsd_temp_3 = mulcsd_temp_7[58:0];

  assign factoredcsd_temp_4 = factoredcsd_temp_3;

  assign product17 = $signed({{5{factoredcsd_temp_4[58]}}, factoredcsd_temp_4});

// For FCSD of 267131067, optimizing to CSD due to lower cost
  assign mulcsd_temp_8 = 
        $signed({delay_pipeline[15], 28'b0000000000000000000000000000}) -
        $signed({delay_pipeline[15], 21'b000000000000000000000}) +
        $signed({delay_pipeline[15], 20'b00000000000000000000}) -
        $signed({delay_pipeline[15], 18'b000000000000000000}) +
        $signed({delay_pipeline[15], 13'b0000000000000}) -
        $signed({delay_pipeline[15], 11'b00000000000}) +
        $signed({delay_pipeline[15], 7'b0000000}) +
        $signed({delay_pipeline[15], 6'b000000}) -
        $signed({delay_pipeline[15], 3'b000}) +
        $signed({delay_pipeline[15], 2'b00}) -
        delay_pipeline[15];
  assign product16 = $signed({{3{mulcsd_temp_8[60]}}, mulcsd_temp_8});

// For FCSD of 464985474, optimizing to CSD due to lower cost
  assign mulcsd_temp_9 = 
        $signed({delay_pipeline[14], 29'b00000000000000000000000000000}) -
        $signed({delay_pipeline[14], 27'b000000000000000000000000000}) +
        $signed({delay_pipeline[14], 26'b00000000000000000000000000}) -
        $signed({delay_pipeline[14], 23'b00000000000000000000000}) +
        $signed({delay_pipeline[14], 22'b0000000000000000000000}) -
        $signed({delay_pipeline[14], 20'b00000000000000000000}) +
        $signed({delay_pipeline[14], 19'b0000000000000000000}) -
        $signed({delay_pipeline[14], 16'b0000000000000000}) +
        $signed({delay_pipeline[14], 13'b0000000000000}) -
        $signed({delay_pipeline[14], 10'b0000000000}) +
        $signed({delay_pipeline[14], 9'b000000000}) -
        $signed({delay_pipeline[14], 7'b0000000}) +
        $signed({delay_pipeline[14], 1'b0});
  assign product15 = $signed({{2{mulcsd_temp_9[61]}}, mulcsd_temp_9});

// For FCSD of 704253061, optimizing to CSD due to lower cost
  assign mulcsd_temp_10 = 
        $signed({delay_pipeline[13], 29'b00000000000000000000000000000}) +
        $signed({delay_pipeline[13], 27'b000000000000000000000000000}) +
        $signed({delay_pipeline[13], 25'b0000000000000000000000000}) -
        $signed({delay_pipeline[13], 19'b0000000000000000000}) +
        $signed({delay_pipeline[13], 17'b00000000000000000}) +
        $signed({delay_pipeline[13], 12'b000000000000}) -
        $signed({delay_pipeline[13], 10'b0000000000}) +
        $signed({delay_pipeline[13], 7'b0000000}) +
        $signed({delay_pipeline[13], 2'b00}) +
        delay_pipeline[13];
  assign product14 = $signed({{2{mulcsd_temp_10[61]}}, mulcsd_temp_10});

// For FCSD of 940035196, optimizing to CSD due to lower cost
  assign mulcsd_temp_11 = 
        $signed({delay_pipeline[12], 30'b000000000000000000000000000000}) -
        $signed({delay_pipeline[12], 27'b000000000000000000000000000}) +
        $signed({delay_pipeline[12], 19'b0000000000000000000}) -
        $signed({delay_pipeline[12], 14'b00000000000000}) +
        $signed({delay_pipeline[12], 12'b000000000000}) -
        $signed({delay_pipeline[12], 10'b0000000000}) +
        $signed({delay_pipeline[12], 7'b0000000}) -
        $signed({delay_pipeline[12], 2'b00});
  assign product13 = $signed({{1{mulcsd_temp_11[62]}}, mulcsd_temp_11});

// For FCSD of 1114642257, optimizing to CSD due to lower cost
  assign mulcsd_temp_12 = 
        $signed({delay_pipeline[11], 30'b000000000000000000000000000000}) +
        $signed({delay_pipeline[11], 25'b0000000000000000000000000}) +
        $signed({delay_pipeline[11], 23'b00000000000000000000000}) -
        $signed({delay_pipeline[11], 20'b00000000000000000000}) +
        $signed({delay_pipeline[11], 12'b000000000000}) +
        $signed({delay_pipeline[11], 11'b00000000000}) -
        $signed({delay_pipeline[11], 8'b00000000}) +
        $signed({delay_pipeline[11], 6'b000000}) +
        $signed({delay_pipeline[11], 4'b0000}) +
        delay_pipeline[11];
  assign product12 = $signed({{1{mulcsd_temp_12[62]}}, mulcsd_temp_12});

// For FCSD of 1179227597, optimizing to CSD due to lower cost
  assign mulcsd_temp_13 = 
        $signed({delay_pipeline[10], 30'b000000000000000000000000000000}) +
        $signed({delay_pipeline[10], 27'b000000000000000000000000000}) -
        $signed({delay_pipeline[10], 25'b0000000000000000000000000}) +
        $signed({delay_pipeline[10], 22'b0000000000000000000000}) +
        $signed({delay_pipeline[10], 19'b0000000000000000000}) +
        $signed({delay_pipeline[10], 17'b00000000000000000}) -
        $signed({delay_pipeline[10], 15'b000000000000000}) +
        $signed({delay_pipeline[10], 12'b000000000000}) +
        $signed({delay_pipeline[10], 10'b0000000000}) +
        $signed({delay_pipeline[10], 9'b000000000}) -
        $signed({delay_pipeline[10], 6'b000000}) +
        $signed({delay_pipeline[10], 4'b0000}) -
        $signed({delay_pipeline[10], 2'b00}) +
        delay_pipeline[10];
  assign product11 = $signed({{1{mulcsd_temp_13[62]}}, mulcsd_temp_13});

// For FCSD of 1114642257, optimizing to CSD due to lower cost
  assign mulcsd_temp_14 = 
        $signed({delay_pipeline[9], 30'b000000000000000000000000000000}) +
        $signed({delay_pipeline[9], 25'b0000000000000000000000000}) +
        $signed({delay_pipeline[9], 23'b00000000000000000000000}) -
        $signed({delay_pipeline[9], 20'b00000000000000000000}) +
        $signed({delay_pipeline[9], 12'b000000000000}) +
        $signed({delay_pipeline[9], 11'b00000000000}) -
        $signed({delay_pipeline[9], 8'b00000000}) +
        $signed({delay_pipeline[9], 6'b000000}) +
        $signed({delay_pipeline[9], 4'b0000}) +
        delay_pipeline[9];
  assign product10 = $signed({{1{mulcsd_temp_14[62]}}, mulcsd_temp_14});

// For FCSD of 940035196, optimizing to CSD due to lower cost
  assign mulcsd_temp_15 = 
        $signed({delay_pipeline[8], 30'b000000000000000000000000000000}) -
        $signed({delay_pipeline[8], 27'b000000000000000000000000000}) +
        $signed({delay_pipeline[8], 19'b0000000000000000000}) -
        $signed({delay_pipeline[8], 14'b00000000000000}) +
        $signed({delay_pipeline[8], 12'b000000000000}) -
        $signed({delay_pipeline[8], 10'b0000000000}) +
        $signed({delay_pipeline[8], 7'b0000000}) -
        $signed({delay_pipeline[8], 2'b00});
  assign product9 = $signed({{1{mulcsd_temp_15[62]}}, mulcsd_temp_15});

// For FCSD of 704253061, optimizing to CSD due to lower cost
  assign mulcsd_temp_16 = 
        $signed({delay_pipeline[7], 29'b00000000000000000000000000000}) +
        $signed({delay_pipeline[7], 27'b000000000000000000000000000}) +
        $signed({delay_pipeline[7], 25'b0000000000000000000000000}) -
        $signed({delay_pipeline[7], 19'b0000000000000000000}) +
        $signed({delay_pipeline[7], 17'b00000000000000000}) +
        $signed({delay_pipeline[7], 12'b000000000000}) -
        $signed({delay_pipeline[7], 10'b0000000000}) +
        $signed({delay_pipeline[7], 7'b0000000}) +
        $signed({delay_pipeline[7], 2'b00}) +
        delay_pipeline[7];
  assign product8 = $signed({{2{mulcsd_temp_16[61]}}, mulcsd_temp_16});

// For FCSD of 464985474, optimizing to CSD due to lower cost
  assign mulcsd_temp_17 = 
        $signed({delay_pipeline[6], 29'b00000000000000000000000000000}) -
        $signed({delay_pipeline[6], 27'b000000000000000000000000000}) +
        $signed({delay_pipeline[6], 26'b00000000000000000000000000}) -
        $signed({delay_pipeline[6], 23'b00000000000000000000000}) +
        $signed({delay_pipeline[6], 22'b0000000000000000000000}) -
        $signed({delay_pipeline[6], 20'b00000000000000000000}) +
        $signed({delay_pipeline[6], 19'b0000000000000000000}) -
        $signed({delay_pipeline[6], 16'b0000000000000000}) +
        $signed({delay_pipeline[6], 13'b0000000000000}) -
        $signed({delay_pipeline[6], 10'b0000000000}) +
        $signed({delay_pipeline[6], 9'b000000000}) -
        $signed({delay_pipeline[6], 7'b0000000}) +
        $signed({delay_pipeline[6], 1'b0});
  assign product7 = $signed({{2{mulcsd_temp_17[61]}}, mulcsd_temp_17});

// For FCSD of 267131067, optimizing to CSD due to lower cost
  assign mulcsd_temp_18 = 
        $signed({delay_pipeline[5], 28'b0000000000000000000000000000}) -
        $signed({delay_pipeline[5], 21'b000000000000000000000}) +
        $signed({delay_pipeline[5], 20'b00000000000000000000}) -
        $signed({delay_pipeline[5], 18'b000000000000000000}) +
        $signed({delay_pipeline[5], 13'b0000000000000}) -
        $signed({delay_pipeline[5], 11'b00000000000}) +
        $signed({delay_pipeline[5], 7'b0000000}) +
        $signed({delay_pipeline[5], 6'b000000}) -
        $signed({delay_pipeline[5], 3'b000}) +
        $signed({delay_pipeline[5], 2'b00}) -
        delay_pipeline[5];
  assign product6 = $signed({{3{mulcsd_temp_18[60]}}, mulcsd_temp_18});

// For FCSD of 130878155, using factorization: 11239 137 17 5 
// 
  assign mulcsd_temp_19 = 
        $signed({delay_pipeline[4], 13'b0000000000000}) +
        $signed({delay_pipeline[4], 11'b00000000000}) +
        $signed({delay_pipeline[4], 10'b0000000000}) -
        $signed({delay_pipeline[4], 5'b00000}) +
        $signed({delay_pipeline[4], 3'b000}) -
        delay_pipeline[4];
  assign factoredcsd_temp_5 = mulcsd_temp_19;

  assign mulcsd_temp_20 = 
        $signed({factoredcsd_temp_5, 7'b0000000}) +
        $signed({factoredcsd_temp_5, 3'b000}) +
        factoredcsd_temp_5;
  assign factoredcsd_temp_6 = mulcsd_temp_20;

  assign mulcsd_temp_21 = 
        $signed({factoredcsd_temp_6, 4'b0000}) +
        factoredcsd_temp_6;
  assign factoredcsd_temp_7 = mulcsd_temp_21;

  assign mulcsd_temp_22 = 
        $signed({factoredcsd_temp_7, 2'b00}) +
        factoredcsd_temp_7;
  assign factoredcsd_temp_8 = mulcsd_temp_22[58:0];

  assign factoredcsd_temp_9 = factoredcsd_temp_8;

  assign product5 = $signed({{5{factoredcsd_temp_9[58]}}, factoredcsd_temp_9});

// For FCSD of 52944882, optimizing to CSD due to lower cost
  assign mulcsd_temp_23 = 
        $signed({delay_pipeline[3], 26'b00000000000000000000000000}) -
        $signed({delay_pipeline[3], 24'b000000000000000000000000}) +
        $signed({delay_pipeline[3], 21'b000000000000000000000}) +
        $signed({delay_pipeline[3], 19'b0000000000000000000}) -
        $signed({delay_pipeline[3], 14'b00000000000000}) +
        $signed({delay_pipeline[3], 13'b0000000000000}) -
        $signed({delay_pipeline[3], 4'b0000}) +
        $signed({delay_pipeline[3], 1'b0});
  assign product4 = $signed({{5{mulcsd_temp_23[58]}}, mulcsd_temp_23});

// For FCSD of 16719214, optimizing to CSD due to lower cost
  assign mulcsd_temp_24 = 
        $signed({delay_pipeline[2], 24'b000000000000000000000000}) -
        $signed({delay_pipeline[2], 16'b0000000000000000}) +
        $signed({delay_pipeline[2], 13'b0000000000000}) -
        $signed({delay_pipeline[2], 10'b0000000000}) +
        $signed({delay_pipeline[2], 8'b00000000}) +
        $signed({delay_pipeline[2], 7'b0000000}) -
        $signed({delay_pipeline[2], 5'b00000}) +
        $signed({delay_pipeline[2], 4'b0000}) -
        $signed({delay_pipeline[2], 1'b0});
  assign product3 = $signed({{7{mulcsd_temp_24[56]}}, mulcsd_temp_24});

// For FCSD of 3685776, optimizing to CSD due to lower cost
  assign mulcsd_temp_25 = 
        $signed({delay_pipeline[1], 22'b0000000000000000000000}) -
        $signed({delay_pipeline[1], 19'b0000000000000000000}) +
        $signed({delay_pipeline[1], 14'b00000000000000}) -
        $signed({delay_pipeline[1], 10'b0000000000}) +
        $signed({delay_pipeline[1], 9'b000000000}) -
        $signed({delay_pipeline[1], 7'b0000000}) +
        $signed({delay_pipeline[1], 4'b0000});
  assign product2 = $signed({{9{mulcsd_temp_25[54]}}, mulcsd_temp_25});

// For FCSD of 414514, optimizing to CSD due to lower cost
  assign mulcsd_temp_26 = 
        $signed({delay_pipeline[0], 19'b0000000000000000000}) -
        $signed({delay_pipeline[0], 17'b00000000000000000}) +
        $signed({delay_pipeline[0], 14'b00000000000000}) +
        $signed({delay_pipeline[0], 12'b000000000000}) +
        $signed({delay_pipeline[0], 10'b0000000000}) -
        $signed({delay_pipeline[0], 8'b00000000}) +
        $signed({delay_pipeline[0], 6'b000000}) -
        $signed({delay_pipeline[0], 4'b0000}) +
        $signed({delay_pipeline[0], 1'b0});
  assign product1 = $signed({{12{mulcsd_temp_26[51]}}, mulcsd_temp_26});

  assign add_signext = product21;
  assign add_signext_1 = product20;
  assign add_temp = add_signext + add_signext_1;
  assign sum1_1 = $signed({{4{add_temp[64]}}, add_temp});

  assign add_signext_2 = product19;
  assign add_signext_3 = product18;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sum1_2 = $signed({{4{add_temp_1[64]}}, add_temp_1});

  assign add_signext_4 = product17;
  assign add_signext_5 = product16;
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sum1_3 = $signed({{4{add_temp_2[64]}}, add_temp_2});

  assign add_signext_6 = product15;
  assign add_signext_7 = product14;
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sum1_4 = $signed({{4{add_temp_3[64]}}, add_temp_3});

  assign add_signext_8 = product13;
  assign add_signext_9 = product12;
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sum1_5 = $signed({{4{add_temp_4[64]}}, add_temp_4});

  assign add_signext_10 = product11;
  assign add_signext_11 = product10;
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sum1_6 = $signed({{4{add_temp_5[64]}}, add_temp_5});

  assign add_signext_12 = product9;
  assign add_signext_13 = product8;
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sum1_7 = $signed({{4{add_temp_6[64]}}, add_temp_6});

  assign add_signext_14 = product7;
  assign add_signext_15 = product6;
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sum1_8 = $signed({{4{add_temp_7[64]}}, add_temp_7});

  assign add_signext_16 = product5;
  assign add_signext_17 = product4;
  assign add_temp_8 = add_signext_16 + add_signext_17;
  assign sum1_9 = $signed({{4{add_temp_8[64]}}, add_temp_8});

  assign add_signext_18 = product3;
  assign add_signext_19 = product2;
  assign add_temp_9 = add_signext_18 + add_signext_19;
  assign sum1_10 = $signed({{4{add_temp_9[64]}}, add_temp_9});

  always @ (posedge clk or posedge reset)
    begin: temp_process1
      if (reset == 1'b1) begin
        sumpipe1_1 <= 0;
        sumpipe1_2 <= 0;
        sumpipe1_3 <= 0;
        sumpipe1_4 <= 0;
        sumpipe1_5 <= 0;
        sumpipe1_6 <= 0;
        sumpipe1_7 <= 0;
        sumpipe1_8 <= 0;
        sumpipe1_9 <= 0;
        sumpipe1_10 <= 0;
        sumpipe1_11 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe1_1 <= sum1_1;
          sumpipe1_2 <= sum1_2;
          sumpipe1_3 <= sum1_3;
          sumpipe1_4 <= sum1_4;
          sumpipe1_5 <= sum1_5;
          sumpipe1_6 <= sum1_6;
          sumpipe1_7 <= sum1_7;
          sumpipe1_8 <= sum1_8;
          sumpipe1_9 <= sum1_9;
          sumpipe1_10 <= sum1_10;
          sumpipe1_11 <= product1;
        end
      end
    end // temp_process1

  assign add_signext_20 = sumpipe1_1;
  assign add_signext_21 = sumpipe1_2;
  assign add_temp_10 = add_signext_20 + add_signext_21;
  assign sum2_1 = add_temp_10[68:0];

  assign add_signext_22 = sumpipe1_3;
  assign add_signext_23 = sumpipe1_4;
  assign add_temp_11 = add_signext_22 + add_signext_23;
  assign sum2_2 = add_temp_11[68:0];

  assign add_signext_24 = sumpipe1_5;
  assign add_signext_25 = sumpipe1_6;
  assign add_temp_12 = add_signext_24 + add_signext_25;
  assign sum2_3 = add_temp_12[68:0];

  assign add_signext_26 = sumpipe1_7;
  assign add_signext_27 = sumpipe1_8;
  assign add_temp_13 = add_signext_26 + add_signext_27;
  assign sum2_4 = add_temp_13[68:0];

  assign add_signext_28 = sumpipe1_9;
  assign add_signext_29 = sumpipe1_10;
  assign add_temp_14 = add_signext_28 + add_signext_29;
  assign sum2_5 = add_temp_14[68:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process2
      if (reset == 1'b1) begin
        sumpipe2_1 <= 0;
        sumpipe2_2 <= 0;
        sumpipe2_3 <= 0;
        sumpipe2_4 <= 0;
        sumpipe2_5 <= 0;
        sumpipe2_6 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe2_1 <= sum2_1;
          sumpipe2_2 <= sum2_2;
          sumpipe2_3 <= sum2_3;
          sumpipe2_4 <= sum2_4;
          sumpipe2_5 <= sum2_5;
          sumpipe2_6 <= sumpipe1_11;
        end
      end
    end // temp_process2

  assign add_signext_30 = sumpipe2_1;
  assign add_signext_31 = sumpipe2_2;
  assign add_temp_15 = add_signext_30 + add_signext_31;
  assign sum3_1 = add_temp_15[68:0];

  assign add_signext_32 = sumpipe2_3;
  assign add_signext_33 = sumpipe2_4;
  assign add_temp_16 = add_signext_32 + add_signext_33;
  assign sum3_2 = add_temp_16[68:0];

  assign add_signext_34 = sumpipe2_5;
  assign add_signext_35 = $signed({{5{sumpipe2_6[63]}}, sumpipe2_6});
  assign add_temp_17 = add_signext_34 + add_signext_35;
  assign sum3_3 = add_temp_17[68:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process3
      if (reset == 1'b1) begin
        sumpipe3_1 <= 0;
        sumpipe3_2 <= 0;
        sumpipe3_3 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe3_1 <= sum3_1;
          sumpipe3_2 <= sum3_2;
          sumpipe3_3 <= sum3_3;
        end
      end
    end // temp_process3

  assign add_signext_36 = sumpipe3_1;
  assign add_signext_37 = sumpipe3_2;
  assign add_temp_18 = add_signext_36 + add_signext_37;
  assign sum4_1 = add_temp_18[68:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process4
      if (reset == 1'b1) begin
        sumpipe4_1 <= 0;
        sumpipe4_2 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe4_1 <= sum4_1;
          sumpipe4_2 <= sumpipe3_3;
        end
      end
    end // temp_process4

  assign add_signext_38 = sumpipe4_1;
  assign add_signext_39 = sumpipe4_2;
  assign add_temp_19 = add_signext_38 + add_signext_39;
  assign sum5_1 = add_temp_19[68:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process5
      if (reset == 1'b1) begin
        sumpipe5_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe5_1 <= sum5_1;
        end
      end
    end // temp_process5

  assign sum_final = sumpipe5_1;

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= sum_final;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // fir_20_32b_fcsd

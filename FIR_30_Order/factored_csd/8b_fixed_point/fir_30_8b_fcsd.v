// -------------------------------------------------------------
//
// Module: fir_30_8b_fcsd
// Generated by MATLAB(R) 9.12 and Filter Design HDL Coder 3.1.11.
// Generated on: 2023-06-22 12:06:37
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// CoeffMultipliers: Factored-CSD
// FIRAdderStyle: tree
// OptimizeForHDL: on
// TargetDirectory: W:\Nikos\UTh\Σχεδίαση Επεξεργαστών\Project\FIR_30_Order\factored_csd\8b_fixed_point
// AddPipelineRegisters: on
// Name: fir_30_8b_fcsd
// InputDataType: numerictype(1,8,0)
// TargetLanguage: Verilog
// TestBenchName: fir_30_8b_fcsd_tb
// TestBenchStimulus: impulse step ramp chirp noise 

// Filter Specifications:
//
// Sample Rate     : 46 kHz
// Response        : Lowpass
// Specification   : N,Fp,Fst,Ap
// Stopband Edge   : 9.6 kHz
// Filter Order    : 30
// Passband Edge   : 8 kHz
// Passband Ripple : 60 dB
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 31
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s8,8 -> [-5.000000e-01 5.000000e-01)
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module fir_30_8b_fcsd
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [7:0] filter_in; //sfix8
  output  signed [20:0] filter_out; //sfix21_En8

////////////////////////////////////////////////////////////////
//Module Architecture: fir_30_8b_fcsd
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [7:0] coeff1 = 8'b00000000; //sfix8_En8
  parameter signed [7:0] coeff2 = 8'b00000000; //sfix8_En8
  parameter signed [7:0] coeff3 = 8'b00000001; //sfix8_En8
  parameter signed [7:0] coeff4 = 8'b00000001; //sfix8_En8
  parameter signed [7:0] coeff5 = 8'b00000001; //sfix8_En8
  parameter signed [7:0] coeff6 = 8'b11111110; //sfix8_En8
  parameter signed [7:0] coeff7 = 8'b11111000; //sfix8_En8
  parameter signed [7:0] coeff8 = 8'b11101110; //sfix8_En8
  parameter signed [7:0] coeff9 = 8'b11100001; //sfix8_En8
  parameter signed [7:0] coeff10 = 8'b11011000; //sfix8_En8
  parameter signed [7:0] coeff11 = 8'b11011001; //sfix8_En8
  parameter signed [7:0] coeff12 = 8'b11101001; //sfix8_En8
  parameter signed [7:0] coeff13 = 8'b00000110; //sfix8_En8
  parameter signed [7:0] coeff14 = 8'b00101010; //sfix8_En8
  parameter signed [7:0] coeff15 = 8'b01000111; //sfix8_En8
  parameter signed [7:0] coeff16 = 8'b01010011; //sfix8_En8
  parameter signed [7:0] coeff17 = 8'b01000111; //sfix8_En8
  parameter signed [7:0] coeff18 = 8'b00101010; //sfix8_En8
  parameter signed [7:0] coeff19 = 8'b00000110; //sfix8_En8
  parameter signed [7:0] coeff20 = 8'b11101001; //sfix8_En8
  parameter signed [7:0] coeff21 = 8'b11011001; //sfix8_En8
  parameter signed [7:0] coeff22 = 8'b11011000; //sfix8_En8
  parameter signed [7:0] coeff23 = 8'b11100001; //sfix8_En8
  parameter signed [7:0] coeff24 = 8'b11101110; //sfix8_En8
  parameter signed [7:0] coeff25 = 8'b11111000; //sfix8_En8
  parameter signed [7:0] coeff26 = 8'b11111110; //sfix8_En8
  parameter signed [7:0] coeff27 = 8'b00000001; //sfix8_En8
  parameter signed [7:0] coeff28 = 8'b00000001; //sfix8_En8
  parameter signed [7:0] coeff29 = 8'b00000001; //sfix8_En8
  parameter signed [7:0] coeff30 = 8'b00000000; //sfix8_En8
  parameter signed [7:0] coeff31 = 8'b00000000; //sfix8_En8

  // Signals
  reg  signed [7:0] delay_pipeline [0:30] ; // sfix8
  wire signed [15:0] product29; // sfix16_En8
  wire signed [15:0] product28; // sfix16_En8
  wire signed [15:0] product27; // sfix16_En8
  wire signed [15:0] product26; // sfix16_En8
  wire signed [8:0] mulpwr2_temp; // sfix9
  wire signed [15:0] product25; // sfix16_En8
  wire signed [8:0] mulpwr2_temp_1; // sfix9
  wire signed [15:0] product24; // sfix16_En8
  wire signed [12:0] mulcsd_temp; // sfix13_En8
  wire signed [15:0] product23; // sfix16_En8
  wire signed [13:0] mulcsd_temp_1; // sfix14_En8
  wire signed [15:0] product22; // sfix16_En8
  wire signed [13:0] mulcsd_temp_2; // sfix14_En8
  wire signed [15:0] product21; // sfix16_En8
  wire signed [13:0] mulcsd_temp_3; // sfix14_En8
  wire signed [15:0] product20; // sfix16_En8
  wire signed [12:0] mulcsd_temp_4; // sfix13_En8
  wire signed [15:0] product19; // sfix16_En8
  wire signed [11:0] mulcsd_temp_5; // sfix12_En8
  wire signed [15:0] product18; // sfix16_En8
  wire signed [13:0] mulcsd_temp_6; // sfix14_En8
  wire signed [15:0] product17; // sfix16_En8
  wire signed [14:0] mulcsd_temp_7; // sfix15_En8
  wire signed [15:0] product16; // sfix16_En8
  wire signed [14:0] mulcsd_temp_8; // sfix15_En8
  wire signed [15:0] product15; // sfix16_En8
  wire signed [14:0] mulcsd_temp_9; // sfix15_En8
  wire signed [15:0] product14; // sfix16_En8
  wire signed [13:0] mulcsd_temp_10; // sfix14_En8
  wire signed [15:0] product13; // sfix16_En8
  wire signed [11:0] mulcsd_temp_11; // sfix12_En8
  wire signed [15:0] product12; // sfix16_En8
  wire signed [12:0] mulcsd_temp_12; // sfix13_En8
  wire signed [15:0] product11; // sfix16_En8
  wire signed [13:0] mulcsd_temp_13; // sfix14_En8
  wire signed [15:0] product10; // sfix16_En8
  wire signed [13:0] mulcsd_temp_14; // sfix14_En8
  wire signed [15:0] product9; // sfix16_En8
  wire signed [13:0] mulcsd_temp_15; // sfix14_En8
  wire signed [15:0] product8; // sfix16_En8
  wire signed [12:0] mulcsd_temp_16; // sfix13_En8
  wire signed [15:0] product7; // sfix16_En8
  wire signed [8:0] mulpwr2_temp_2; // sfix9
  wire signed [15:0] product6; // sfix16_En8
  wire signed [8:0] mulpwr2_temp_3; // sfix9
  wire signed [15:0] product5; // sfix16_En8
  wire signed [15:0] product4; // sfix16_En8
  wire signed [15:0] product3; // sfix16_En8
  wire signed [20:0] sum_final; // sfix21_En8
  wire signed [20:0] sum1_1; // sfix21_En8
  wire signed [15:0] add_signext; // sfix16_En8
  wire signed [15:0] add_signext_1; // sfix16_En8
  wire signed [16:0] add_temp; // sfix17_En8
  reg  signed [20:0] sumpipe1_1; // sfix21_En8
  wire signed [20:0] sum1_2; // sfix21_En8
  wire signed [15:0] add_signext_2; // sfix16_En8
  wire signed [15:0] add_signext_3; // sfix16_En8
  wire signed [16:0] add_temp_1; // sfix17_En8
  reg  signed [20:0] sumpipe1_2; // sfix21_En8
  wire signed [20:0] sum1_3; // sfix21_En8
  wire signed [15:0] add_signext_4; // sfix16_En8
  wire signed [15:0] add_signext_5; // sfix16_En8
  wire signed [16:0] add_temp_2; // sfix17_En8
  reg  signed [20:0] sumpipe1_3; // sfix21_En8
  wire signed [20:0] sum1_4; // sfix21_En8
  wire signed [15:0] add_signext_6; // sfix16_En8
  wire signed [15:0] add_signext_7; // sfix16_En8
  wire signed [16:0] add_temp_3; // sfix17_En8
  reg  signed [20:0] sumpipe1_4; // sfix21_En8
  wire signed [20:0] sum1_5; // sfix21_En8
  wire signed [15:0] add_signext_8; // sfix16_En8
  wire signed [15:0] add_signext_9; // sfix16_En8
  wire signed [16:0] add_temp_4; // sfix17_En8
  reg  signed [20:0] sumpipe1_5; // sfix21_En8
  wire signed [20:0] sum1_6; // sfix21_En8
  wire signed [15:0] add_signext_10; // sfix16_En8
  wire signed [15:0] add_signext_11; // sfix16_En8
  wire signed [16:0] add_temp_5; // sfix17_En8
  reg  signed [20:0] sumpipe1_6; // sfix21_En8
  wire signed [20:0] sum1_7; // sfix21_En8
  wire signed [15:0] add_signext_12; // sfix16_En8
  wire signed [15:0] add_signext_13; // sfix16_En8
  wire signed [16:0] add_temp_6; // sfix17_En8
  reg  signed [20:0] sumpipe1_7; // sfix21_En8
  wire signed [20:0] sum1_8; // sfix21_En8
  wire signed [15:0] add_signext_14; // sfix16_En8
  wire signed [15:0] add_signext_15; // sfix16_En8
  wire signed [16:0] add_temp_7; // sfix17_En8
  reg  signed [20:0] sumpipe1_8; // sfix21_En8
  wire signed [20:0] sum1_9; // sfix21_En8
  wire signed [15:0] add_signext_16; // sfix16_En8
  wire signed [15:0] add_signext_17; // sfix16_En8
  wire signed [16:0] add_temp_8; // sfix17_En8
  reg  signed [20:0] sumpipe1_9; // sfix21_En8
  wire signed [20:0] sum1_10; // sfix21_En8
  wire signed [15:0] add_signext_18; // sfix16_En8
  wire signed [15:0] add_signext_19; // sfix16_En8
  wire signed [16:0] add_temp_9; // sfix17_En8
  reg  signed [20:0] sumpipe1_10; // sfix21_En8
  wire signed [20:0] sum1_11; // sfix21_En8
  wire signed [15:0] add_signext_20; // sfix16_En8
  wire signed [15:0] add_signext_21; // sfix16_En8
  wire signed [16:0] add_temp_10; // sfix17_En8
  reg  signed [20:0] sumpipe1_11; // sfix21_En8
  wire signed [20:0] sum1_12; // sfix21_En8
  wire signed [15:0] add_signext_22; // sfix16_En8
  wire signed [15:0] add_signext_23; // sfix16_En8
  wire signed [16:0] add_temp_11; // sfix17_En8
  reg  signed [20:0] sumpipe1_12; // sfix21_En8
  wire signed [20:0] sum1_13; // sfix21_En8
  wire signed [15:0] add_signext_24; // sfix16_En8
  wire signed [15:0] add_signext_25; // sfix16_En8
  wire signed [16:0] add_temp_12; // sfix17_En8
  reg  signed [20:0] sumpipe1_13; // sfix21_En8
  reg  signed [15:0] sumpipe1_14; // sfix16_En8
  wire signed [20:0] sum2_1; // sfix21_En8
  wire signed [20:0] add_signext_26; // sfix21_En8
  wire signed [20:0] add_signext_27; // sfix21_En8
  wire signed [21:0] add_temp_13; // sfix22_En8
  reg  signed [20:0] sumpipe2_1; // sfix21_En8
  wire signed [20:0] sum2_2; // sfix21_En8
  wire signed [20:0] add_signext_28; // sfix21_En8
  wire signed [20:0] add_signext_29; // sfix21_En8
  wire signed [21:0] add_temp_14; // sfix22_En8
  reg  signed [20:0] sumpipe2_2; // sfix21_En8
  wire signed [20:0] sum2_3; // sfix21_En8
  wire signed [20:0] add_signext_30; // sfix21_En8
  wire signed [20:0] add_signext_31; // sfix21_En8
  wire signed [21:0] add_temp_15; // sfix22_En8
  reg  signed [20:0] sumpipe2_3; // sfix21_En8
  wire signed [20:0] sum2_4; // sfix21_En8
  wire signed [20:0] add_signext_32; // sfix21_En8
  wire signed [20:0] add_signext_33; // sfix21_En8
  wire signed [21:0] add_temp_16; // sfix22_En8
  reg  signed [20:0] sumpipe2_4; // sfix21_En8
  wire signed [20:0] sum2_5; // sfix21_En8
  wire signed [20:0] add_signext_34; // sfix21_En8
  wire signed [20:0] add_signext_35; // sfix21_En8
  wire signed [21:0] add_temp_17; // sfix22_En8
  reg  signed [20:0] sumpipe2_5; // sfix21_En8
  wire signed [20:0] sum2_6; // sfix21_En8
  wire signed [20:0] add_signext_36; // sfix21_En8
  wire signed [20:0] add_signext_37; // sfix21_En8
  wire signed [21:0] add_temp_18; // sfix22_En8
  reg  signed [20:0] sumpipe2_6; // sfix21_En8
  wire signed [20:0] sum2_7; // sfix21_En8
  wire signed [20:0] add_signext_38; // sfix21_En8
  wire signed [20:0] add_signext_39; // sfix21_En8
  wire signed [21:0] add_temp_19; // sfix22_En8
  reg  signed [20:0] sumpipe2_7; // sfix21_En8
  wire signed [20:0] sum3_1; // sfix21_En8
  wire signed [20:0] add_signext_40; // sfix21_En8
  wire signed [20:0] add_signext_41; // sfix21_En8
  wire signed [21:0] add_temp_20; // sfix22_En8
  reg  signed [20:0] sumpipe3_1; // sfix21_En8
  wire signed [20:0] sum3_2; // sfix21_En8
  wire signed [20:0] add_signext_42; // sfix21_En8
  wire signed [20:0] add_signext_43; // sfix21_En8
  wire signed [21:0] add_temp_21; // sfix22_En8
  reg  signed [20:0] sumpipe3_2; // sfix21_En8
  wire signed [20:0] sum3_3; // sfix21_En8
  wire signed [20:0] add_signext_44; // sfix21_En8
  wire signed [20:0] add_signext_45; // sfix21_En8
  wire signed [21:0] add_temp_22; // sfix22_En8
  reg  signed [20:0] sumpipe3_3; // sfix21_En8
  reg  signed [20:0] sumpipe3_4; // sfix21_En8
  wire signed [20:0] sum4_1; // sfix21_En8
  wire signed [20:0] add_signext_46; // sfix21_En8
  wire signed [20:0] add_signext_47; // sfix21_En8
  wire signed [21:0] add_temp_23; // sfix22_En8
  reg  signed [20:0] sumpipe4_1; // sfix21_En8
  wire signed [20:0] sum4_2; // sfix21_En8
  wire signed [20:0] add_signext_48; // sfix21_En8
  wire signed [20:0] add_signext_49; // sfix21_En8
  wire signed [21:0] add_temp_24; // sfix22_En8
  reg  signed [20:0] sumpipe4_2; // sfix21_En8
  wire signed [20:0] sum5_1; // sfix21_En8
  wire signed [20:0] add_signext_50; // sfix21_En8
  wire signed [20:0] add_signext_51; // sfix21_En8
  wire signed [21:0] add_temp_25; // sfix22_En8
  reg  signed [20:0] sumpipe5_1; // sfix21_En8
  reg  signed [20:0] output_register; // sfix21_En8

  // Block Statements
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
        delay_pipeline[18] <= 0;
        delay_pipeline[19] <= 0;
        delay_pipeline[20] <= 0;
        delay_pipeline[21] <= 0;
        delay_pipeline[22] <= 0;
        delay_pipeline[23] <= 0;
        delay_pipeline[24] <= 0;
        delay_pipeline[25] <= 0;
        delay_pipeline[26] <= 0;
        delay_pipeline[27] <= 0;
        delay_pipeline[28] <= 0;
        delay_pipeline[29] <= 0;
        delay_pipeline[30] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
        end
      end
    end // Delay_Pipeline_process


  assign product29 = $signed({{8{delay_pipeline[28][7]}}, delay_pipeline[28]});

  assign product28 = $signed({{8{delay_pipeline[27][7]}}, delay_pipeline[27]});

  assign product27 = $signed({{8{delay_pipeline[26][7]}}, delay_pipeline[26]});

  assign mulpwr2_temp = (delay_pipeline[25]==8'b10000000) ? $signed({1'b0, delay_pipeline[25]}) : -delay_pipeline[25];

  assign product26 = $signed({mulpwr2_temp[8:0], 1'b0});

  assign mulpwr2_temp_1 = (delay_pipeline[24]==8'b10000000) ? $signed({1'b0, delay_pipeline[24]}) : -delay_pipeline[24];

  assign product25 = $signed({mulpwr2_temp_1[8:0], 3'b000});

// For FCSD of -18, optimizing to CSD due to lower cost
  assign mulcsd_temp = - (
        $signed({delay_pipeline[23], 4'b0000}) +
        $signed({delay_pipeline[23], 1'b0}));
  assign product24 = $signed({{3{mulcsd_temp[12]}}, mulcsd_temp});

// For FCSD of -31, optimizing to CSD due to lower cost
  assign mulcsd_temp_1 = - (
        $signed({delay_pipeline[22], 5'b00000}) -
        delay_pipeline[22]);
  assign product23 = $signed({{2{mulcsd_temp_1[13]}}, mulcsd_temp_1});

// For FCSD of -40, optimizing to CSD due to lower cost
  assign mulcsd_temp_2 = - (
        $signed({delay_pipeline[21], 5'b00000}) +
        $signed({delay_pipeline[21], 3'b000}));
  assign product22 = $signed({{2{mulcsd_temp_2[13]}}, mulcsd_temp_2});

// For FCSD of -39, optimizing to CSD due to lower cost
  assign mulcsd_temp_3 = - (
        $signed({delay_pipeline[20], 5'b00000}) +
        $signed({delay_pipeline[20], 3'b000}) -
        delay_pipeline[20]);
  assign product21 = $signed({{2{mulcsd_temp_3[13]}}, mulcsd_temp_3});

// For FCSD of -23, optimizing to CSD due to lower cost
  assign mulcsd_temp_4 = - (
        $signed({delay_pipeline[19], 4'b0000}) +
        $signed({delay_pipeline[19], 3'b000}) -
        delay_pipeline[19]);
  assign product20 = $signed({{3{mulcsd_temp_4[12]}}, mulcsd_temp_4});

// For FCSD of 6, optimizing to CSD due to lower cost
  assign mulcsd_temp_5 = 
        $signed({delay_pipeline[18], 3'b000}) -
        $signed({delay_pipeline[18], 1'b0});
  assign product19 = $signed({{4{mulcsd_temp_5[11]}}, mulcsd_temp_5});

// For FCSD of 42, optimizing to CSD due to lower cost
  assign mulcsd_temp_6 = 
        $signed({delay_pipeline[17], 5'b00000}) +
        $signed({delay_pipeline[17], 3'b000}) +
        $signed({delay_pipeline[17], 1'b0});
  assign product18 = $signed({{2{mulcsd_temp_6[13]}}, mulcsd_temp_6});

// For FCSD of 71, optimizing to CSD due to lower cost
  assign mulcsd_temp_7 = 
        $signed({delay_pipeline[16], 6'b000000}) +
        $signed({delay_pipeline[16], 3'b000}) -
        delay_pipeline[16];
  assign product17 = $signed({{1{mulcsd_temp_7[14]}}, mulcsd_temp_7});

// For FCSD of 83, optimizing to CSD due to lower cost
  assign mulcsd_temp_8 = 
        $signed({delay_pipeline[15], 6'b000000}) +
        $signed({delay_pipeline[15], 4'b0000}) +
        $signed({delay_pipeline[15], 2'b00}) -
        delay_pipeline[15];
  assign product16 = $signed({{1{mulcsd_temp_8[14]}}, mulcsd_temp_8});

// For FCSD of 71, optimizing to CSD due to lower cost
  assign mulcsd_temp_9 = 
        $signed({delay_pipeline[14], 6'b000000}) +
        $signed({delay_pipeline[14], 3'b000}) -
        delay_pipeline[14];
  assign product15 = $signed({{1{mulcsd_temp_9[14]}}, mulcsd_temp_9});

// For FCSD of 42, optimizing to CSD due to lower cost
  assign mulcsd_temp_10 = 
        $signed({delay_pipeline[13], 5'b00000}) +
        $signed({delay_pipeline[13], 3'b000}) +
        $signed({delay_pipeline[13], 1'b0});
  assign product14 = $signed({{2{mulcsd_temp_10[13]}}, mulcsd_temp_10});

// For FCSD of 6, optimizing to CSD due to lower cost
  assign mulcsd_temp_11 = 
        $signed({delay_pipeline[12], 3'b000}) -
        $signed({delay_pipeline[12], 1'b0});
  assign product13 = $signed({{4{mulcsd_temp_11[11]}}, mulcsd_temp_11});

// For FCSD of -23, optimizing to CSD due to lower cost
  assign mulcsd_temp_12 = - (
        $signed({delay_pipeline[11], 4'b0000}) +
        $signed({delay_pipeline[11], 3'b000}) -
        delay_pipeline[11]);
  assign product12 = $signed({{3{mulcsd_temp_12[12]}}, mulcsd_temp_12});

// For FCSD of -39, optimizing to CSD due to lower cost
  assign mulcsd_temp_13 = - (
        $signed({delay_pipeline[10], 5'b00000}) +
        $signed({delay_pipeline[10], 3'b000}) -
        delay_pipeline[10]);
  assign product11 = $signed({{2{mulcsd_temp_13[13]}}, mulcsd_temp_13});

// For FCSD of -40, optimizing to CSD due to lower cost
  assign mulcsd_temp_14 = - (
        $signed({delay_pipeline[9], 5'b00000}) +
        $signed({delay_pipeline[9], 3'b000}));
  assign product10 = $signed({{2{mulcsd_temp_14[13]}}, mulcsd_temp_14});

// For FCSD of -31, optimizing to CSD due to lower cost
  assign mulcsd_temp_15 = - (
        $signed({delay_pipeline[8], 5'b00000}) -
        delay_pipeline[8]);
  assign product9 = $signed({{2{mulcsd_temp_15[13]}}, mulcsd_temp_15});

// For FCSD of -18, optimizing to CSD due to lower cost
  assign mulcsd_temp_16 = - (
        $signed({delay_pipeline[7], 4'b0000}) +
        $signed({delay_pipeline[7], 1'b0}));
  assign product8 = $signed({{3{mulcsd_temp_16[12]}}, mulcsd_temp_16});

  assign mulpwr2_temp_2 = (delay_pipeline[6]==8'b10000000) ? $signed({1'b0, delay_pipeline[6]}) : -delay_pipeline[6];

  assign product7 = $signed({mulpwr2_temp_2[8:0], 3'b000});

  assign mulpwr2_temp_3 = (delay_pipeline[5]==8'b10000000) ? $signed({1'b0, delay_pipeline[5]}) : -delay_pipeline[5];

  assign product6 = $signed({mulpwr2_temp_3[8:0], 1'b0});

  assign product5 = $signed({{8{delay_pipeline[4][7]}}, delay_pipeline[4]});

  assign product4 = $signed({{8{delay_pipeline[3][7]}}, delay_pipeline[3]});

  assign product3 = $signed({{8{delay_pipeline[2][7]}}, delay_pipeline[2]});

  assign add_signext = product29;
  assign add_signext_1 = product28;
  assign add_temp = add_signext + add_signext_1;
  assign sum1_1 = $signed({{4{add_temp[16]}}, add_temp});

  assign add_signext_2 = product27;
  assign add_signext_3 = product26;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sum1_2 = $signed({{4{add_temp_1[16]}}, add_temp_1});

  assign add_signext_4 = product25;
  assign add_signext_5 = product24;
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sum1_3 = $signed({{4{add_temp_2[16]}}, add_temp_2});

  assign add_signext_6 = product23;
  assign add_signext_7 = product22;
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sum1_4 = $signed({{4{add_temp_3[16]}}, add_temp_3});

  assign add_signext_8 = product21;
  assign add_signext_9 = product20;
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sum1_5 = $signed({{4{add_temp_4[16]}}, add_temp_4});

  assign add_signext_10 = product19;
  assign add_signext_11 = product18;
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sum1_6 = $signed({{4{add_temp_5[16]}}, add_temp_5});

  assign add_signext_12 = product17;
  assign add_signext_13 = product16;
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sum1_7 = $signed({{4{add_temp_6[16]}}, add_temp_6});

  assign add_signext_14 = product15;
  assign add_signext_15 = product14;
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sum1_8 = $signed({{4{add_temp_7[16]}}, add_temp_7});

  assign add_signext_16 = product13;
  assign add_signext_17 = product12;
  assign add_temp_8 = add_signext_16 + add_signext_17;
  assign sum1_9 = $signed({{4{add_temp_8[16]}}, add_temp_8});

  assign add_signext_18 = product11;
  assign add_signext_19 = product10;
  assign add_temp_9 = add_signext_18 + add_signext_19;
  assign sum1_10 = $signed({{4{add_temp_9[16]}}, add_temp_9});

  assign add_signext_20 = product9;
  assign add_signext_21 = product8;
  assign add_temp_10 = add_signext_20 + add_signext_21;
  assign sum1_11 = $signed({{4{add_temp_10[16]}}, add_temp_10});

  assign add_signext_22 = product7;
  assign add_signext_23 = product6;
  assign add_temp_11 = add_signext_22 + add_signext_23;
  assign sum1_12 = $signed({{4{add_temp_11[16]}}, add_temp_11});

  assign add_signext_24 = product5;
  assign add_signext_25 = product4;
  assign add_temp_12 = add_signext_24 + add_signext_25;
  assign sum1_13 = $signed({{4{add_temp_12[16]}}, add_temp_12});

  always @ (posedge clk or posedge reset)
    begin: temp_process1
      if (reset == 1'b1) begin
        sumpipe1_1 <= 0;
        sumpipe1_2 <= 0;
        sumpipe1_3 <= 0;
        sumpipe1_4 <= 0;
        sumpipe1_5 <= 0;
        sumpipe1_6 <= 0;
        sumpipe1_7 <= 0;
        sumpipe1_8 <= 0;
        sumpipe1_9 <= 0;
        sumpipe1_10 <= 0;
        sumpipe1_11 <= 0;
        sumpipe1_12 <= 0;
        sumpipe1_13 <= 0;
        sumpipe1_14 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe1_1 <= sum1_1;
          sumpipe1_2 <= sum1_2;
          sumpipe1_3 <= sum1_3;
          sumpipe1_4 <= sum1_4;
          sumpipe1_5 <= sum1_5;
          sumpipe1_6 <= sum1_6;
          sumpipe1_7 <= sum1_7;
          sumpipe1_8 <= sum1_8;
          sumpipe1_9 <= sum1_9;
          sumpipe1_10 <= sum1_10;
          sumpipe1_11 <= sum1_11;
          sumpipe1_12 <= sum1_12;
          sumpipe1_13 <= sum1_13;
          sumpipe1_14 <= product3;
        end
      end
    end // temp_process1

  assign add_signext_26 = sumpipe1_1;
  assign add_signext_27 = sumpipe1_2;
  assign add_temp_13 = add_signext_26 + add_signext_27;
  assign sum2_1 = add_temp_13[20:0];

  assign add_signext_28 = sumpipe1_3;
  assign add_signext_29 = sumpipe1_4;
  assign add_temp_14 = add_signext_28 + add_signext_29;
  assign sum2_2 = add_temp_14[20:0];

  assign add_signext_30 = sumpipe1_5;
  assign add_signext_31 = sumpipe1_6;
  assign add_temp_15 = add_signext_30 + add_signext_31;
  assign sum2_3 = add_temp_15[20:0];

  assign add_signext_32 = sumpipe1_7;
  assign add_signext_33 = sumpipe1_8;
  assign add_temp_16 = add_signext_32 + add_signext_33;
  assign sum2_4 = add_temp_16[20:0];

  assign add_signext_34 = sumpipe1_9;
  assign add_signext_35 = sumpipe1_10;
  assign add_temp_17 = add_signext_34 + add_signext_35;
  assign sum2_5 = add_temp_17[20:0];

  assign add_signext_36 = sumpipe1_11;
  assign add_signext_37 = sumpipe1_12;
  assign add_temp_18 = add_signext_36 + add_signext_37;
  assign sum2_6 = add_temp_18[20:0];

  assign add_signext_38 = sumpipe1_13;
  assign add_signext_39 = $signed({{5{sumpipe1_14[15]}}, sumpipe1_14});
  assign add_temp_19 = add_signext_38 + add_signext_39;
  assign sum2_7 = add_temp_19[20:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process2
      if (reset == 1'b1) begin
        sumpipe2_1 <= 0;
        sumpipe2_2 <= 0;
        sumpipe2_3 <= 0;
        sumpipe2_4 <= 0;
        sumpipe2_5 <= 0;
        sumpipe2_6 <= 0;
        sumpipe2_7 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe2_1 <= sum2_1;
          sumpipe2_2 <= sum2_2;
          sumpipe2_3 <= sum2_3;
          sumpipe2_4 <= sum2_4;
          sumpipe2_5 <= sum2_5;
          sumpipe2_6 <= sum2_6;
          sumpipe2_7 <= sum2_7;
        end
      end
    end // temp_process2

  assign add_signext_40 = sumpipe2_1;
  assign add_signext_41 = sumpipe2_2;
  assign add_temp_20 = add_signext_40 + add_signext_41;
  assign sum3_1 = add_temp_20[20:0];

  assign add_signext_42 = sumpipe2_3;
  assign add_signext_43 = sumpipe2_4;
  assign add_temp_21 = add_signext_42 + add_signext_43;
  assign sum3_2 = add_temp_21[20:0];

  assign add_signext_44 = sumpipe2_5;
  assign add_signext_45 = sumpipe2_6;
  assign add_temp_22 = add_signext_44 + add_signext_45;
  assign sum3_3 = add_temp_22[20:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process3
      if (reset == 1'b1) begin
        sumpipe3_1 <= 0;
        sumpipe3_2 <= 0;
        sumpipe3_3 <= 0;
        sumpipe3_4 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe3_1 <= sum3_1;
          sumpipe3_2 <= sum3_2;
          sumpipe3_3 <= sum3_3;
          sumpipe3_4 <= sumpipe2_7;
        end
      end
    end // temp_process3

  assign add_signext_46 = sumpipe3_1;
  assign add_signext_47 = sumpipe3_2;
  assign add_temp_23 = add_signext_46 + add_signext_47;
  assign sum4_1 = add_temp_23[20:0];

  assign add_signext_48 = sumpipe3_3;
  assign add_signext_49 = sumpipe3_4;
  assign add_temp_24 = add_signext_48 + add_signext_49;
  assign sum4_2 = add_temp_24[20:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process4
      if (reset == 1'b1) begin
        sumpipe4_1 <= 0;
        sumpipe4_2 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe4_1 <= sum4_1;
          sumpipe4_2 <= sum4_2;
        end
      end
    end // temp_process4

  assign add_signext_50 = sumpipe4_1;
  assign add_signext_51 = sumpipe4_2;
  assign add_temp_25 = add_signext_50 + add_signext_51;
  assign sum5_1 = add_temp_25[20:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process5
      if (reset == 1'b1) begin
        sumpipe5_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe5_1 <= sum5_1;
        end
      end
    end // temp_process5

  assign sum_final = sumpipe5_1;

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= sum_final;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // fir_30_8b_fcsd

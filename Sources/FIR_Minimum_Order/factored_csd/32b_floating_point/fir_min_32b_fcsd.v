// -------------------------------------------------------------
//
// Module: fir_min_32b_fcsd
// Generated by MATLAB(R) 9.12 and Filter Design HDL Coder 3.1.11.
// Generated on: 2023-06-27 19:40:21
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// CoeffMultipliers: Factored-CSD
// FIRAdderStyle: tree
// OptimizeForHDL: on
// TargetDirectory: W:\Nikos\UTh\Σχεδίαση Επεξεργαστών\Project\FIR_Minimum_Order\factored_csd\32b_floating_point
// AddPipelineRegisters: on
// Name: fir_min_32b_fcsd
// InputDataType: numerictype(1,32,0)
// TargetLanguage: Verilog
// TestBenchName: fir_min_32b_fcsd_tb
// TestBenchStimulus: impulse step ramp chirp noise 

// Filter Specifications:
//
// Sample Rate     : 46 kHz
// Response        : Lowpass
// Specification   : N,Fp,Fst,Ap
// Stopband Edge   : 9.6 kHz
// Passband Ripple : 60 dB
// Filter Order    : 3
// Passband Edge   : 8 kHz
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 4
// Stable            : Yes
// Linear Phase      : Yes (Type 2)
// Arithmetic        : fixed
// Numerator         : s32,40 -> [-1.953125e-03 1.953125e-03)
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module fir_min_32b_fcsd
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [31:0] filter_in; //sfix32
  output  signed [65:0] filter_out; //sfix66_En40

////////////////////////////////////////////////////////////////
//Module Architecture: fir_min_32b_fcsd
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [31:0] coeff1 = 32'h3F3EA283; //sfix32_En40
  parameter signed [31:0] coeff2 = 32'h468599AF; //sfix32_En40
  parameter signed [31:0] coeff3 = 32'h468599AF; //sfix32_En40
  parameter signed [31:0] coeff4 = 32'h3F3EA283; //sfix32_En40

  // Signals
  reg  signed [31:0] delay_pipeline [0:3] ; // sfix32
  wire signed [63:0] product4; // sfix64_En40
  wire signed [62:0] mulcsd_temp; // sfix63_En40
  wire signed [63:0] product3; // sfix64_En40
  wire signed [55:0] factoredcsd_temp; // sfix56_En24
  wire signed [55:0] mulcsd_temp_1; // sfix56_En24
  wire signed [61:0] factoredcsd_temp_1; // sfix62_En30
  wire signed [61:0] mulcsd_temp_2; // sfix62_En30
  wire signed [62:0] factoredcsd_temp_2; // sfix63_En32
  wire signed [64:0] mulcsd_temp_3; // sfix65_En32
  wire signed [62:0] factoredcsd_temp_3; // sfix63_En40
  wire signed [63:0] product2; // sfix64_En40
  wire signed [55:0] factoredcsd_temp_4; // sfix56_En24
  wire signed [55:0] mulcsd_temp_4; // sfix56_En24
  wire signed [61:0] factoredcsd_temp_5; // sfix62_En30
  wire signed [61:0] mulcsd_temp_5; // sfix62_En30
  wire signed [62:0] factoredcsd_temp_6; // sfix63_En32
  wire signed [64:0] mulcsd_temp_6; // sfix65_En32
  wire signed [62:0] factoredcsd_temp_7; // sfix63_En40
  wire signed [63:0] product1; // sfix64_En40
  wire signed [62:0] mulcsd_temp_7; // sfix63_En40
  wire signed [65:0] sum_final; // sfix66_En40
  wire signed [65:0] sum1_1; // sfix66_En40
  wire signed [63:0] add_signext; // sfix64_En40
  wire signed [63:0] add_signext_1; // sfix64_En40
  wire signed [64:0] add_temp; // sfix65_En40
  reg  signed [65:0] sumpipe1_1; // sfix66_En40
  wire signed [65:0] sum1_2; // sfix66_En40
  wire signed [63:0] add_signext_2; // sfix64_En40
  wire signed [63:0] add_signext_3; // sfix64_En40
  wire signed [64:0] add_temp_1; // sfix65_En40
  reg  signed [65:0] sumpipe1_2; // sfix66_En40
  wire signed [65:0] sum2_1; // sfix66_En40
  wire signed [65:0] add_signext_4; // sfix66_En40
  wire signed [65:0] add_signext_5; // sfix66_En40
  wire signed [66:0] add_temp_2; // sfix67_En40
  reg  signed [65:0] sumpipe2_1; // sfix66_En40
  reg  signed [65:0] output_register; // sfix66_En40

  // Block Statements
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
        end
      end
    end // Delay_Pipeline_process


// For FCSD of 1061069443, optimizing to CSD due to lower cost
  assign mulcsd_temp = 
        $signed({delay_pipeline[3], 30'b000000000000000000000000000000}) -
        $signed({delay_pipeline[3], 24'b000000000000000000000000}) +
        $signed({delay_pipeline[3], 22'b0000000000000000000000}) -
        $signed({delay_pipeline[3], 17'b00000000000000000}) +
        $signed({delay_pipeline[3], 15'b000000000000000}) +
        $signed({delay_pipeline[3], 13'b0000000000000}) +
        $signed({delay_pipeline[3], 9'b000000000}) +
        $signed({delay_pipeline[3], 7'b0000000}) +
        $signed({delay_pipeline[3], 2'b00}) -
        delay_pipeline[3];
  assign product4 = $signed({{1{mulcsd_temp[62]}}, mulcsd_temp});

// For FCSD of 1183160751, using factorization: 8391211 47 3 
// 
  assign mulcsd_temp_1 = 
        $signed({delay_pipeline[2], 23'b00000000000000000000000}) +
        $signed({delay_pipeline[2], 11'b00000000000}) +
        $signed({delay_pipeline[2], 9'b000000000}) +
        $signed({delay_pipeline[2], 5'b00000}) +
        $signed({delay_pipeline[2], 3'b000}) +
        $signed({delay_pipeline[2], 2'b00}) -
        delay_pipeline[2];
  assign factoredcsd_temp = mulcsd_temp_1;

  assign mulcsd_temp_2 = 
        $signed({factoredcsd_temp, 5'b00000}) +
        $signed({factoredcsd_temp, 4'b0000}) -
        factoredcsd_temp;
  assign factoredcsd_temp_1 = mulcsd_temp_2;

  assign mulcsd_temp_3 = 
        $signed({factoredcsd_temp_1, 2'b00}) -
        factoredcsd_temp_1;
  assign factoredcsd_temp_2 = mulcsd_temp_3[62:0];

  assign factoredcsd_temp_3 = factoredcsd_temp_2;

  assign product3 = $signed({{1{factoredcsd_temp_3[62]}}, factoredcsd_temp_3});

// For FCSD of 1183160751, using factorization: 8391211 47 3 
// 
  assign mulcsd_temp_4 = 
        $signed({delay_pipeline[1], 23'b00000000000000000000000}) +
        $signed({delay_pipeline[1], 11'b00000000000}) +
        $signed({delay_pipeline[1], 9'b000000000}) +
        $signed({delay_pipeline[1], 5'b00000}) +
        $signed({delay_pipeline[1], 3'b000}) +
        $signed({delay_pipeline[1], 2'b00}) -
        delay_pipeline[1];
  assign factoredcsd_temp_4 = mulcsd_temp_4;

  assign mulcsd_temp_5 = 
        $signed({factoredcsd_temp_4, 5'b00000}) +
        $signed({factoredcsd_temp_4, 4'b0000}) -
        factoredcsd_temp_4;
  assign factoredcsd_temp_5 = mulcsd_temp_5;

  assign mulcsd_temp_6 = 
        $signed({factoredcsd_temp_5, 2'b00}) -
        factoredcsd_temp_5;
  assign factoredcsd_temp_6 = mulcsd_temp_6[62:0];

  assign factoredcsd_temp_7 = factoredcsd_temp_6;

  assign product2 = $signed({{1{factoredcsd_temp_7[62]}}, factoredcsd_temp_7});

// For FCSD of 1061069443, optimizing to CSD due to lower cost
  assign mulcsd_temp_7 = 
        $signed({delay_pipeline[0], 30'b000000000000000000000000000000}) -
        $signed({delay_pipeline[0], 24'b000000000000000000000000}) +
        $signed({delay_pipeline[0], 22'b0000000000000000000000}) -
        $signed({delay_pipeline[0], 17'b00000000000000000}) +
        $signed({delay_pipeline[0], 15'b000000000000000}) +
        $signed({delay_pipeline[0], 13'b0000000000000}) +
        $signed({delay_pipeline[0], 9'b000000000}) +
        $signed({delay_pipeline[0], 7'b0000000}) +
        $signed({delay_pipeline[0], 2'b00}) -
        delay_pipeline[0];
  assign product1 = $signed({{1{mulcsd_temp_7[62]}}, mulcsd_temp_7});

  assign add_signext = product4;
  assign add_signext_1 = product3;
  assign add_temp = add_signext + add_signext_1;
  assign sum1_1 = $signed({{1{add_temp[64]}}, add_temp});

  assign add_signext_2 = product2;
  assign add_signext_3 = product1;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sum1_2 = $signed({{1{add_temp_1[64]}}, add_temp_1});

  always @ (posedge clk or posedge reset)
    begin: temp_process1
      if (reset == 1'b1) begin
        sumpipe1_1 <= 0;
        sumpipe1_2 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe1_1 <= sum1_1;
          sumpipe1_2 <= sum1_2;
        end
      end
    end // temp_process1

  assign add_signext_4 = sumpipe1_1;
  assign add_signext_5 = sumpipe1_2;
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sum2_1 = add_temp_2[65:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process2
      if (reset == 1'b1) begin
        sumpipe2_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe2_1 <= sum2_1;
        end
      end
    end // temp_process2

  assign sum_final = sumpipe2_1;

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= sum_final;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // fir_min_32b_fcsd

// -------------------------------------------------------------
//
// Module: fir_minimum_fp
// Generated by MATLAB(R) 9.12 and Filter Design HDL Coder 3.1.11.
// Generated on: 2023-05-15 14:54:51
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// FIRAdderStyle: tree
// MultiplierInputPipeline: 1
// MultiplierOutputPipeline: 1
// OptimizeForHDL: on
// TargetDirectory: W:\Vivado_Projects\Sxediasi_Epeksergastwn_Project\FIR_Minimum_Order\32Bit floating point
// AddPipelineRegisters: on
// Name: fir_minimum_fp
// InputDataType: numerictype(1,64,0)
// TargetLanguage: Verilog
// TestBenchName: fir_minimum_fp_tb
// TestBenchStimulus: impulse step ramp chirp noise 

// Filter Specifications:
//
// Sample Rate     : 46 kHz
// Response        : Lowpass
// Specification   : Fp,Fst,Ap,Ast
// Stopband Atten. : 60 dB
// Stopband Edge   : 9.6 kHz
// Passband Edge   : 8 kHz
// Passband Ripple : 1 dB
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 61
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module fir_minimum_fp
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   [63:0] filter_in; //double
  output  [63:0] filter_out; //double

////////////////////////////////////////////////////////////////
//Module Architecture: fir_minimum_fp
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter coeff1 = 1.0900033192820485E-03; //double
  parameter coeff2 = 1.9185821115940519E-04; //double
  parameter coeff3 = -3.7659504357973649E-03; //double
  parameter coeff4 = -9.7278917834696318E-03; //double
  parameter coeff5 = -1.2709314567103525E-02; //double
  parameter coeff6 = -8.3190469413130276E-03; //double
  parameter coeff7 = 1.3775955811583566E-03; //double
  parameter coeff8 = 7.8622078707672877E-03; //double
  parameter coeff9 = 4.4283047473008680E-03; //double
  parameter coeff10 = -5.3079010623382130E-03; //double
  parameter coeff11 = -9.6863701151313625E-03; //double
  parameter coeff12 = -2.0274553648694082E-03; //double
  parameter coeff13 = 9.8725399787469373E-03; //double
  parameter coeff14 = 1.1038243176732148E-02; //double
  parameter coeff15 = -2.3926231766715341E-03; //double
  parameter coeff16 = -1.5601695572797857E-02; //double
  parameter coeff17 = -1.0729108595317175E-02; //double
  parameter coeff18 = 9.8718729473811894E-03; //double
  parameter coeff19 = 2.2049131511306361E-02; //double
  parameter coeff20 = 7.1009303467658436E-03; //double
  parameter coeff21 = -2.1642159416013360E-02; //double
  parameter coeff22 = -2.8454601115606489E-02; //double
  parameter coeff23 = 2.6474576630512712E-03; //double
  parameter coeff24 = 4.0491636848939284E-02; //double
  parameter coeff25 = 3.3949574340654869E-02; //double
  parameter coeff26 = -2.6075013034503082E-02; //double
  parameter coeff27 = -7.7975078542908041E-02; //double
  parameter coeff28 = -3.7651102368405832E-02; //double
  parameter coeff29 = 1.1387710901503253E-01; //double
  parameter coeff30 = 2.9266556755499207E-01; //double
  parameter coeff31 = 3.7228630426503523E-01; //double
  parameter coeff32 = 2.9266556755499207E-01; //double
  parameter coeff33 = 1.1387710901503253E-01; //double
  parameter coeff34 = -3.7651102368405832E-02; //double
  parameter coeff35 = -7.7975078542908041E-02; //double
  parameter coeff36 = -2.6075013034503082E-02; //double
  parameter coeff37 = 3.3949574340654869E-02; //double
  parameter coeff38 = 4.0491636848939284E-02; //double
  parameter coeff39 = 2.6474576630512712E-03; //double
  parameter coeff40 = -2.8454601115606489E-02; //double
  parameter coeff41 = -2.1642159416013360E-02; //double
  parameter coeff42 = 7.1009303467658436E-03; //double
  parameter coeff43 = 2.2049131511306361E-02; //double
  parameter coeff44 = 9.8718729473811894E-03; //double
  parameter coeff45 = -1.0729108595317175E-02; //double
  parameter coeff46 = -1.5601695572797857E-02; //double
  parameter coeff47 = -2.3926231766715341E-03; //double
  parameter coeff48 = 1.1038243176732148E-02; //double
  parameter coeff49 = 9.8725399787469373E-03; //double
  parameter coeff50 = -2.0274553648694082E-03; //double
  parameter coeff51 = -9.6863701151313625E-03; //double
  parameter coeff52 = -5.3079010623382130E-03; //double
  parameter coeff53 = 4.4283047473008680E-03; //double
  parameter coeff54 = 7.8622078707672877E-03; //double
  parameter coeff55 = 1.3775955811583566E-03; //double
  parameter coeff56 = -8.3190469413130276E-03; //double
  parameter coeff57 = -1.2709314567103525E-02; //double
  parameter coeff58 = -9.7278917834696318E-03; //double
  parameter coeff59 = -3.7659504357973649E-03; //double
  parameter coeff60 = 1.9185821115940519E-04; //double
  parameter coeff61 = 1.0900033192820485E-03; //double

  // Signals
  real delay_pipeline [0:60] ; // double
  real product61; // double
  real delay_pipeline_60_under_pipe; // double
  real coeff61_pipe; // double
  real product61_pipe; // double
  real product60; // double
  real delay_pipeline_59_under_pipe; // double
  real coeff60_pipe; // double
  real product60_pipe; // double
  real product59; // double
  real delay_pipeline_58_under_pipe; // double
  real coeff59_pipe; // double
  real product59_pipe; // double
  real product58; // double
  real delay_pipeline_57_under_pipe; // double
  real coeff58_pipe; // double
  real product58_pipe; // double
  real product57; // double
  real delay_pipeline_56_under_pipe; // double
  real coeff57_pipe; // double
  real product57_pipe; // double
  real product56; // double
  real delay_pipeline_55_under_pipe; // double
  real coeff56_pipe; // double
  real product56_pipe; // double
  real product55; // double
  real delay_pipeline_54_under_pipe; // double
  real coeff55_pipe; // double
  real product55_pipe; // double
  real product54; // double
  real delay_pipeline_53_under_pipe; // double
  real coeff54_pipe; // double
  real product54_pipe; // double
  real product53; // double
  real delay_pipeline_52_under_pipe; // double
  real coeff53_pipe; // double
  real product53_pipe; // double
  real product52; // double
  real delay_pipeline_51_under_pipe; // double
  real coeff52_pipe; // double
  real product52_pipe; // double
  real product51; // double
  real delay_pipeline_50_under_pipe; // double
  real coeff51_pipe; // double
  real product51_pipe; // double
  real product50; // double
  real delay_pipeline_49_under_pipe; // double
  real coeff50_pipe; // double
  real product50_pipe; // double
  real product49; // double
  real delay_pipeline_48_under_pipe; // double
  real coeff49_pipe; // double
  real product49_pipe; // double
  real product48; // double
  real delay_pipeline_47_under_pipe; // double
  real coeff48_pipe; // double
  real product48_pipe; // double
  real product47; // double
  real delay_pipeline_46_under_pipe; // double
  real coeff47_pipe; // double
  real product47_pipe; // double
  real product46; // double
  real delay_pipeline_45_under_pipe; // double
  real coeff46_pipe; // double
  real product46_pipe; // double
  real product45; // double
  real delay_pipeline_44_under_pipe; // double
  real coeff45_pipe; // double
  real product45_pipe; // double
  real product44; // double
  real delay_pipeline_43_under_pipe; // double
  real coeff44_pipe; // double
  real product44_pipe; // double
  real product43; // double
  real delay_pipeline_42_under_pipe; // double
  real coeff43_pipe; // double
  real product43_pipe; // double
  real product42; // double
  real delay_pipeline_41_under_pipe; // double
  real coeff42_pipe; // double
  real product42_pipe; // double
  real product41; // double
  real delay_pipeline_40_under_pipe; // double
  real coeff41_pipe; // double
  real product41_pipe; // double
  real product40; // double
  real delay_pipeline_39_under_pipe; // double
  real coeff40_pipe; // double
  real product40_pipe; // double
  real product39; // double
  real delay_pipeline_38_under_pipe; // double
  real coeff39_pipe; // double
  real product39_pipe; // double
  real product38; // double
  real delay_pipeline_37_under_pipe; // double
  real coeff38_pipe; // double
  real product38_pipe; // double
  real product37; // double
  real delay_pipeline_36_under_pipe; // double
  real coeff37_pipe; // double
  real product37_pipe; // double
  real product36; // double
  real delay_pipeline_35_under_pipe; // double
  real coeff36_pipe; // double
  real product36_pipe; // double
  real product35; // double
  real delay_pipeline_34_under_pipe; // double
  real coeff35_pipe; // double
  real product35_pipe; // double
  real product34; // double
  real delay_pipeline_33_under_pipe; // double
  real coeff34_pipe; // double
  real product34_pipe; // double
  real product33; // double
  real delay_pipeline_32_under_pipe; // double
  real coeff33_pipe; // double
  real product33_pipe; // double
  real product32; // double
  real delay_pipeline_31_under_pipe; // double
  real coeff32_pipe; // double
  real product32_pipe; // double
  real product31; // double
  real delay_pipeline_30_under_pipe; // double
  real coeff31_pipe; // double
  real product31_pipe; // double
  real product30; // double
  real delay_pipeline_29_under_pipe; // double
  real coeff30_pipe; // double
  real product30_pipe; // double
  real product29; // double
  real delay_pipeline_28_under_pipe; // double
  real coeff29_pipe; // double
  real product29_pipe; // double
  real product28; // double
  real delay_pipeline_27_under_pipe; // double
  real coeff28_pipe; // double
  real product28_pipe; // double
  real product27; // double
  real delay_pipeline_26_under_pipe; // double
  real coeff27_pipe; // double
  real product27_pipe; // double
  real product26; // double
  real delay_pipeline_25_under_pipe; // double
  real coeff26_pipe; // double
  real product26_pipe; // double
  real product25; // double
  real delay_pipeline_24_under_pipe; // double
  real coeff25_pipe; // double
  real product25_pipe; // double
  real product24; // double
  real delay_pipeline_23_under_pipe; // double
  real coeff24_pipe; // double
  real product24_pipe; // double
  real product23; // double
  real delay_pipeline_22_under_pipe; // double
  real coeff23_pipe; // double
  real product23_pipe; // double
  real product22; // double
  real delay_pipeline_21_under_pipe; // double
  real coeff22_pipe; // double
  real product22_pipe; // double
  real product21; // double
  real delay_pipeline_20_under_pipe; // double
  real coeff21_pipe; // double
  real product21_pipe; // double
  real product20; // double
  real delay_pipeline_19_under_pipe; // double
  real coeff20_pipe; // double
  real product20_pipe; // double
  real product19; // double
  real delay_pipeline_18_under_pipe; // double
  real coeff19_pipe; // double
  real product19_pipe; // double
  real product18; // double
  real delay_pipeline_17_under_pipe; // double
  real coeff18_pipe; // double
  real product18_pipe; // double
  real product17; // double
  real delay_pipeline_16_under_pipe; // double
  real coeff17_pipe; // double
  real product17_pipe; // double
  real product16; // double
  real delay_pipeline_15_under_pipe; // double
  real coeff16_pipe; // double
  real product16_pipe; // double
  real product15; // double
  real delay_pipeline_14_under_pipe; // double
  real coeff15_pipe; // double
  real product15_pipe; // double
  real product14; // double
  real delay_pipeline_13_under_pipe; // double
  real coeff14_pipe; // double
  real product14_pipe; // double
  real product13; // double
  real delay_pipeline_12_under_pipe; // double
  real coeff13_pipe; // double
  real product13_pipe; // double
  real product12; // double
  real delay_pipeline_11_under_pipe; // double
  real coeff12_pipe; // double
  real product12_pipe; // double
  real product11; // double
  real delay_pipeline_10_under_pipe; // double
  real coeff11_pipe; // double
  real product11_pipe; // double
  real product10; // double
  real delay_pipeline_9_under_pipe; // double
  real coeff10_pipe; // double
  real product10_pipe; // double
  real product9; // double
  real delay_pipeline_8_under_pipe; // double
  real coeff9_pipe; // double
  real product9_pipe; // double
  real product8; // double
  real delay_pipeline_7_under_pipe; // double
  real coeff8_pipe; // double
  real product8_pipe; // double
  real product7; // double
  real delay_pipeline_6_under_pipe; // double
  real coeff7_pipe; // double
  real product7_pipe; // double
  real product6; // double
  real delay_pipeline_5_under_pipe; // double
  real coeff6_pipe; // double
  real product6_pipe; // double
  real product5; // double
  real delay_pipeline_4_under_pipe; // double
  real coeff5_pipe; // double
  real product5_pipe; // double
  real product4; // double
  real delay_pipeline_3_under_pipe; // double
  real coeff4_pipe; // double
  real product4_pipe; // double
  real product3; // double
  real delay_pipeline_2_under_pipe; // double
  real coeff3_pipe; // double
  real product3_pipe; // double
  real product2; // double
  real delay_pipeline_1_under_pipe; // double
  real coeff2_pipe; // double
  real product2_pipe; // double
  real product1; // double
  real delay_pipeline_0_under_pipe; // double
  real coeff1_pipe; // double
  real product1_pipe; // double
  real sum_final; // double
  real sum1_1; // double
  real sumpipe1_1; // double
  real sum1_2; // double
  real sumpipe1_2; // double
  real sum1_3; // double
  real sumpipe1_3; // double
  real sum1_4; // double
  real sumpipe1_4; // double
  real sum1_5; // double
  real sumpipe1_5; // double
  real sum1_6; // double
  real sumpipe1_6; // double
  real sum1_7; // double
  real sumpipe1_7; // double
  real sum1_8; // double
  real sumpipe1_8; // double
  real sum1_9; // double
  real sumpipe1_9; // double
  real sum1_10; // double
  real sumpipe1_10; // double
  real sum1_11; // double
  real sumpipe1_11; // double
  real sum1_12; // double
  real sumpipe1_12; // double
  real sum1_13; // double
  real sumpipe1_13; // double
  real sum1_14; // double
  real sumpipe1_14; // double
  real sum1_15; // double
  real sumpipe1_15; // double
  real sum1_16; // double
  real sumpipe1_16; // double
  real sum1_17; // double
  real sumpipe1_17; // double
  real sum1_18; // double
  real sumpipe1_18; // double
  real sum1_19; // double
  real sumpipe1_19; // double
  real sum1_20; // double
  real sumpipe1_20; // double
  real sum1_21; // double
  real sumpipe1_21; // double
  real sum1_22; // double
  real sumpipe1_22; // double
  real sum1_23; // double
  real sumpipe1_23; // double
  real sum1_24; // double
  real sumpipe1_24; // double
  real sum1_25; // double
  real sumpipe1_25; // double
  real sum1_26; // double
  real sumpipe1_26; // double
  real sum1_27; // double
  real sumpipe1_27; // double
  real sum1_28; // double
  real sumpipe1_28; // double
  real sum1_29; // double
  real sumpipe1_29; // double
  real sum1_30; // double
  real sumpipe1_30; // double
  real sumpipe1_31; // double
  real sum2_1; // double
  real sumpipe2_1; // double
  real sum2_2; // double
  real sumpipe2_2; // double
  real sum2_3; // double
  real sumpipe2_3; // double
  real sum2_4; // double
  real sumpipe2_4; // double
  real sum2_5; // double
  real sumpipe2_5; // double
  real sum2_6; // double
  real sumpipe2_6; // double
  real sum2_7; // double
  real sumpipe2_7; // double
  real sum2_8; // double
  real sumpipe2_8; // double
  real sum2_9; // double
  real sumpipe2_9; // double
  real sum2_10; // double
  real sumpipe2_10; // double
  real sum2_11; // double
  real sumpipe2_11; // double
  real sum2_12; // double
  real sumpipe2_12; // double
  real sum2_13; // double
  real sumpipe2_13; // double
  real sum2_14; // double
  real sumpipe2_14; // double
  real sum2_15; // double
  real sumpipe2_15; // double
  real sumpipe2_16; // double
  real sum3_1; // double
  real sumpipe3_1; // double
  real sum3_2; // double
  real sumpipe3_2; // double
  real sum3_3; // double
  real sumpipe3_3; // double
  real sum3_4; // double
  real sumpipe3_4; // double
  real sum3_5; // double
  real sumpipe3_5; // double
  real sum3_6; // double
  real sumpipe3_6; // double
  real sum3_7; // double
  real sumpipe3_7; // double
  real sum3_8; // double
  real sumpipe3_8; // double
  real sum4_1; // double
  real sumpipe4_1; // double
  real sum4_2; // double
  real sumpipe4_2; // double
  real sum4_3; // double
  real sumpipe4_3; // double
  real sum4_4; // double
  real sumpipe4_4; // double
  real sum5_1; // double
  real sumpipe5_1; // double
  real sum5_2; // double
  real sumpipe5_2; // double
  real sum6_1; // double
  real sumpipe6_1; // double
  real output_typeconvert; // double
  real output_register; // double

  // Block Statements
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0.0000000000000000E+00;
        delay_pipeline[1] <= 0.0000000000000000E+00;
        delay_pipeline[2] <= 0.0000000000000000E+00;
        delay_pipeline[3] <= 0.0000000000000000E+00;
        delay_pipeline[4] <= 0.0000000000000000E+00;
        delay_pipeline[5] <= 0.0000000000000000E+00;
        delay_pipeline[6] <= 0.0000000000000000E+00;
        delay_pipeline[7] <= 0.0000000000000000E+00;
        delay_pipeline[8] <= 0.0000000000000000E+00;
        delay_pipeline[9] <= 0.0000000000000000E+00;
        delay_pipeline[10] <= 0.0000000000000000E+00;
        delay_pipeline[11] <= 0.0000000000000000E+00;
        delay_pipeline[12] <= 0.0000000000000000E+00;
        delay_pipeline[13] <= 0.0000000000000000E+00;
        delay_pipeline[14] <= 0.0000000000000000E+00;
        delay_pipeline[15] <= 0.0000000000000000E+00;
        delay_pipeline[16] <= 0.0000000000000000E+00;
        delay_pipeline[17] <= 0.0000000000000000E+00;
        delay_pipeline[18] <= 0.0000000000000000E+00;
        delay_pipeline[19] <= 0.0000000000000000E+00;
        delay_pipeline[20] <= 0.0000000000000000E+00;
        delay_pipeline[21] <= 0.0000000000000000E+00;
        delay_pipeline[22] <= 0.0000000000000000E+00;
        delay_pipeline[23] <= 0.0000000000000000E+00;
        delay_pipeline[24] <= 0.0000000000000000E+00;
        delay_pipeline[25] <= 0.0000000000000000E+00;
        delay_pipeline[26] <= 0.0000000000000000E+00;
        delay_pipeline[27] <= 0.0000000000000000E+00;
        delay_pipeline[28] <= 0.0000000000000000E+00;
        delay_pipeline[29] <= 0.0000000000000000E+00;
        delay_pipeline[30] <= 0.0000000000000000E+00;
        delay_pipeline[31] <= 0.0000000000000000E+00;
        delay_pipeline[32] <= 0.0000000000000000E+00;
        delay_pipeline[33] <= 0.0000000000000000E+00;
        delay_pipeline[34] <= 0.0000000000000000E+00;
        delay_pipeline[35] <= 0.0000000000000000E+00;
        delay_pipeline[36] <= 0.0000000000000000E+00;
        delay_pipeline[37] <= 0.0000000000000000E+00;
        delay_pipeline[38] <= 0.0000000000000000E+00;
        delay_pipeline[39] <= 0.0000000000000000E+00;
        delay_pipeline[40] <= 0.0000000000000000E+00;
        delay_pipeline[41] <= 0.0000000000000000E+00;
        delay_pipeline[42] <= 0.0000000000000000E+00;
        delay_pipeline[43] <= 0.0000000000000000E+00;
        delay_pipeline[44] <= 0.0000000000000000E+00;
        delay_pipeline[45] <= 0.0000000000000000E+00;
        delay_pipeline[46] <= 0.0000000000000000E+00;
        delay_pipeline[47] <= 0.0000000000000000E+00;
        delay_pipeline[48] <= 0.0000000000000000E+00;
        delay_pipeline[49] <= 0.0000000000000000E+00;
        delay_pipeline[50] <= 0.0000000000000000E+00;
        delay_pipeline[51] <= 0.0000000000000000E+00;
        delay_pipeline[52] <= 0.0000000000000000E+00;
        delay_pipeline[53] <= 0.0000000000000000E+00;
        delay_pipeline[54] <= 0.0000000000000000E+00;
        delay_pipeline[55] <= 0.0000000000000000E+00;
        delay_pipeline[56] <= 0.0000000000000000E+00;
        delay_pipeline[57] <= 0.0000000000000000E+00;
        delay_pipeline[58] <= 0.0000000000000000E+00;
        delay_pipeline[59] <= 0.0000000000000000E+00;
        delay_pipeline[60] <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= $bitstoreal(filter_in);
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
          delay_pipeline[31] <= delay_pipeline[30];
          delay_pipeline[32] <= delay_pipeline[31];
          delay_pipeline[33] <= delay_pipeline[32];
          delay_pipeline[34] <= delay_pipeline[33];
          delay_pipeline[35] <= delay_pipeline[34];
          delay_pipeline[36] <= delay_pipeline[35];
          delay_pipeline[37] <= delay_pipeline[36];
          delay_pipeline[38] <= delay_pipeline[37];
          delay_pipeline[39] <= delay_pipeline[38];
          delay_pipeline[40] <= delay_pipeline[39];
          delay_pipeline[41] <= delay_pipeline[40];
          delay_pipeline[42] <= delay_pipeline[41];
          delay_pipeline[43] <= delay_pipeline[42];
          delay_pipeline[44] <= delay_pipeline[43];
          delay_pipeline[45] <= delay_pipeline[44];
          delay_pipeline[46] <= delay_pipeline[45];
          delay_pipeline[47] <= delay_pipeline[46];
          delay_pipeline[48] <= delay_pipeline[47];
          delay_pipeline[49] <= delay_pipeline[48];
          delay_pipeline[50] <= delay_pipeline[49];
          delay_pipeline[51] <= delay_pipeline[50];
          delay_pipeline[52] <= delay_pipeline[51];
          delay_pipeline[53] <= delay_pipeline[52];
          delay_pipeline[54] <= delay_pipeline[53];
          delay_pipeline[55] <= delay_pipeline[54];
          delay_pipeline[56] <= delay_pipeline[55];
          delay_pipeline[57] <= delay_pipeline[56];
          delay_pipeline[58] <= delay_pipeline[57];
          delay_pipeline[59] <= delay_pipeline[58];
          delay_pipeline[60] <= delay_pipeline[59];
        end
      end
    end // Delay_Pipeline_process


  always @ (posedge clk or posedge reset)
    begin: temp_process1
      if (reset == 1'b1) begin
        delay_pipeline_60_under_pipe <= 0.0000000000000000E+00;
        coeff61_pipe <= 0.0000000000000000E+00;
        product61_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_60_under_pipe <= delay_pipeline[60];
          coeff61_pipe <= coeff61;

          product61_pipe <= delay_pipeline_60_under_pipe * coeff61_pipe;

        end
      end
    end // temp_process1

  always @* product61 <= product61_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process2
      if (reset == 1'b1) begin
        delay_pipeline_59_under_pipe <= 0.0000000000000000E+00;
        coeff60_pipe <= 0.0000000000000000E+00;
        product60_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_59_under_pipe <= delay_pipeline[59];
          coeff60_pipe <= coeff60;

          product60_pipe <= delay_pipeline_59_under_pipe * coeff60_pipe;

        end
      end
    end // temp_process2

  always @* product60 <= product60_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process3
      if (reset == 1'b1) begin
        delay_pipeline_58_under_pipe <= 0.0000000000000000E+00;
        coeff59_pipe <= 0.0000000000000000E+00;
        product59_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_58_under_pipe <= delay_pipeline[58];
          coeff59_pipe <= coeff59;

          product59_pipe <= delay_pipeline_58_under_pipe * coeff59_pipe;

        end
      end
    end // temp_process3

  always @* product59 <= product59_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process4
      if (reset == 1'b1) begin
        delay_pipeline_57_under_pipe <= 0.0000000000000000E+00;
        coeff58_pipe <= 0.0000000000000000E+00;
        product58_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_57_under_pipe <= delay_pipeline[57];
          coeff58_pipe <= coeff58;

          product58_pipe <= delay_pipeline_57_under_pipe * coeff58_pipe;

        end
      end
    end // temp_process4

  always @* product58 <= product58_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process5
      if (reset == 1'b1) begin
        delay_pipeline_56_under_pipe <= 0.0000000000000000E+00;
        coeff57_pipe <= 0.0000000000000000E+00;
        product57_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_56_under_pipe <= delay_pipeline[56];
          coeff57_pipe <= coeff57;

          product57_pipe <= delay_pipeline_56_under_pipe * coeff57_pipe;

        end
      end
    end // temp_process5

  always @* product57 <= product57_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process6
      if (reset == 1'b1) begin
        delay_pipeline_55_under_pipe <= 0.0000000000000000E+00;
        coeff56_pipe <= 0.0000000000000000E+00;
        product56_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_55_under_pipe <= delay_pipeline[55];
          coeff56_pipe <= coeff56;

          product56_pipe <= delay_pipeline_55_under_pipe * coeff56_pipe;

        end
      end
    end // temp_process6

  always @* product56 <= product56_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process7
      if (reset == 1'b1) begin
        delay_pipeline_54_under_pipe <= 0.0000000000000000E+00;
        coeff55_pipe <= 0.0000000000000000E+00;
        product55_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_54_under_pipe <= delay_pipeline[54];
          coeff55_pipe <= coeff55;

          product55_pipe <= delay_pipeline_54_under_pipe * coeff55_pipe;

        end
      end
    end // temp_process7

  always @* product55 <= product55_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process8
      if (reset == 1'b1) begin
        delay_pipeline_53_under_pipe <= 0.0000000000000000E+00;
        coeff54_pipe <= 0.0000000000000000E+00;
        product54_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_53_under_pipe <= delay_pipeline[53];
          coeff54_pipe <= coeff54;

          product54_pipe <= delay_pipeline_53_under_pipe * coeff54_pipe;

        end
      end
    end // temp_process8

  always @* product54 <= product54_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process9
      if (reset == 1'b1) begin
        delay_pipeline_52_under_pipe <= 0.0000000000000000E+00;
        coeff53_pipe <= 0.0000000000000000E+00;
        product53_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_52_under_pipe <= delay_pipeline[52];
          coeff53_pipe <= coeff53;

          product53_pipe <= delay_pipeline_52_under_pipe * coeff53_pipe;

        end
      end
    end // temp_process9

  always @* product53 <= product53_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process10
      if (reset == 1'b1) begin
        delay_pipeline_51_under_pipe <= 0.0000000000000000E+00;
        coeff52_pipe <= 0.0000000000000000E+00;
        product52_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_51_under_pipe <= delay_pipeline[51];
          coeff52_pipe <= coeff52;

          product52_pipe <= delay_pipeline_51_under_pipe * coeff52_pipe;

        end
      end
    end // temp_process10

  always @* product52 <= product52_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process11
      if (reset == 1'b1) begin
        delay_pipeline_50_under_pipe <= 0.0000000000000000E+00;
        coeff51_pipe <= 0.0000000000000000E+00;
        product51_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_50_under_pipe <= delay_pipeline[50];
          coeff51_pipe <= coeff51;

          product51_pipe <= delay_pipeline_50_under_pipe * coeff51_pipe;

        end
      end
    end // temp_process11

  always @* product51 <= product51_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process12
      if (reset == 1'b1) begin
        delay_pipeline_49_under_pipe <= 0.0000000000000000E+00;
        coeff50_pipe <= 0.0000000000000000E+00;
        product50_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_49_under_pipe <= delay_pipeline[49];
          coeff50_pipe <= coeff50;

          product50_pipe <= delay_pipeline_49_under_pipe * coeff50_pipe;

        end
      end
    end // temp_process12

  always @* product50 <= product50_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process13
      if (reset == 1'b1) begin
        delay_pipeline_48_under_pipe <= 0.0000000000000000E+00;
        coeff49_pipe <= 0.0000000000000000E+00;
        product49_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_48_under_pipe <= delay_pipeline[48];
          coeff49_pipe <= coeff49;

          product49_pipe <= delay_pipeline_48_under_pipe * coeff49_pipe;

        end
      end
    end // temp_process13

  always @* product49 <= product49_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process14
      if (reset == 1'b1) begin
        delay_pipeline_47_under_pipe <= 0.0000000000000000E+00;
        coeff48_pipe <= 0.0000000000000000E+00;
        product48_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_47_under_pipe <= delay_pipeline[47];
          coeff48_pipe <= coeff48;

          product48_pipe <= delay_pipeline_47_under_pipe * coeff48_pipe;

        end
      end
    end // temp_process14

  always @* product48 <= product48_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process15
      if (reset == 1'b1) begin
        delay_pipeline_46_under_pipe <= 0.0000000000000000E+00;
        coeff47_pipe <= 0.0000000000000000E+00;
        product47_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_46_under_pipe <= delay_pipeline[46];
          coeff47_pipe <= coeff47;

          product47_pipe <= delay_pipeline_46_under_pipe * coeff47_pipe;

        end
      end
    end // temp_process15

  always @* product47 <= product47_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process16
      if (reset == 1'b1) begin
        delay_pipeline_45_under_pipe <= 0.0000000000000000E+00;
        coeff46_pipe <= 0.0000000000000000E+00;
        product46_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_45_under_pipe <= delay_pipeline[45];
          coeff46_pipe <= coeff46;

          product46_pipe <= delay_pipeline_45_under_pipe * coeff46_pipe;

        end
      end
    end // temp_process16

  always @* product46 <= product46_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process17
      if (reset == 1'b1) begin
        delay_pipeline_44_under_pipe <= 0.0000000000000000E+00;
        coeff45_pipe <= 0.0000000000000000E+00;
        product45_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_44_under_pipe <= delay_pipeline[44];
          coeff45_pipe <= coeff45;

          product45_pipe <= delay_pipeline_44_under_pipe * coeff45_pipe;

        end
      end
    end // temp_process17

  always @* product45 <= product45_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process18
      if (reset == 1'b1) begin
        delay_pipeline_43_under_pipe <= 0.0000000000000000E+00;
        coeff44_pipe <= 0.0000000000000000E+00;
        product44_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_43_under_pipe <= delay_pipeline[43];
          coeff44_pipe <= coeff44;

          product44_pipe <= delay_pipeline_43_under_pipe * coeff44_pipe;

        end
      end
    end // temp_process18

  always @* product44 <= product44_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process19
      if (reset == 1'b1) begin
        delay_pipeline_42_under_pipe <= 0.0000000000000000E+00;
        coeff43_pipe <= 0.0000000000000000E+00;
        product43_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_42_under_pipe <= delay_pipeline[42];
          coeff43_pipe <= coeff43;

          product43_pipe <= delay_pipeline_42_under_pipe * coeff43_pipe;

        end
      end
    end // temp_process19

  always @* product43 <= product43_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process20
      if (reset == 1'b1) begin
        delay_pipeline_41_under_pipe <= 0.0000000000000000E+00;
        coeff42_pipe <= 0.0000000000000000E+00;
        product42_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_41_under_pipe <= delay_pipeline[41];
          coeff42_pipe <= coeff42;

          product42_pipe <= delay_pipeline_41_under_pipe * coeff42_pipe;

        end
      end
    end // temp_process20

  always @* product42 <= product42_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process21
      if (reset == 1'b1) begin
        delay_pipeline_40_under_pipe <= 0.0000000000000000E+00;
        coeff41_pipe <= 0.0000000000000000E+00;
        product41_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_40_under_pipe <= delay_pipeline[40];
          coeff41_pipe <= coeff41;

          product41_pipe <= delay_pipeline_40_under_pipe * coeff41_pipe;

        end
      end
    end // temp_process21

  always @* product41 <= product41_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process22
      if (reset == 1'b1) begin
        delay_pipeline_39_under_pipe <= 0.0000000000000000E+00;
        coeff40_pipe <= 0.0000000000000000E+00;
        product40_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_39_under_pipe <= delay_pipeline[39];
          coeff40_pipe <= coeff40;

          product40_pipe <= delay_pipeline_39_under_pipe * coeff40_pipe;

        end
      end
    end // temp_process22

  always @* product40 <= product40_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process23
      if (reset == 1'b1) begin
        delay_pipeline_38_under_pipe <= 0.0000000000000000E+00;
        coeff39_pipe <= 0.0000000000000000E+00;
        product39_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_38_under_pipe <= delay_pipeline[38];
          coeff39_pipe <= coeff39;

          product39_pipe <= delay_pipeline_38_under_pipe * coeff39_pipe;

        end
      end
    end // temp_process23

  always @* product39 <= product39_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process24
      if (reset == 1'b1) begin
        delay_pipeline_37_under_pipe <= 0.0000000000000000E+00;
        coeff38_pipe <= 0.0000000000000000E+00;
        product38_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_37_under_pipe <= delay_pipeline[37];
          coeff38_pipe <= coeff38;

          product38_pipe <= delay_pipeline_37_under_pipe * coeff38_pipe;

        end
      end
    end // temp_process24

  always @* product38 <= product38_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process25
      if (reset == 1'b1) begin
        delay_pipeline_36_under_pipe <= 0.0000000000000000E+00;
        coeff37_pipe <= 0.0000000000000000E+00;
        product37_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_36_under_pipe <= delay_pipeline[36];
          coeff37_pipe <= coeff37;

          product37_pipe <= delay_pipeline_36_under_pipe * coeff37_pipe;

        end
      end
    end // temp_process25

  always @* product37 <= product37_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process26
      if (reset == 1'b1) begin
        delay_pipeline_35_under_pipe <= 0.0000000000000000E+00;
        coeff36_pipe <= 0.0000000000000000E+00;
        product36_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_35_under_pipe <= delay_pipeline[35];
          coeff36_pipe <= coeff36;

          product36_pipe <= delay_pipeline_35_under_pipe * coeff36_pipe;

        end
      end
    end // temp_process26

  always @* product36 <= product36_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process27
      if (reset == 1'b1) begin
        delay_pipeline_34_under_pipe <= 0.0000000000000000E+00;
        coeff35_pipe <= 0.0000000000000000E+00;
        product35_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_34_under_pipe <= delay_pipeline[34];
          coeff35_pipe <= coeff35;

          product35_pipe <= delay_pipeline_34_under_pipe * coeff35_pipe;

        end
      end
    end // temp_process27

  always @* product35 <= product35_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process28
      if (reset == 1'b1) begin
        delay_pipeline_33_under_pipe <= 0.0000000000000000E+00;
        coeff34_pipe <= 0.0000000000000000E+00;
        product34_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_33_under_pipe <= delay_pipeline[33];
          coeff34_pipe <= coeff34;

          product34_pipe <= delay_pipeline_33_under_pipe * coeff34_pipe;

        end
      end
    end // temp_process28

  always @* product34 <= product34_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process29
      if (reset == 1'b1) begin
        delay_pipeline_32_under_pipe <= 0.0000000000000000E+00;
        coeff33_pipe <= 0.0000000000000000E+00;
        product33_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_32_under_pipe <= delay_pipeline[32];
          coeff33_pipe <= coeff33;

          product33_pipe <= delay_pipeline_32_under_pipe * coeff33_pipe;

        end
      end
    end // temp_process29

  always @* product33 <= product33_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process30
      if (reset == 1'b1) begin
        delay_pipeline_31_under_pipe <= 0.0000000000000000E+00;
        coeff32_pipe <= 0.0000000000000000E+00;
        product32_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_31_under_pipe <= delay_pipeline[31];
          coeff32_pipe <= coeff32;

          product32_pipe <= delay_pipeline_31_under_pipe * coeff32_pipe;

        end
      end
    end // temp_process30

  always @* product32 <= product32_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process31
      if (reset == 1'b1) begin
        delay_pipeline_30_under_pipe <= 0.0000000000000000E+00;
        coeff31_pipe <= 0.0000000000000000E+00;
        product31_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_30_under_pipe <= delay_pipeline[30];
          coeff31_pipe <= coeff31;

          product31_pipe <= delay_pipeline_30_under_pipe * coeff31_pipe;

        end
      end
    end // temp_process31

  always @* product31 <= product31_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process32
      if (reset == 1'b1) begin
        delay_pipeline_29_under_pipe <= 0.0000000000000000E+00;
        coeff30_pipe <= 0.0000000000000000E+00;
        product30_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_29_under_pipe <= delay_pipeline[29];
          coeff30_pipe <= coeff30;

          product30_pipe <= delay_pipeline_29_under_pipe * coeff30_pipe;

        end
      end
    end // temp_process32

  always @* product30 <= product30_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process33
      if (reset == 1'b1) begin
        delay_pipeline_28_under_pipe <= 0.0000000000000000E+00;
        coeff29_pipe <= 0.0000000000000000E+00;
        product29_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_28_under_pipe <= delay_pipeline[28];
          coeff29_pipe <= coeff29;

          product29_pipe <= delay_pipeline_28_under_pipe * coeff29_pipe;

        end
      end
    end // temp_process33

  always @* product29 <= product29_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process34
      if (reset == 1'b1) begin
        delay_pipeline_27_under_pipe <= 0.0000000000000000E+00;
        coeff28_pipe <= 0.0000000000000000E+00;
        product28_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_27_under_pipe <= delay_pipeline[27];
          coeff28_pipe <= coeff28;

          product28_pipe <= delay_pipeline_27_under_pipe * coeff28_pipe;

        end
      end
    end // temp_process34

  always @* product28 <= product28_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process35
      if (reset == 1'b1) begin
        delay_pipeline_26_under_pipe <= 0.0000000000000000E+00;
        coeff27_pipe <= 0.0000000000000000E+00;
        product27_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_26_under_pipe <= delay_pipeline[26];
          coeff27_pipe <= coeff27;

          product27_pipe <= delay_pipeline_26_under_pipe * coeff27_pipe;

        end
      end
    end // temp_process35

  always @* product27 <= product27_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process36
      if (reset == 1'b1) begin
        delay_pipeline_25_under_pipe <= 0.0000000000000000E+00;
        coeff26_pipe <= 0.0000000000000000E+00;
        product26_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_25_under_pipe <= delay_pipeline[25];
          coeff26_pipe <= coeff26;

          product26_pipe <= delay_pipeline_25_under_pipe * coeff26_pipe;

        end
      end
    end // temp_process36

  always @* product26 <= product26_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process37
      if (reset == 1'b1) begin
        delay_pipeline_24_under_pipe <= 0.0000000000000000E+00;
        coeff25_pipe <= 0.0000000000000000E+00;
        product25_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_24_under_pipe <= delay_pipeline[24];
          coeff25_pipe <= coeff25;

          product25_pipe <= delay_pipeline_24_under_pipe * coeff25_pipe;

        end
      end
    end // temp_process37

  always @* product25 <= product25_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process38
      if (reset == 1'b1) begin
        delay_pipeline_23_under_pipe <= 0.0000000000000000E+00;
        coeff24_pipe <= 0.0000000000000000E+00;
        product24_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_23_under_pipe <= delay_pipeline[23];
          coeff24_pipe <= coeff24;

          product24_pipe <= delay_pipeline_23_under_pipe * coeff24_pipe;

        end
      end
    end // temp_process38

  always @* product24 <= product24_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process39
      if (reset == 1'b1) begin
        delay_pipeline_22_under_pipe <= 0.0000000000000000E+00;
        coeff23_pipe <= 0.0000000000000000E+00;
        product23_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_22_under_pipe <= delay_pipeline[22];
          coeff23_pipe <= coeff23;

          product23_pipe <= delay_pipeline_22_under_pipe * coeff23_pipe;

        end
      end
    end // temp_process39

  always @* product23 <= product23_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process40
      if (reset == 1'b1) begin
        delay_pipeline_21_under_pipe <= 0.0000000000000000E+00;
        coeff22_pipe <= 0.0000000000000000E+00;
        product22_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_21_under_pipe <= delay_pipeline[21];
          coeff22_pipe <= coeff22;

          product22_pipe <= delay_pipeline_21_under_pipe * coeff22_pipe;

        end
      end
    end // temp_process40

  always @* product22 <= product22_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process41
      if (reset == 1'b1) begin
        delay_pipeline_20_under_pipe <= 0.0000000000000000E+00;
        coeff21_pipe <= 0.0000000000000000E+00;
        product21_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_20_under_pipe <= delay_pipeline[20];
          coeff21_pipe <= coeff21;

          product21_pipe <= delay_pipeline_20_under_pipe * coeff21_pipe;

        end
      end
    end // temp_process41

  always @* product21 <= product21_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process42
      if (reset == 1'b1) begin
        delay_pipeline_19_under_pipe <= 0.0000000000000000E+00;
        coeff20_pipe <= 0.0000000000000000E+00;
        product20_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_19_under_pipe <= delay_pipeline[19];
          coeff20_pipe <= coeff20;

          product20_pipe <= delay_pipeline_19_under_pipe * coeff20_pipe;

        end
      end
    end // temp_process42

  always @* product20 <= product20_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process43
      if (reset == 1'b1) begin
        delay_pipeline_18_under_pipe <= 0.0000000000000000E+00;
        coeff19_pipe <= 0.0000000000000000E+00;
        product19_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_18_under_pipe <= delay_pipeline[18];
          coeff19_pipe <= coeff19;

          product19_pipe <= delay_pipeline_18_under_pipe * coeff19_pipe;

        end
      end
    end // temp_process43

  always @* product19 <= product19_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process44
      if (reset == 1'b1) begin
        delay_pipeline_17_under_pipe <= 0.0000000000000000E+00;
        coeff18_pipe <= 0.0000000000000000E+00;
        product18_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_17_under_pipe <= delay_pipeline[17];
          coeff18_pipe <= coeff18;

          product18_pipe <= delay_pipeline_17_under_pipe * coeff18_pipe;

        end
      end
    end // temp_process44

  always @* product18 <= product18_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process45
      if (reset == 1'b1) begin
        delay_pipeline_16_under_pipe <= 0.0000000000000000E+00;
        coeff17_pipe <= 0.0000000000000000E+00;
        product17_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_16_under_pipe <= delay_pipeline[16];
          coeff17_pipe <= coeff17;

          product17_pipe <= delay_pipeline_16_under_pipe * coeff17_pipe;

        end
      end
    end // temp_process45

  always @* product17 <= product17_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process46
      if (reset == 1'b1) begin
        delay_pipeline_15_under_pipe <= 0.0000000000000000E+00;
        coeff16_pipe <= 0.0000000000000000E+00;
        product16_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_15_under_pipe <= delay_pipeline[15];
          coeff16_pipe <= coeff16;

          product16_pipe <= delay_pipeline_15_under_pipe * coeff16_pipe;

        end
      end
    end // temp_process46

  always @* product16 <= product16_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process47
      if (reset == 1'b1) begin
        delay_pipeline_14_under_pipe <= 0.0000000000000000E+00;
        coeff15_pipe <= 0.0000000000000000E+00;
        product15_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_14_under_pipe <= delay_pipeline[14];
          coeff15_pipe <= coeff15;

          product15_pipe <= delay_pipeline_14_under_pipe * coeff15_pipe;

        end
      end
    end // temp_process47

  always @* product15 <= product15_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process48
      if (reset == 1'b1) begin
        delay_pipeline_13_under_pipe <= 0.0000000000000000E+00;
        coeff14_pipe <= 0.0000000000000000E+00;
        product14_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_13_under_pipe <= delay_pipeline[13];
          coeff14_pipe <= coeff14;

          product14_pipe <= delay_pipeline_13_under_pipe * coeff14_pipe;

        end
      end
    end // temp_process48

  always @* product14 <= product14_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process49
      if (reset == 1'b1) begin
        delay_pipeline_12_under_pipe <= 0.0000000000000000E+00;
        coeff13_pipe <= 0.0000000000000000E+00;
        product13_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_12_under_pipe <= delay_pipeline[12];
          coeff13_pipe <= coeff13;

          product13_pipe <= delay_pipeline_12_under_pipe * coeff13_pipe;

        end
      end
    end // temp_process49

  always @* product13 <= product13_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process50
      if (reset == 1'b1) begin
        delay_pipeline_11_under_pipe <= 0.0000000000000000E+00;
        coeff12_pipe <= 0.0000000000000000E+00;
        product12_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_11_under_pipe <= delay_pipeline[11];
          coeff12_pipe <= coeff12;

          product12_pipe <= delay_pipeline_11_under_pipe * coeff12_pipe;

        end
      end
    end // temp_process50

  always @* product12 <= product12_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process51
      if (reset == 1'b1) begin
        delay_pipeline_10_under_pipe <= 0.0000000000000000E+00;
        coeff11_pipe <= 0.0000000000000000E+00;
        product11_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_10_under_pipe <= delay_pipeline[10];
          coeff11_pipe <= coeff11;

          product11_pipe <= delay_pipeline_10_under_pipe * coeff11_pipe;

        end
      end
    end // temp_process51

  always @* product11 <= product11_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process52
      if (reset == 1'b1) begin
        delay_pipeline_9_under_pipe <= 0.0000000000000000E+00;
        coeff10_pipe <= 0.0000000000000000E+00;
        product10_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_9_under_pipe <= delay_pipeline[9];
          coeff10_pipe <= coeff10;

          product10_pipe <= delay_pipeline_9_under_pipe * coeff10_pipe;

        end
      end
    end // temp_process52

  always @* product10 <= product10_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process53
      if (reset == 1'b1) begin
        delay_pipeline_8_under_pipe <= 0.0000000000000000E+00;
        coeff9_pipe <= 0.0000000000000000E+00;
        product9_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_8_under_pipe <= delay_pipeline[8];
          coeff9_pipe <= coeff9;

          product9_pipe <= delay_pipeline_8_under_pipe * coeff9_pipe;

        end
      end
    end // temp_process53

  always @* product9 <= product9_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process54
      if (reset == 1'b1) begin
        delay_pipeline_7_under_pipe <= 0.0000000000000000E+00;
        coeff8_pipe <= 0.0000000000000000E+00;
        product8_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_7_under_pipe <= delay_pipeline[7];
          coeff8_pipe <= coeff8;

          product8_pipe <= delay_pipeline_7_under_pipe * coeff8_pipe;

        end
      end
    end // temp_process54

  always @* product8 <= product8_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process55
      if (reset == 1'b1) begin
        delay_pipeline_6_under_pipe <= 0.0000000000000000E+00;
        coeff7_pipe <= 0.0000000000000000E+00;
        product7_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_6_under_pipe <= delay_pipeline[6];
          coeff7_pipe <= coeff7;

          product7_pipe <= delay_pipeline_6_under_pipe * coeff7_pipe;

        end
      end
    end // temp_process55

  always @* product7 <= product7_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process56
      if (reset == 1'b1) begin
        delay_pipeline_5_under_pipe <= 0.0000000000000000E+00;
        coeff6_pipe <= 0.0000000000000000E+00;
        product6_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_5_under_pipe <= delay_pipeline[5];
          coeff6_pipe <= coeff6;

          product6_pipe <= delay_pipeline_5_under_pipe * coeff6_pipe;

        end
      end
    end // temp_process56

  always @* product6 <= product6_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process57
      if (reset == 1'b1) begin
        delay_pipeline_4_under_pipe <= 0.0000000000000000E+00;
        coeff5_pipe <= 0.0000000000000000E+00;
        product5_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_4_under_pipe <= delay_pipeline[4];
          coeff5_pipe <= coeff5;

          product5_pipe <= delay_pipeline_4_under_pipe * coeff5_pipe;

        end
      end
    end // temp_process57

  always @* product5 <= product5_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process58
      if (reset == 1'b1) begin
        delay_pipeline_3_under_pipe <= 0.0000000000000000E+00;
        coeff4_pipe <= 0.0000000000000000E+00;
        product4_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_3_under_pipe <= delay_pipeline[3];
          coeff4_pipe <= coeff4;

          product4_pipe <= delay_pipeline_3_under_pipe * coeff4_pipe;

        end
      end
    end // temp_process58

  always @* product4 <= product4_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process59
      if (reset == 1'b1) begin
        delay_pipeline_2_under_pipe <= 0.0000000000000000E+00;
        coeff3_pipe <= 0.0000000000000000E+00;
        product3_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_2_under_pipe <= delay_pipeline[2];
          coeff3_pipe <= coeff3;

          product3_pipe <= delay_pipeline_2_under_pipe * coeff3_pipe;

        end
      end
    end // temp_process59

  always @* product3 <= product3_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process60
      if (reset == 1'b1) begin
        delay_pipeline_1_under_pipe <= 0.0000000000000000E+00;
        coeff2_pipe <= 0.0000000000000000E+00;
        product2_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_1_under_pipe <= delay_pipeline[1];
          coeff2_pipe <= coeff2;

          product2_pipe <= delay_pipeline_1_under_pipe * coeff2_pipe;

        end
      end
    end // temp_process60

  always @* product2 <= product2_pipe;


  always @ (posedge clk or posedge reset)
    begin: temp_process61
      if (reset == 1'b1) begin
        delay_pipeline_0_under_pipe <= 0.0000000000000000E+00;
        coeff1_pipe <= 0.0000000000000000E+00;
        product1_pipe <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_0_under_pipe <= delay_pipeline[0];
          coeff1_pipe <= coeff1;

          product1_pipe <= delay_pipeline_0_under_pipe * coeff1_pipe;

        end
      end
    end // temp_process61

  always @* product1 <= product1_pipe;


  always @* sum1_1 <= product61 + product60;

  always @* sum1_2 <= product59 + product58;

  always @* sum1_3 <= product57 + product56;

  always @* sum1_4 <= product55 + product54;

  always @* sum1_5 <= product53 + product52;

  always @* sum1_6 <= product51 + product50;

  always @* sum1_7 <= product49 + product48;

  always @* sum1_8 <= product47 + product46;

  always @* sum1_9 <= product45 + product44;

  always @* sum1_10 <= product43 + product42;

  always @* sum1_11 <= product41 + product40;

  always @* sum1_12 <= product39 + product38;

  always @* sum1_13 <= product37 + product36;

  always @* sum1_14 <= product35 + product34;

  always @* sum1_15 <= product33 + product32;

  always @* sum1_16 <= product31 + product30;

  always @* sum1_17 <= product29 + product28;

  always @* sum1_18 <= product27 + product26;

  always @* sum1_19 <= product25 + product24;

  always @* sum1_20 <= product23 + product22;

  always @* sum1_21 <= product21 + product20;

  always @* sum1_22 <= product19 + product18;

  always @* sum1_23 <= product17 + product16;

  always @* sum1_24 <= product15 + product14;

  always @* sum1_25 <= product13 + product12;

  always @* sum1_26 <= product11 + product10;

  always @* sum1_27 <= product9 + product8;

  always @* sum1_28 <= product7 + product6;

  always @* sum1_29 <= product5 + product4;

  always @* sum1_30 <= product3 + product2;

  always @ (posedge clk or posedge reset)
    begin: temp_process62
      if (reset == 1'b1) begin
        sumpipe1_1 <= 0.0000000000000000E+00;
        sumpipe1_2 <= 0.0000000000000000E+00;
        sumpipe1_3 <= 0.0000000000000000E+00;
        sumpipe1_4 <= 0.0000000000000000E+00;
        sumpipe1_5 <= 0.0000000000000000E+00;
        sumpipe1_6 <= 0.0000000000000000E+00;
        sumpipe1_7 <= 0.0000000000000000E+00;
        sumpipe1_8 <= 0.0000000000000000E+00;
        sumpipe1_9 <= 0.0000000000000000E+00;
        sumpipe1_10 <= 0.0000000000000000E+00;
        sumpipe1_11 <= 0.0000000000000000E+00;
        sumpipe1_12 <= 0.0000000000000000E+00;
        sumpipe1_13 <= 0.0000000000000000E+00;
        sumpipe1_14 <= 0.0000000000000000E+00;
        sumpipe1_15 <= 0.0000000000000000E+00;
        sumpipe1_16 <= 0.0000000000000000E+00;
        sumpipe1_17 <= 0.0000000000000000E+00;
        sumpipe1_18 <= 0.0000000000000000E+00;
        sumpipe1_19 <= 0.0000000000000000E+00;
        sumpipe1_20 <= 0.0000000000000000E+00;
        sumpipe1_21 <= 0.0000000000000000E+00;
        sumpipe1_22 <= 0.0000000000000000E+00;
        sumpipe1_23 <= 0.0000000000000000E+00;
        sumpipe1_24 <= 0.0000000000000000E+00;
        sumpipe1_25 <= 0.0000000000000000E+00;
        sumpipe1_26 <= 0.0000000000000000E+00;
        sumpipe1_27 <= 0.0000000000000000E+00;
        sumpipe1_28 <= 0.0000000000000000E+00;
        sumpipe1_29 <= 0.0000000000000000E+00;
        sumpipe1_30 <= 0.0000000000000000E+00;
        sumpipe1_31 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe1_1 <= sum1_1;
          sumpipe1_2 <= sum1_2;
          sumpipe1_3 <= sum1_3;
          sumpipe1_4 <= sum1_4;
          sumpipe1_5 <= sum1_5;
          sumpipe1_6 <= sum1_6;
          sumpipe1_7 <= sum1_7;
          sumpipe1_8 <= sum1_8;
          sumpipe1_9 <= sum1_9;
          sumpipe1_10 <= sum1_10;
          sumpipe1_11 <= sum1_11;
          sumpipe1_12 <= sum1_12;
          sumpipe1_13 <= sum1_13;
          sumpipe1_14 <= sum1_14;
          sumpipe1_15 <= sum1_15;
          sumpipe1_16 <= sum1_16;
          sumpipe1_17 <= sum1_17;
          sumpipe1_18 <= sum1_18;
          sumpipe1_19 <= sum1_19;
          sumpipe1_20 <= sum1_20;
          sumpipe1_21 <= sum1_21;
          sumpipe1_22 <= sum1_22;
          sumpipe1_23 <= sum1_23;
          sumpipe1_24 <= sum1_24;
          sumpipe1_25 <= sum1_25;
          sumpipe1_26 <= sum1_26;
          sumpipe1_27 <= sum1_27;
          sumpipe1_28 <= sum1_28;
          sumpipe1_29 <= sum1_29;
          sumpipe1_30 <= sum1_30;
          sumpipe1_31 <= product1;
        end
      end
    end // temp_process62

  always @* sum2_1 <= sumpipe1_1 + sumpipe1_2;

  always @* sum2_2 <= sumpipe1_3 + sumpipe1_4;

  always @* sum2_3 <= sumpipe1_5 + sumpipe1_6;

  always @* sum2_4 <= sumpipe1_7 + sumpipe1_8;

  always @* sum2_5 <= sumpipe1_9 + sumpipe1_10;

  always @* sum2_6 <= sumpipe1_11 + sumpipe1_12;

  always @* sum2_7 <= sumpipe1_13 + sumpipe1_14;

  always @* sum2_8 <= sumpipe1_15 + sumpipe1_16;

  always @* sum2_9 <= sumpipe1_17 + sumpipe1_18;

  always @* sum2_10 <= sumpipe1_19 + sumpipe1_20;

  always @* sum2_11 <= sumpipe1_21 + sumpipe1_22;

  always @* sum2_12 <= sumpipe1_23 + sumpipe1_24;

  always @* sum2_13 <= sumpipe1_25 + sumpipe1_26;

  always @* sum2_14 <= sumpipe1_27 + sumpipe1_28;

  always @* sum2_15 <= sumpipe1_29 + sumpipe1_30;

  always @ (posedge clk or posedge reset)
    begin: temp_process63
      if (reset == 1'b1) begin
        sumpipe2_1 <= 0.0000000000000000E+00;
        sumpipe2_2 <= 0.0000000000000000E+00;
        sumpipe2_3 <= 0.0000000000000000E+00;
        sumpipe2_4 <= 0.0000000000000000E+00;
        sumpipe2_5 <= 0.0000000000000000E+00;
        sumpipe2_6 <= 0.0000000000000000E+00;
        sumpipe2_7 <= 0.0000000000000000E+00;
        sumpipe2_8 <= 0.0000000000000000E+00;
        sumpipe2_9 <= 0.0000000000000000E+00;
        sumpipe2_10 <= 0.0000000000000000E+00;
        sumpipe2_11 <= 0.0000000000000000E+00;
        sumpipe2_12 <= 0.0000000000000000E+00;
        sumpipe2_13 <= 0.0000000000000000E+00;
        sumpipe2_14 <= 0.0000000000000000E+00;
        sumpipe2_15 <= 0.0000000000000000E+00;
        sumpipe2_16 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe2_1 <= sum2_1;
          sumpipe2_2 <= sum2_2;
          sumpipe2_3 <= sum2_3;
          sumpipe2_4 <= sum2_4;
          sumpipe2_5 <= sum2_5;
          sumpipe2_6 <= sum2_6;
          sumpipe2_7 <= sum2_7;
          sumpipe2_8 <= sum2_8;
          sumpipe2_9 <= sum2_9;
          sumpipe2_10 <= sum2_10;
          sumpipe2_11 <= sum2_11;
          sumpipe2_12 <= sum2_12;
          sumpipe2_13 <= sum2_13;
          sumpipe2_14 <= sum2_14;
          sumpipe2_15 <= sum2_15;
          sumpipe2_16 <= sumpipe1_31;
        end
      end
    end // temp_process63

  always @* sum3_1 <= sumpipe2_1 + sumpipe2_2;

  always @* sum3_2 <= sumpipe2_3 + sumpipe2_4;

  always @* sum3_3 <= sumpipe2_5 + sumpipe2_6;

  always @* sum3_4 <= sumpipe2_7 + sumpipe2_8;

  always @* sum3_5 <= sumpipe2_9 + sumpipe2_10;

  always @* sum3_6 <= sumpipe2_11 + sumpipe2_12;

  always @* sum3_7 <= sumpipe2_13 + sumpipe2_14;

  always @* sum3_8 <= sumpipe2_15 + sumpipe2_16;

  always @ (posedge clk or posedge reset)
    begin: temp_process64
      if (reset == 1'b1) begin
        sumpipe3_1 <= 0.0000000000000000E+00;
        sumpipe3_2 <= 0.0000000000000000E+00;
        sumpipe3_3 <= 0.0000000000000000E+00;
        sumpipe3_4 <= 0.0000000000000000E+00;
        sumpipe3_5 <= 0.0000000000000000E+00;
        sumpipe3_6 <= 0.0000000000000000E+00;
        sumpipe3_7 <= 0.0000000000000000E+00;
        sumpipe3_8 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe3_1 <= sum3_1;
          sumpipe3_2 <= sum3_2;
          sumpipe3_3 <= sum3_3;
          sumpipe3_4 <= sum3_4;
          sumpipe3_5 <= sum3_5;
          sumpipe3_6 <= sum3_6;
          sumpipe3_7 <= sum3_7;
          sumpipe3_8 <= sum3_8;
        end
      end
    end // temp_process64

  always @* sum4_1 <= sumpipe3_1 + sumpipe3_2;

  always @* sum4_2 <= sumpipe3_3 + sumpipe3_4;

  always @* sum4_3 <= sumpipe3_5 + sumpipe3_6;

  always @* sum4_4 <= sumpipe3_7 + sumpipe3_8;

  always @ (posedge clk or posedge reset)
    begin: temp_process65
      if (reset == 1'b1) begin
        sumpipe4_1 <= 0.0000000000000000E+00;
        sumpipe4_2 <= 0.0000000000000000E+00;
        sumpipe4_3 <= 0.0000000000000000E+00;
        sumpipe4_4 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe4_1 <= sum4_1;
          sumpipe4_2 <= sum4_2;
          sumpipe4_3 <= sum4_3;
          sumpipe4_4 <= sum4_4;
        end
      end
    end // temp_process65

  always @* sum5_1 <= sumpipe4_1 + sumpipe4_2;

  always @* sum5_2 <= sumpipe4_3 + sumpipe4_4;

  always @ (posedge clk or posedge reset)
    begin: temp_process66
      if (reset == 1'b1) begin
        sumpipe5_1 <= 0.0000000000000000E+00;
        sumpipe5_2 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe5_1 <= sum5_1;
          sumpipe5_2 <= sum5_2;
        end
      end
    end // temp_process66

  always @* sum6_1 <= sumpipe5_1 + sumpipe5_2;

  always @ (posedge clk or posedge reset)
    begin: temp_process67
      if (reset == 1'b1) begin
        sumpipe6_1 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe6_1 <= sum6_1;
        end
      end
    end // temp_process67

  always @* sum_final <= sumpipe6_1;


  always @* output_typeconvert <= sum_final;


  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = $realtobits(output_register);
endmodule  // fir_minimum_fp

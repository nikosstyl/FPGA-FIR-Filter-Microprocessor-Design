// -------------------------------------------------------------
//
// Module: fir_minimum_24bit_2p
// Generated by MATLAB(R) 9.12 and Filter Design HDL Coder 3.1.11.
// Generated on: 2023-06-11 18:24:33
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// FIRAdderStyle: tree
// MultiplierInputPipeline: 2
// MultiplierOutputPipeline: 2
// OptimizeForHDL: on
// TargetDirectory: W:\Vivado_Projects\Sxediasi_Epeksergastwn_Project\FIR_Minimum_Order\24Bit floating point
// AddPipelineRegisters: on
// Name: fir_minimum_24bit_2p
// InputDataType: numerictype(1,24,0)
// TargetLanguage: Verilog
// TestBenchName: fir_minimum_fp_2p_tb
// TestBenchStimulus: impulse step ramp chirp noise 

// Filter Specifications:
//
// Sample Rate     : 46 kHz
// Response        : Lowpass
// Specification   : Fp,Fst,Ap,Ast
// Stopband Atten. : 60 dB
// Passband Ripple : 1 dB
// Passband Edge   : 8 kHz
// Stopband Edge   : 9.6 kHz
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 61
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s24,24 -> [-5.000000e-01 5.000000e-01)
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module fir_minimum_24bit_2p
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [23:0] filter_in; //sfix24
  output  signed [53:0] filter_out; //sfix54_En24

////////////////////////////////////////////////////////////////
//Module Architecture: fir_minimum_24bit_2p
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [23:0] coeff1 = 24'b000000000100011101101111; //sfix24_En24
  parameter signed [23:0] coeff2 = 24'b000000000000110010010011; //sfix24_En24
  parameter signed [23:0] coeff3 = 24'b111111110000100100110010; //sfix24_En24
  parameter signed [23:0] coeff4 = 24'b111111011000001001111001; //sfix24_En24
  parameter signed [23:0] coeff5 = 24'b111111001011111100010101; //sfix24_En24
  parameter signed [23:0] coeff6 = 24'b111111011101111011001110; //sfix24_En24
  parameter signed [23:0] coeff7 = 24'b000000000101101001001000; //sfix24_En24
  parameter signed [23:0] coeff8 = 24'b000000100000001101000010; //sfix24_En24
  parameter signed [23:0] coeff9 = 24'b000000010010001000110111; //sfix24_En24
  parameter signed [23:0] coeff10 = 24'b111111101010010000100100; //sfix24_En24
  parameter signed [23:0] coeff11 = 24'b111111011000010100110010; //sfix24_En24
  parameter signed [23:0] coeff12 = 24'b111111110111101100100001; //sfix24_En24
  parameter signed [23:0] coeff13 = 24'b000000101000011100000010; //sfix24_En24
  parameter signed [23:0] coeff14 = 24'b000000101101001101100111; //sfix24_En24
  parameter signed [23:0] coeff15 = 24'b111111110110001100110010; //sfix24_En24
  parameter signed [23:0] coeff16 = 24'b111111000000000110000111; //sfix24_En24
  parameter signed [23:0] coeff17 = 24'b111111010100000011011011; //sfix24_En24
  parameter signed [23:0] coeff18 = 24'b000000101000011011110111; //sfix24_En24
  parameter signed [23:0] coeff19 = 24'b000001011010010100000011; //sfix24_En24
  parameter signed [23:0] coeff20 = 24'b000000011101000101011110; //sfix24_En24
  parameter signed [23:0] coeff21 = 24'b111110100111010110101001; //sfix24_En24
  parameter signed [23:0] coeff22 = 24'b111110001011011100110011; //sfix24_En24
  parameter signed [23:0] coeff23 = 24'b000000001010110110000001; //sfix24_En24
  parameter signed [23:0] coeff24 = 24'b000010100101110110101001; //sfix24_En24
  parameter signed [23:0] coeff25 = 24'b000010001011000011101011; //sfix24_En24
  parameter signed [23:0] coeff26 = 24'b111110010101001100100110; //sfix24_En24
  parameter signed [23:0] coeff27 = 24'b111011000000100111010011; //sfix24_En24
  parameter signed [23:0] coeff28 = 24'b111101100101110001111111; //sfix24_En24
  parameter signed [23:0] coeff29 = 24'b000111010010011100001101; //sfix24_En24
  parameter signed [23:0] coeff30 = 24'b010010101110110000100001; //sfix24_En24
  parameter signed [23:0] coeff31 = 24'b010111110100111000101000; //sfix24_En24
  parameter signed [23:0] coeff32 = 24'b010010101110110000100001; //sfix24_En24
  parameter signed [23:0] coeff33 = 24'b000111010010011100001101; //sfix24_En24
  parameter signed [23:0] coeff34 = 24'b111101100101110001111111; //sfix24_En24
  parameter signed [23:0] coeff35 = 24'b111011000000100111010011; //sfix24_En24
  parameter signed [23:0] coeff36 = 24'b111110010101001100100110; //sfix24_En24
  parameter signed [23:0] coeff37 = 24'b000010001011000011101011; //sfix24_En24
  parameter signed [23:0] coeff38 = 24'b000010100101110110101001; //sfix24_En24
  parameter signed [23:0] coeff39 = 24'b000000001010110110000001; //sfix24_En24
  parameter signed [23:0] coeff40 = 24'b111110001011011100110011; //sfix24_En24
  parameter signed [23:0] coeff41 = 24'b111110100111010110101001; //sfix24_En24
  parameter signed [23:0] coeff42 = 24'b000000011101000101011110; //sfix24_En24
  parameter signed [23:0] coeff43 = 24'b000001011010010100000011; //sfix24_En24
  parameter signed [23:0] coeff44 = 24'b000000101000011011110111; //sfix24_En24
  parameter signed [23:0] coeff45 = 24'b111111010100000011011011; //sfix24_En24
  parameter signed [23:0] coeff46 = 24'b111111000000000110000111; //sfix24_En24
  parameter signed [23:0] coeff47 = 24'b111111110110001100110010; //sfix24_En24
  parameter signed [23:0] coeff48 = 24'b000000101101001101100111; //sfix24_En24
  parameter signed [23:0] coeff49 = 24'b000000101000011100000010; //sfix24_En24
  parameter signed [23:0] coeff50 = 24'b111111110111101100100001; //sfix24_En24
  parameter signed [23:0] coeff51 = 24'b111111011000010100110010; //sfix24_En24
  parameter signed [23:0] coeff52 = 24'b111111101010010000100100; //sfix24_En24
  parameter signed [23:0] coeff53 = 24'b000000010010001000110111; //sfix24_En24
  parameter signed [23:0] coeff54 = 24'b000000100000001101000010; //sfix24_En24
  parameter signed [23:0] coeff55 = 24'b000000000101101001001000; //sfix24_En24
  parameter signed [23:0] coeff56 = 24'b111111011101111011001110; //sfix24_En24
  parameter signed [23:0] coeff57 = 24'b111111001011111100010101; //sfix24_En24
  parameter signed [23:0] coeff58 = 24'b111111011000001001111001; //sfix24_En24
  parameter signed [23:0] coeff59 = 24'b111111110000100100110010; //sfix24_En24
  parameter signed [23:0] coeff60 = 24'b000000000000110010010011; //sfix24_En24
  parameter signed [23:0] coeff61 = 24'b000000000100011101101111; //sfix24_En24

  // Signals
  reg  signed [23:0] delay_pipeline [0:60] ; // sfix24
  wire signed [47:0] product61; // sfix48_En24
  reg  signed [23:0] delay_pipeline_60_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_60_under_pipe_1; // sfix24
  reg  signed [23:0] coeff61_pipe; // sfix24_En24
  reg  signed [23:0] coeff61_pipe_1; // sfix24_En24
  reg  signed [47:0] product61_pipe; // sfix48_En24
  reg  signed [47:0] product61_pipe_1; // sfix48_En24
  wire signed [47:0] product60; // sfix48_En24
  reg  signed [23:0] delay_pipeline_59_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_59_under_pipe_1; // sfix24
  reg  signed [23:0] coeff60_pipe; // sfix24_En24
  reg  signed [23:0] coeff60_pipe_1; // sfix24_En24
  reg  signed [47:0] product60_pipe; // sfix48_En24
  reg  signed [47:0] product60_pipe_1; // sfix48_En24
  wire signed [47:0] product59; // sfix48_En24
  reg  signed [23:0] delay_pipeline_58_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_58_under_pipe_1; // sfix24
  reg  signed [23:0] coeff59_pipe; // sfix24_En24
  reg  signed [23:0] coeff59_pipe_1; // sfix24_En24
  reg  signed [47:0] product59_pipe; // sfix48_En24
  reg  signed [47:0] product59_pipe_1; // sfix48_En24
  wire signed [47:0] product58; // sfix48_En24
  reg  signed [23:0] delay_pipeline_57_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_57_under_pipe_1; // sfix24
  reg  signed [23:0] coeff58_pipe; // sfix24_En24
  reg  signed [23:0] coeff58_pipe_1; // sfix24_En24
  reg  signed [47:0] product58_pipe; // sfix48_En24
  reg  signed [47:0] product58_pipe_1; // sfix48_En24
  wire signed [47:0] product57; // sfix48_En24
  reg  signed [23:0] delay_pipeline_56_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_56_under_pipe_1; // sfix24
  reg  signed [23:0] coeff57_pipe; // sfix24_En24
  reg  signed [23:0] coeff57_pipe_1; // sfix24_En24
  reg  signed [47:0] product57_pipe; // sfix48_En24
  reg  signed [47:0] product57_pipe_1; // sfix48_En24
  wire signed [47:0] product56; // sfix48_En24
  reg  signed [23:0] delay_pipeline_55_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_55_under_pipe_1; // sfix24
  reg  signed [23:0] coeff56_pipe; // sfix24_En24
  reg  signed [23:0] coeff56_pipe_1; // sfix24_En24
  reg  signed [47:0] product56_pipe; // sfix48_En24
  reg  signed [47:0] product56_pipe_1; // sfix48_En24
  wire signed [47:0] product55; // sfix48_En24
  reg  signed [23:0] delay_pipeline_54_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_54_under_pipe_1; // sfix24
  reg  signed [23:0] coeff55_pipe; // sfix24_En24
  reg  signed [23:0] coeff55_pipe_1; // sfix24_En24
  reg  signed [47:0] product55_pipe; // sfix48_En24
  reg  signed [47:0] product55_pipe_1; // sfix48_En24
  wire signed [47:0] product54; // sfix48_En24
  reg  signed [23:0] delay_pipeline_53_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_53_under_pipe_1; // sfix24
  reg  signed [23:0] coeff54_pipe; // sfix24_En24
  reg  signed [23:0] coeff54_pipe_1; // sfix24_En24
  reg  signed [47:0] product54_pipe; // sfix48_En24
  reg  signed [47:0] product54_pipe_1; // sfix48_En24
  wire signed [47:0] product53; // sfix48_En24
  reg  signed [23:0] delay_pipeline_52_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_52_under_pipe_1; // sfix24
  reg  signed [23:0] coeff53_pipe; // sfix24_En24
  reg  signed [23:0] coeff53_pipe_1; // sfix24_En24
  reg  signed [47:0] product53_pipe; // sfix48_En24
  reg  signed [47:0] product53_pipe_1; // sfix48_En24
  wire signed [47:0] product52; // sfix48_En24
  reg  signed [23:0] delay_pipeline_51_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_51_under_pipe_1; // sfix24
  reg  signed [23:0] coeff52_pipe; // sfix24_En24
  reg  signed [23:0] coeff52_pipe_1; // sfix24_En24
  reg  signed [47:0] product52_pipe; // sfix48_En24
  reg  signed [47:0] product52_pipe_1; // sfix48_En24
  wire signed [47:0] product51; // sfix48_En24
  reg  signed [23:0] delay_pipeline_50_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_50_under_pipe_1; // sfix24
  reg  signed [23:0] coeff51_pipe; // sfix24_En24
  reg  signed [23:0] coeff51_pipe_1; // sfix24_En24
  reg  signed [47:0] product51_pipe; // sfix48_En24
  reg  signed [47:0] product51_pipe_1; // sfix48_En24
  wire signed [47:0] product50; // sfix48_En24
  reg  signed [23:0] delay_pipeline_49_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_49_under_pipe_1; // sfix24
  reg  signed [23:0] coeff50_pipe; // sfix24_En24
  reg  signed [23:0] coeff50_pipe_1; // sfix24_En24
  reg  signed [47:0] product50_pipe; // sfix48_En24
  reg  signed [47:0] product50_pipe_1; // sfix48_En24
  wire signed [47:0] product49; // sfix48_En24
  reg  signed [23:0] delay_pipeline_48_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_48_under_pipe_1; // sfix24
  reg  signed [23:0] coeff49_pipe; // sfix24_En24
  reg  signed [23:0] coeff49_pipe_1; // sfix24_En24
  reg  signed [47:0] product49_pipe; // sfix48_En24
  reg  signed [47:0] product49_pipe_1; // sfix48_En24
  wire signed [47:0] product48; // sfix48_En24
  reg  signed [23:0] delay_pipeline_47_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_47_under_pipe_1; // sfix24
  reg  signed [23:0] coeff48_pipe; // sfix24_En24
  reg  signed [23:0] coeff48_pipe_1; // sfix24_En24
  reg  signed [47:0] product48_pipe; // sfix48_En24
  reg  signed [47:0] product48_pipe_1; // sfix48_En24
  wire signed [47:0] product47; // sfix48_En24
  reg  signed [23:0] delay_pipeline_46_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_46_under_pipe_1; // sfix24
  reg  signed [23:0] coeff47_pipe; // sfix24_En24
  reg  signed [23:0] coeff47_pipe_1; // sfix24_En24
  reg  signed [47:0] product47_pipe; // sfix48_En24
  reg  signed [47:0] product47_pipe_1; // sfix48_En24
  wire signed [47:0] product46; // sfix48_En24
  reg  signed [23:0] delay_pipeline_45_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_45_under_pipe_1; // sfix24
  reg  signed [23:0] coeff46_pipe; // sfix24_En24
  reg  signed [23:0] coeff46_pipe_1; // sfix24_En24
  reg  signed [47:0] product46_pipe; // sfix48_En24
  reg  signed [47:0] product46_pipe_1; // sfix48_En24
  wire signed [47:0] product45; // sfix48_En24
  reg  signed [23:0] delay_pipeline_44_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_44_under_pipe_1; // sfix24
  reg  signed [23:0] coeff45_pipe; // sfix24_En24
  reg  signed [23:0] coeff45_pipe_1; // sfix24_En24
  reg  signed [47:0] product45_pipe; // sfix48_En24
  reg  signed [47:0] product45_pipe_1; // sfix48_En24
  wire signed [47:0] product44; // sfix48_En24
  reg  signed [23:0] delay_pipeline_43_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_43_under_pipe_1; // sfix24
  reg  signed [23:0] coeff44_pipe; // sfix24_En24
  reg  signed [23:0] coeff44_pipe_1; // sfix24_En24
  reg  signed [47:0] product44_pipe; // sfix48_En24
  reg  signed [47:0] product44_pipe_1; // sfix48_En24
  wire signed [47:0] product43; // sfix48_En24
  reg  signed [23:0] delay_pipeline_42_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_42_under_pipe_1; // sfix24
  reg  signed [23:0] coeff43_pipe; // sfix24_En24
  reg  signed [23:0] coeff43_pipe_1; // sfix24_En24
  reg  signed [47:0] product43_pipe; // sfix48_En24
  reg  signed [47:0] product43_pipe_1; // sfix48_En24
  wire signed [47:0] product42; // sfix48_En24
  reg  signed [23:0] delay_pipeline_41_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_41_under_pipe_1; // sfix24
  reg  signed [23:0] coeff42_pipe; // sfix24_En24
  reg  signed [23:0] coeff42_pipe_1; // sfix24_En24
  reg  signed [47:0] product42_pipe; // sfix48_En24
  reg  signed [47:0] product42_pipe_1; // sfix48_En24
  wire signed [47:0] product41; // sfix48_En24
  reg  signed [23:0] delay_pipeline_40_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_40_under_pipe_1; // sfix24
  reg  signed [23:0] coeff41_pipe; // sfix24_En24
  reg  signed [23:0] coeff41_pipe_1; // sfix24_En24
  reg  signed [47:0] product41_pipe; // sfix48_En24
  reg  signed [47:0] product41_pipe_1; // sfix48_En24
  wire signed [47:0] product40; // sfix48_En24
  reg  signed [23:0] delay_pipeline_39_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_39_under_pipe_1; // sfix24
  reg  signed [23:0] coeff40_pipe; // sfix24_En24
  reg  signed [23:0] coeff40_pipe_1; // sfix24_En24
  reg  signed [47:0] product40_pipe; // sfix48_En24
  reg  signed [47:0] product40_pipe_1; // sfix48_En24
  wire signed [47:0] product39; // sfix48_En24
  reg  signed [23:0] delay_pipeline_38_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_38_under_pipe_1; // sfix24
  reg  signed [23:0] coeff39_pipe; // sfix24_En24
  reg  signed [23:0] coeff39_pipe_1; // sfix24_En24
  reg  signed [47:0] product39_pipe; // sfix48_En24
  reg  signed [47:0] product39_pipe_1; // sfix48_En24
  wire signed [47:0] product38; // sfix48_En24
  reg  signed [23:0] delay_pipeline_37_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_37_under_pipe_1; // sfix24
  reg  signed [23:0] coeff38_pipe; // sfix24_En24
  reg  signed [23:0] coeff38_pipe_1; // sfix24_En24
  reg  signed [47:0] product38_pipe; // sfix48_En24
  reg  signed [47:0] product38_pipe_1; // sfix48_En24
  wire signed [47:0] product37; // sfix48_En24
  reg  signed [23:0] delay_pipeline_36_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_36_under_pipe_1; // sfix24
  reg  signed [23:0] coeff37_pipe; // sfix24_En24
  reg  signed [23:0] coeff37_pipe_1; // sfix24_En24
  reg  signed [47:0] product37_pipe; // sfix48_En24
  reg  signed [47:0] product37_pipe_1; // sfix48_En24
  wire signed [47:0] product36; // sfix48_En24
  reg  signed [23:0] delay_pipeline_35_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_35_under_pipe_1; // sfix24
  reg  signed [23:0] coeff36_pipe; // sfix24_En24
  reg  signed [23:0] coeff36_pipe_1; // sfix24_En24
  reg  signed [47:0] product36_pipe; // sfix48_En24
  reg  signed [47:0] product36_pipe_1; // sfix48_En24
  wire signed [47:0] product35; // sfix48_En24
  reg  signed [23:0] delay_pipeline_34_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_34_under_pipe_1; // sfix24
  reg  signed [23:0] coeff35_pipe; // sfix24_En24
  reg  signed [23:0] coeff35_pipe_1; // sfix24_En24
  reg  signed [47:0] product35_pipe; // sfix48_En24
  reg  signed [47:0] product35_pipe_1; // sfix48_En24
  wire signed [47:0] product34; // sfix48_En24
  reg  signed [23:0] delay_pipeline_33_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_33_under_pipe_1; // sfix24
  reg  signed [23:0] coeff34_pipe; // sfix24_En24
  reg  signed [23:0] coeff34_pipe_1; // sfix24_En24
  reg  signed [47:0] product34_pipe; // sfix48_En24
  reg  signed [47:0] product34_pipe_1; // sfix48_En24
  wire signed [47:0] product33; // sfix48_En24
  reg  signed [23:0] delay_pipeline_32_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_32_under_pipe_1; // sfix24
  reg  signed [23:0] coeff33_pipe; // sfix24_En24
  reg  signed [23:0] coeff33_pipe_1; // sfix24_En24
  reg  signed [47:0] product33_pipe; // sfix48_En24
  reg  signed [47:0] product33_pipe_1; // sfix48_En24
  wire signed [47:0] product32; // sfix48_En24
  reg  signed [23:0] delay_pipeline_31_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_31_under_pipe_1; // sfix24
  reg  signed [23:0] coeff32_pipe; // sfix24_En24
  reg  signed [23:0] coeff32_pipe_1; // sfix24_En24
  reg  signed [47:0] product32_pipe; // sfix48_En24
  reg  signed [47:0] product32_pipe_1; // sfix48_En24
  wire signed [47:0] product31; // sfix48_En24
  reg  signed [23:0] delay_pipeline_30_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_30_under_pipe_1; // sfix24
  reg  signed [23:0] coeff31_pipe; // sfix24_En24
  reg  signed [23:0] coeff31_pipe_1; // sfix24_En24
  reg  signed [47:0] product31_pipe; // sfix48_En24
  reg  signed [47:0] product31_pipe_1; // sfix48_En24
  wire signed [47:0] product30; // sfix48_En24
  reg  signed [23:0] delay_pipeline_29_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_29_under_pipe_1; // sfix24
  reg  signed [23:0] coeff30_pipe; // sfix24_En24
  reg  signed [23:0] coeff30_pipe_1; // sfix24_En24
  reg  signed [47:0] product30_pipe; // sfix48_En24
  reg  signed [47:0] product30_pipe_1; // sfix48_En24
  wire signed [47:0] product29; // sfix48_En24
  reg  signed [23:0] delay_pipeline_28_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_28_under_pipe_1; // sfix24
  reg  signed [23:0] coeff29_pipe; // sfix24_En24
  reg  signed [23:0] coeff29_pipe_1; // sfix24_En24
  reg  signed [47:0] product29_pipe; // sfix48_En24
  reg  signed [47:0] product29_pipe_1; // sfix48_En24
  wire signed [47:0] product28; // sfix48_En24
  reg  signed [23:0] delay_pipeline_27_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_27_under_pipe_1; // sfix24
  reg  signed [23:0] coeff28_pipe; // sfix24_En24
  reg  signed [23:0] coeff28_pipe_1; // sfix24_En24
  reg  signed [47:0] product28_pipe; // sfix48_En24
  reg  signed [47:0] product28_pipe_1; // sfix48_En24
  wire signed [47:0] product27; // sfix48_En24
  reg  signed [23:0] delay_pipeline_26_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_26_under_pipe_1; // sfix24
  reg  signed [23:0] coeff27_pipe; // sfix24_En24
  reg  signed [23:0] coeff27_pipe_1; // sfix24_En24
  reg  signed [47:0] product27_pipe; // sfix48_En24
  reg  signed [47:0] product27_pipe_1; // sfix48_En24
  wire signed [47:0] product26; // sfix48_En24
  reg  signed [23:0] delay_pipeline_25_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_25_under_pipe_1; // sfix24
  reg  signed [23:0] coeff26_pipe; // sfix24_En24
  reg  signed [23:0] coeff26_pipe_1; // sfix24_En24
  reg  signed [47:0] product26_pipe; // sfix48_En24
  reg  signed [47:0] product26_pipe_1; // sfix48_En24
  wire signed [47:0] product25; // sfix48_En24
  reg  signed [23:0] delay_pipeline_24_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_24_under_pipe_1; // sfix24
  reg  signed [23:0] coeff25_pipe; // sfix24_En24
  reg  signed [23:0] coeff25_pipe_1; // sfix24_En24
  reg  signed [47:0] product25_pipe; // sfix48_En24
  reg  signed [47:0] product25_pipe_1; // sfix48_En24
  wire signed [47:0] product24; // sfix48_En24
  reg  signed [23:0] delay_pipeline_23_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_23_under_pipe_1; // sfix24
  reg  signed [23:0] coeff24_pipe; // sfix24_En24
  reg  signed [23:0] coeff24_pipe_1; // sfix24_En24
  reg  signed [47:0] product24_pipe; // sfix48_En24
  reg  signed [47:0] product24_pipe_1; // sfix48_En24
  wire signed [47:0] product23; // sfix48_En24
  reg  signed [23:0] delay_pipeline_22_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_22_under_pipe_1; // sfix24
  reg  signed [23:0] coeff23_pipe; // sfix24_En24
  reg  signed [23:0] coeff23_pipe_1; // sfix24_En24
  reg  signed [47:0] product23_pipe; // sfix48_En24
  reg  signed [47:0] product23_pipe_1; // sfix48_En24
  wire signed [47:0] product22; // sfix48_En24
  reg  signed [23:0] delay_pipeline_21_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_21_under_pipe_1; // sfix24
  reg  signed [23:0] coeff22_pipe; // sfix24_En24
  reg  signed [23:0] coeff22_pipe_1; // sfix24_En24
  reg  signed [47:0] product22_pipe; // sfix48_En24
  reg  signed [47:0] product22_pipe_1; // sfix48_En24
  wire signed [47:0] product21; // sfix48_En24
  reg  signed [23:0] delay_pipeline_20_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_20_under_pipe_1; // sfix24
  reg  signed [23:0] coeff21_pipe; // sfix24_En24
  reg  signed [23:0] coeff21_pipe_1; // sfix24_En24
  reg  signed [47:0] product21_pipe; // sfix48_En24
  reg  signed [47:0] product21_pipe_1; // sfix48_En24
  wire signed [47:0] product20; // sfix48_En24
  reg  signed [23:0] delay_pipeline_19_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_19_under_pipe_1; // sfix24
  reg  signed [23:0] coeff20_pipe; // sfix24_En24
  reg  signed [23:0] coeff20_pipe_1; // sfix24_En24
  reg  signed [47:0] product20_pipe; // sfix48_En24
  reg  signed [47:0] product20_pipe_1; // sfix48_En24
  wire signed [47:0] product19; // sfix48_En24
  reg  signed [23:0] delay_pipeline_18_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_18_under_pipe_1; // sfix24
  reg  signed [23:0] coeff19_pipe; // sfix24_En24
  reg  signed [23:0] coeff19_pipe_1; // sfix24_En24
  reg  signed [47:0] product19_pipe; // sfix48_En24
  reg  signed [47:0] product19_pipe_1; // sfix48_En24
  wire signed [47:0] product18; // sfix48_En24
  reg  signed [23:0] delay_pipeline_17_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_17_under_pipe_1; // sfix24
  reg  signed [23:0] coeff18_pipe; // sfix24_En24
  reg  signed [23:0] coeff18_pipe_1; // sfix24_En24
  reg  signed [47:0] product18_pipe; // sfix48_En24
  reg  signed [47:0] product18_pipe_1; // sfix48_En24
  wire signed [47:0] product17; // sfix48_En24
  reg  signed [23:0] delay_pipeline_16_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_16_under_pipe_1; // sfix24
  reg  signed [23:0] coeff17_pipe; // sfix24_En24
  reg  signed [23:0] coeff17_pipe_1; // sfix24_En24
  reg  signed [47:0] product17_pipe; // sfix48_En24
  reg  signed [47:0] product17_pipe_1; // sfix48_En24
  wire signed [47:0] product16; // sfix48_En24
  reg  signed [23:0] delay_pipeline_15_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_15_under_pipe_1; // sfix24
  reg  signed [23:0] coeff16_pipe; // sfix24_En24
  reg  signed [23:0] coeff16_pipe_1; // sfix24_En24
  reg  signed [47:0] product16_pipe; // sfix48_En24
  reg  signed [47:0] product16_pipe_1; // sfix48_En24
  wire signed [47:0] product15; // sfix48_En24
  reg  signed [23:0] delay_pipeline_14_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_14_under_pipe_1; // sfix24
  reg  signed [23:0] coeff15_pipe; // sfix24_En24
  reg  signed [23:0] coeff15_pipe_1; // sfix24_En24
  reg  signed [47:0] product15_pipe; // sfix48_En24
  reg  signed [47:0] product15_pipe_1; // sfix48_En24
  wire signed [47:0] product14; // sfix48_En24
  reg  signed [23:0] delay_pipeline_13_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_13_under_pipe_1; // sfix24
  reg  signed [23:0] coeff14_pipe; // sfix24_En24
  reg  signed [23:0] coeff14_pipe_1; // sfix24_En24
  reg  signed [47:0] product14_pipe; // sfix48_En24
  reg  signed [47:0] product14_pipe_1; // sfix48_En24
  wire signed [47:0] product13; // sfix48_En24
  reg  signed [23:0] delay_pipeline_12_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_12_under_pipe_1; // sfix24
  reg  signed [23:0] coeff13_pipe; // sfix24_En24
  reg  signed [23:0] coeff13_pipe_1; // sfix24_En24
  reg  signed [47:0] product13_pipe; // sfix48_En24
  reg  signed [47:0] product13_pipe_1; // sfix48_En24
  wire signed [47:0] product12; // sfix48_En24
  reg  signed [23:0] delay_pipeline_11_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_11_under_pipe_1; // sfix24
  reg  signed [23:0] coeff12_pipe; // sfix24_En24
  reg  signed [23:0] coeff12_pipe_1; // sfix24_En24
  reg  signed [47:0] product12_pipe; // sfix48_En24
  reg  signed [47:0] product12_pipe_1; // sfix48_En24
  wire signed [47:0] product11; // sfix48_En24
  reg  signed [23:0] delay_pipeline_10_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_10_under_pipe_1; // sfix24
  reg  signed [23:0] coeff11_pipe; // sfix24_En24
  reg  signed [23:0] coeff11_pipe_1; // sfix24_En24
  reg  signed [47:0] product11_pipe; // sfix48_En24
  reg  signed [47:0] product11_pipe_1; // sfix48_En24
  wire signed [47:0] product10; // sfix48_En24
  reg  signed [23:0] delay_pipeline_9_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_9_under_pipe_1; // sfix24
  reg  signed [23:0] coeff10_pipe; // sfix24_En24
  reg  signed [23:0] coeff10_pipe_1; // sfix24_En24
  reg  signed [47:0] product10_pipe; // sfix48_En24
  reg  signed [47:0] product10_pipe_1; // sfix48_En24
  wire signed [47:0] product9; // sfix48_En24
  reg  signed [23:0] delay_pipeline_8_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_8_under_pipe_1; // sfix24
  reg  signed [23:0] coeff9_pipe; // sfix24_En24
  reg  signed [23:0] coeff9_pipe_1; // sfix24_En24
  reg  signed [47:0] product9_pipe; // sfix48_En24
  reg  signed [47:0] product9_pipe_1; // sfix48_En24
  wire signed [47:0] product8; // sfix48_En24
  reg  signed [23:0] delay_pipeline_7_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_7_under_pipe_1; // sfix24
  reg  signed [23:0] coeff8_pipe; // sfix24_En24
  reg  signed [23:0] coeff8_pipe_1; // sfix24_En24
  reg  signed [47:0] product8_pipe; // sfix48_En24
  reg  signed [47:0] product8_pipe_1; // sfix48_En24
  wire signed [47:0] product7; // sfix48_En24
  reg  signed [23:0] delay_pipeline_6_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_6_under_pipe_1; // sfix24
  reg  signed [23:0] coeff7_pipe; // sfix24_En24
  reg  signed [23:0] coeff7_pipe_1; // sfix24_En24
  reg  signed [47:0] product7_pipe; // sfix48_En24
  reg  signed [47:0] product7_pipe_1; // sfix48_En24
  wire signed [47:0] product6; // sfix48_En24
  reg  signed [23:0] delay_pipeline_5_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_5_under_pipe_1; // sfix24
  reg  signed [23:0] coeff6_pipe; // sfix24_En24
  reg  signed [23:0] coeff6_pipe_1; // sfix24_En24
  reg  signed [47:0] product6_pipe; // sfix48_En24
  reg  signed [47:0] product6_pipe_1; // sfix48_En24
  wire signed [47:0] product5; // sfix48_En24
  reg  signed [23:0] delay_pipeline_4_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_4_under_pipe_1; // sfix24
  reg  signed [23:0] coeff5_pipe; // sfix24_En24
  reg  signed [23:0] coeff5_pipe_1; // sfix24_En24
  reg  signed [47:0] product5_pipe; // sfix48_En24
  reg  signed [47:0] product5_pipe_1; // sfix48_En24
  wire signed [47:0] product4; // sfix48_En24
  reg  signed [23:0] delay_pipeline_3_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_3_under_pipe_1; // sfix24
  reg  signed [23:0] coeff4_pipe; // sfix24_En24
  reg  signed [23:0] coeff4_pipe_1; // sfix24_En24
  reg  signed [47:0] product4_pipe; // sfix48_En24
  reg  signed [47:0] product4_pipe_1; // sfix48_En24
  wire signed [47:0] product3; // sfix48_En24
  reg  signed [23:0] delay_pipeline_2_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_2_under_pipe_1; // sfix24
  reg  signed [23:0] coeff3_pipe; // sfix24_En24
  reg  signed [23:0] coeff3_pipe_1; // sfix24_En24
  reg  signed [47:0] product3_pipe; // sfix48_En24
  reg  signed [47:0] product3_pipe_1; // sfix48_En24
  wire signed [47:0] product2; // sfix48_En24
  reg  signed [23:0] delay_pipeline_1_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_1_under_pipe_1; // sfix24
  reg  signed [23:0] coeff2_pipe; // sfix24_En24
  reg  signed [23:0] coeff2_pipe_1; // sfix24_En24
  reg  signed [47:0] product2_pipe; // sfix48_En24
  reg  signed [47:0] product2_pipe_1; // sfix48_En24
  wire signed [47:0] product1; // sfix48_En24
  reg  signed [23:0] delay_pipeline_0_under_pipe; // sfix24
  reg  signed [23:0] delay_pipeline_0_under_pipe_1; // sfix24
  reg  signed [23:0] coeff1_pipe; // sfix24_En24
  reg  signed [23:0] coeff1_pipe_1; // sfix24_En24
  reg  signed [47:0] product1_pipe; // sfix48_En24
  reg  signed [47:0] product1_pipe_1; // sfix48_En24
  wire signed [53:0] sum_final; // sfix54_En24
  wire signed [53:0] sum1_1; // sfix54_En24
  wire signed [47:0] add_signext; // sfix48_En24
  wire signed [47:0] add_signext_1; // sfix48_En24
  wire signed [48:0] add_temp; // sfix49_En24
  reg  signed [53:0] sumpipe1_1; // sfix54_En24
  wire signed [53:0] sum1_2; // sfix54_En24
  wire signed [47:0] add_signext_2; // sfix48_En24
  wire signed [47:0] add_signext_3; // sfix48_En24
  wire signed [48:0] add_temp_1; // sfix49_En24
  reg  signed [53:0] sumpipe1_2; // sfix54_En24
  wire signed [53:0] sum1_3; // sfix54_En24
  wire signed [47:0] add_signext_4; // sfix48_En24
  wire signed [47:0] add_signext_5; // sfix48_En24
  wire signed [48:0] add_temp_2; // sfix49_En24
  reg  signed [53:0] sumpipe1_3; // sfix54_En24
  wire signed [53:0] sum1_4; // sfix54_En24
  wire signed [47:0] add_signext_6; // sfix48_En24
  wire signed [47:0] add_signext_7; // sfix48_En24
  wire signed [48:0] add_temp_3; // sfix49_En24
  reg  signed [53:0] sumpipe1_4; // sfix54_En24
  wire signed [53:0] sum1_5; // sfix54_En24
  wire signed [47:0] add_signext_8; // sfix48_En24
  wire signed [47:0] add_signext_9; // sfix48_En24
  wire signed [48:0] add_temp_4; // sfix49_En24
  reg  signed [53:0] sumpipe1_5; // sfix54_En24
  wire signed [53:0] sum1_6; // sfix54_En24
  wire signed [47:0] add_signext_10; // sfix48_En24
  wire signed [47:0] add_signext_11; // sfix48_En24
  wire signed [48:0] add_temp_5; // sfix49_En24
  reg  signed [53:0] sumpipe1_6; // sfix54_En24
  wire signed [53:0] sum1_7; // sfix54_En24
  wire signed [47:0] add_signext_12; // sfix48_En24
  wire signed [47:0] add_signext_13; // sfix48_En24
  wire signed [48:0] add_temp_6; // sfix49_En24
  reg  signed [53:0] sumpipe1_7; // sfix54_En24
  wire signed [53:0] sum1_8; // sfix54_En24
  wire signed [47:0] add_signext_14; // sfix48_En24
  wire signed [47:0] add_signext_15; // sfix48_En24
  wire signed [48:0] add_temp_7; // sfix49_En24
  reg  signed [53:0] sumpipe1_8; // sfix54_En24
  wire signed [53:0] sum1_9; // sfix54_En24
  wire signed [47:0] add_signext_16; // sfix48_En24
  wire signed [47:0] add_signext_17; // sfix48_En24
  wire signed [48:0] add_temp_8; // sfix49_En24
  reg  signed [53:0] sumpipe1_9; // sfix54_En24
  wire signed [53:0] sum1_10; // sfix54_En24
  wire signed [47:0] add_signext_18; // sfix48_En24
  wire signed [47:0] add_signext_19; // sfix48_En24
  wire signed [48:0] add_temp_9; // sfix49_En24
  reg  signed [53:0] sumpipe1_10; // sfix54_En24
  wire signed [53:0] sum1_11; // sfix54_En24
  wire signed [47:0] add_signext_20; // sfix48_En24
  wire signed [47:0] add_signext_21; // sfix48_En24
  wire signed [48:0] add_temp_10; // sfix49_En24
  reg  signed [53:0] sumpipe1_11; // sfix54_En24
  wire signed [53:0] sum1_12; // sfix54_En24
  wire signed [47:0] add_signext_22; // sfix48_En24
  wire signed [47:0] add_signext_23; // sfix48_En24
  wire signed [48:0] add_temp_11; // sfix49_En24
  reg  signed [53:0] sumpipe1_12; // sfix54_En24
  wire signed [53:0] sum1_13; // sfix54_En24
  wire signed [47:0] add_signext_24; // sfix48_En24
  wire signed [47:0] add_signext_25; // sfix48_En24
  wire signed [48:0] add_temp_12; // sfix49_En24
  reg  signed [53:0] sumpipe1_13; // sfix54_En24
  wire signed [53:0] sum1_14; // sfix54_En24
  wire signed [47:0] add_signext_26; // sfix48_En24
  wire signed [47:0] add_signext_27; // sfix48_En24
  wire signed [48:0] add_temp_13; // sfix49_En24
  reg  signed [53:0] sumpipe1_14; // sfix54_En24
  wire signed [53:0] sum1_15; // sfix54_En24
  wire signed [47:0] add_signext_28; // sfix48_En24
  wire signed [47:0] add_signext_29; // sfix48_En24
  wire signed [48:0] add_temp_14; // sfix49_En24
  reg  signed [53:0] sumpipe1_15; // sfix54_En24
  wire signed [53:0] sum1_16; // sfix54_En24
  wire signed [47:0] add_signext_30; // sfix48_En24
  wire signed [47:0] add_signext_31; // sfix48_En24
  wire signed [48:0] add_temp_15; // sfix49_En24
  reg  signed [53:0] sumpipe1_16; // sfix54_En24
  wire signed [53:0] sum1_17; // sfix54_En24
  wire signed [47:0] add_signext_32; // sfix48_En24
  wire signed [47:0] add_signext_33; // sfix48_En24
  wire signed [48:0] add_temp_16; // sfix49_En24
  reg  signed [53:0] sumpipe1_17; // sfix54_En24
  wire signed [53:0] sum1_18; // sfix54_En24
  wire signed [47:0] add_signext_34; // sfix48_En24
  wire signed [47:0] add_signext_35; // sfix48_En24
  wire signed [48:0] add_temp_17; // sfix49_En24
  reg  signed [53:0] sumpipe1_18; // sfix54_En24
  wire signed [53:0] sum1_19; // sfix54_En24
  wire signed [47:0] add_signext_36; // sfix48_En24
  wire signed [47:0] add_signext_37; // sfix48_En24
  wire signed [48:0] add_temp_18; // sfix49_En24
  reg  signed [53:0] sumpipe1_19; // sfix54_En24
  wire signed [53:0] sum1_20; // sfix54_En24
  wire signed [47:0] add_signext_38; // sfix48_En24
  wire signed [47:0] add_signext_39; // sfix48_En24
  wire signed [48:0] add_temp_19; // sfix49_En24
  reg  signed [53:0] sumpipe1_20; // sfix54_En24
  wire signed [53:0] sum1_21; // sfix54_En24
  wire signed [47:0] add_signext_40; // sfix48_En24
  wire signed [47:0] add_signext_41; // sfix48_En24
  wire signed [48:0] add_temp_20; // sfix49_En24
  reg  signed [53:0] sumpipe1_21; // sfix54_En24
  wire signed [53:0] sum1_22; // sfix54_En24
  wire signed [47:0] add_signext_42; // sfix48_En24
  wire signed [47:0] add_signext_43; // sfix48_En24
  wire signed [48:0] add_temp_21; // sfix49_En24
  reg  signed [53:0] sumpipe1_22; // sfix54_En24
  wire signed [53:0] sum1_23; // sfix54_En24
  wire signed [47:0] add_signext_44; // sfix48_En24
  wire signed [47:0] add_signext_45; // sfix48_En24
  wire signed [48:0] add_temp_22; // sfix49_En24
  reg  signed [53:0] sumpipe1_23; // sfix54_En24
  wire signed [53:0] sum1_24; // sfix54_En24
  wire signed [47:0] add_signext_46; // sfix48_En24
  wire signed [47:0] add_signext_47; // sfix48_En24
  wire signed [48:0] add_temp_23; // sfix49_En24
  reg  signed [53:0] sumpipe1_24; // sfix54_En24
  wire signed [53:0] sum1_25; // sfix54_En24
  wire signed [47:0] add_signext_48; // sfix48_En24
  wire signed [47:0] add_signext_49; // sfix48_En24
  wire signed [48:0] add_temp_24; // sfix49_En24
  reg  signed [53:0] sumpipe1_25; // sfix54_En24
  wire signed [53:0] sum1_26; // sfix54_En24
  wire signed [47:0] add_signext_50; // sfix48_En24
  wire signed [47:0] add_signext_51; // sfix48_En24
  wire signed [48:0] add_temp_25; // sfix49_En24
  reg  signed [53:0] sumpipe1_26; // sfix54_En24
  wire signed [53:0] sum1_27; // sfix54_En24
  wire signed [47:0] add_signext_52; // sfix48_En24
  wire signed [47:0] add_signext_53; // sfix48_En24
  wire signed [48:0] add_temp_26; // sfix49_En24
  reg  signed [53:0] sumpipe1_27; // sfix54_En24
  wire signed [53:0] sum1_28; // sfix54_En24
  wire signed [47:0] add_signext_54; // sfix48_En24
  wire signed [47:0] add_signext_55; // sfix48_En24
  wire signed [48:0] add_temp_27; // sfix49_En24
  reg  signed [53:0] sumpipe1_28; // sfix54_En24
  wire signed [53:0] sum1_29; // sfix54_En24
  wire signed [47:0] add_signext_56; // sfix48_En24
  wire signed [47:0] add_signext_57; // sfix48_En24
  wire signed [48:0] add_temp_28; // sfix49_En24
  reg  signed [53:0] sumpipe1_29; // sfix54_En24
  wire signed [53:0] sum1_30; // sfix54_En24
  wire signed [47:0] add_signext_58; // sfix48_En24
  wire signed [47:0] add_signext_59; // sfix48_En24
  wire signed [48:0] add_temp_29; // sfix49_En24
  reg  signed [53:0] sumpipe1_30; // sfix54_En24
  reg  signed [47:0] sumpipe1_31; // sfix48_En24
  wire signed [53:0] sum2_1; // sfix54_En24
  wire signed [53:0] add_signext_60; // sfix54_En24
  wire signed [53:0] add_signext_61; // sfix54_En24
  wire signed [54:0] add_temp_30; // sfix55_En24
  reg  signed [53:0] sumpipe2_1; // sfix54_En24
  wire signed [53:0] sum2_2; // sfix54_En24
  wire signed [53:0] add_signext_62; // sfix54_En24
  wire signed [53:0] add_signext_63; // sfix54_En24
  wire signed [54:0] add_temp_31; // sfix55_En24
  reg  signed [53:0] sumpipe2_2; // sfix54_En24
  wire signed [53:0] sum2_3; // sfix54_En24
  wire signed [53:0] add_signext_64; // sfix54_En24
  wire signed [53:0] add_signext_65; // sfix54_En24
  wire signed [54:0] add_temp_32; // sfix55_En24
  reg  signed [53:0] sumpipe2_3; // sfix54_En24
  wire signed [53:0] sum2_4; // sfix54_En24
  wire signed [53:0] add_signext_66; // sfix54_En24
  wire signed [53:0] add_signext_67; // sfix54_En24
  wire signed [54:0] add_temp_33; // sfix55_En24
  reg  signed [53:0] sumpipe2_4; // sfix54_En24
  wire signed [53:0] sum2_5; // sfix54_En24
  wire signed [53:0] add_signext_68; // sfix54_En24
  wire signed [53:0] add_signext_69; // sfix54_En24
  wire signed [54:0] add_temp_34; // sfix55_En24
  reg  signed [53:0] sumpipe2_5; // sfix54_En24
  wire signed [53:0] sum2_6; // sfix54_En24
  wire signed [53:0] add_signext_70; // sfix54_En24
  wire signed [53:0] add_signext_71; // sfix54_En24
  wire signed [54:0] add_temp_35; // sfix55_En24
  reg  signed [53:0] sumpipe2_6; // sfix54_En24
  wire signed [53:0] sum2_7; // sfix54_En24
  wire signed [53:0] add_signext_72; // sfix54_En24
  wire signed [53:0] add_signext_73; // sfix54_En24
  wire signed [54:0] add_temp_36; // sfix55_En24
  reg  signed [53:0] sumpipe2_7; // sfix54_En24
  wire signed [53:0] sum2_8; // sfix54_En24
  wire signed [53:0] add_signext_74; // sfix54_En24
  wire signed [53:0] add_signext_75; // sfix54_En24
  wire signed [54:0] add_temp_37; // sfix55_En24
  reg  signed [53:0] sumpipe2_8; // sfix54_En24
  wire signed [53:0] sum2_9; // sfix54_En24
  wire signed [53:0] add_signext_76; // sfix54_En24
  wire signed [53:0] add_signext_77; // sfix54_En24
  wire signed [54:0] add_temp_38; // sfix55_En24
  reg  signed [53:0] sumpipe2_9; // sfix54_En24
  wire signed [53:0] sum2_10; // sfix54_En24
  wire signed [53:0] add_signext_78; // sfix54_En24
  wire signed [53:0] add_signext_79; // sfix54_En24
  wire signed [54:0] add_temp_39; // sfix55_En24
  reg  signed [53:0] sumpipe2_10; // sfix54_En24
  wire signed [53:0] sum2_11; // sfix54_En24
  wire signed [53:0] add_signext_80; // sfix54_En24
  wire signed [53:0] add_signext_81; // sfix54_En24
  wire signed [54:0] add_temp_40; // sfix55_En24
  reg  signed [53:0] sumpipe2_11; // sfix54_En24
  wire signed [53:0] sum2_12; // sfix54_En24
  wire signed [53:0] add_signext_82; // sfix54_En24
  wire signed [53:0] add_signext_83; // sfix54_En24
  wire signed [54:0] add_temp_41; // sfix55_En24
  reg  signed [53:0] sumpipe2_12; // sfix54_En24
  wire signed [53:0] sum2_13; // sfix54_En24
  wire signed [53:0] add_signext_84; // sfix54_En24
  wire signed [53:0] add_signext_85; // sfix54_En24
  wire signed [54:0] add_temp_42; // sfix55_En24
  reg  signed [53:0] sumpipe2_13; // sfix54_En24
  wire signed [53:0] sum2_14; // sfix54_En24
  wire signed [53:0] add_signext_86; // sfix54_En24
  wire signed [53:0] add_signext_87; // sfix54_En24
  wire signed [54:0] add_temp_43; // sfix55_En24
  reg  signed [53:0] sumpipe2_14; // sfix54_En24
  wire signed [53:0] sum2_15; // sfix54_En24
  wire signed [53:0] add_signext_88; // sfix54_En24
  wire signed [53:0] add_signext_89; // sfix54_En24
  wire signed [54:0] add_temp_44; // sfix55_En24
  reg  signed [53:0] sumpipe2_15; // sfix54_En24
  reg  signed [47:0] sumpipe2_16; // sfix48_En24
  wire signed [53:0] sum3_1; // sfix54_En24
  wire signed [53:0] add_signext_90; // sfix54_En24
  wire signed [53:0] add_signext_91; // sfix54_En24
  wire signed [54:0] add_temp_45; // sfix55_En24
  reg  signed [53:0] sumpipe3_1; // sfix54_En24
  wire signed [53:0] sum3_2; // sfix54_En24
  wire signed [53:0] add_signext_92; // sfix54_En24
  wire signed [53:0] add_signext_93; // sfix54_En24
  wire signed [54:0] add_temp_46; // sfix55_En24
  reg  signed [53:0] sumpipe3_2; // sfix54_En24
  wire signed [53:0] sum3_3; // sfix54_En24
  wire signed [53:0] add_signext_94; // sfix54_En24
  wire signed [53:0] add_signext_95; // sfix54_En24
  wire signed [54:0] add_temp_47; // sfix55_En24
  reg  signed [53:0] sumpipe3_3; // sfix54_En24
  wire signed [53:0] sum3_4; // sfix54_En24
  wire signed [53:0] add_signext_96; // sfix54_En24
  wire signed [53:0] add_signext_97; // sfix54_En24
  wire signed [54:0] add_temp_48; // sfix55_En24
  reg  signed [53:0] sumpipe3_4; // sfix54_En24
  wire signed [53:0] sum3_5; // sfix54_En24
  wire signed [53:0] add_signext_98; // sfix54_En24
  wire signed [53:0] add_signext_99; // sfix54_En24
  wire signed [54:0] add_temp_49; // sfix55_En24
  reg  signed [53:0] sumpipe3_5; // sfix54_En24
  wire signed [53:0] sum3_6; // sfix54_En24
  wire signed [53:0] add_signext_100; // sfix54_En24
  wire signed [53:0] add_signext_101; // sfix54_En24
  wire signed [54:0] add_temp_50; // sfix55_En24
  reg  signed [53:0] sumpipe3_6; // sfix54_En24
  wire signed [53:0] sum3_7; // sfix54_En24
  wire signed [53:0] add_signext_102; // sfix54_En24
  wire signed [53:0] add_signext_103; // sfix54_En24
  wire signed [54:0] add_temp_51; // sfix55_En24
  reg  signed [53:0] sumpipe3_7; // sfix54_En24
  wire signed [53:0] sum3_8; // sfix54_En24
  wire signed [53:0] add_signext_104; // sfix54_En24
  wire signed [53:0] add_signext_105; // sfix54_En24
  wire signed [54:0] add_temp_52; // sfix55_En24
  reg  signed [53:0] sumpipe3_8; // sfix54_En24
  wire signed [53:0] sum4_1; // sfix54_En24
  wire signed [53:0] add_signext_106; // sfix54_En24
  wire signed [53:0] add_signext_107; // sfix54_En24
  wire signed [54:0] add_temp_53; // sfix55_En24
  reg  signed [53:0] sumpipe4_1; // sfix54_En24
  wire signed [53:0] sum4_2; // sfix54_En24
  wire signed [53:0] add_signext_108; // sfix54_En24
  wire signed [53:0] add_signext_109; // sfix54_En24
  wire signed [54:0] add_temp_54; // sfix55_En24
  reg  signed [53:0] sumpipe4_2; // sfix54_En24
  wire signed [53:0] sum4_3; // sfix54_En24
  wire signed [53:0] add_signext_110; // sfix54_En24
  wire signed [53:0] add_signext_111; // sfix54_En24
  wire signed [54:0] add_temp_55; // sfix55_En24
  reg  signed [53:0] sumpipe4_3; // sfix54_En24
  wire signed [53:0] sum4_4; // sfix54_En24
  wire signed [53:0] add_signext_112; // sfix54_En24
  wire signed [53:0] add_signext_113; // sfix54_En24
  wire signed [54:0] add_temp_56; // sfix55_En24
  reg  signed [53:0] sumpipe4_4; // sfix54_En24
  wire signed [53:0] sum5_1; // sfix54_En24
  wire signed [53:0] add_signext_114; // sfix54_En24
  wire signed [53:0] add_signext_115; // sfix54_En24
  wire signed [54:0] add_temp_57; // sfix55_En24
  reg  signed [53:0] sumpipe5_1; // sfix54_En24
  wire signed [53:0] sum5_2; // sfix54_En24
  wire signed [53:0] add_signext_116; // sfix54_En24
  wire signed [53:0] add_signext_117; // sfix54_En24
  wire signed [54:0] add_temp_58; // sfix55_En24
  reg  signed [53:0] sumpipe5_2; // sfix54_En24
  wire signed [53:0] sum6_1; // sfix54_En24
  wire signed [53:0] add_signext_118; // sfix54_En24
  wire signed [53:0] add_signext_119; // sfix54_En24
  wire signed [54:0] add_temp_59; // sfix55_En24
  reg  signed [53:0] sumpipe6_1; // sfix54_En24
  reg  signed [53:0] output_register; // sfix54_En24

  // Block Statements
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
        delay_pipeline[18] <= 0;
        delay_pipeline[19] <= 0;
        delay_pipeline[20] <= 0;
        delay_pipeline[21] <= 0;
        delay_pipeline[22] <= 0;
        delay_pipeline[23] <= 0;
        delay_pipeline[24] <= 0;
        delay_pipeline[25] <= 0;
        delay_pipeline[26] <= 0;
        delay_pipeline[27] <= 0;
        delay_pipeline[28] <= 0;
        delay_pipeline[29] <= 0;
        delay_pipeline[30] <= 0;
        delay_pipeline[31] <= 0;
        delay_pipeline[32] <= 0;
        delay_pipeline[33] <= 0;
        delay_pipeline[34] <= 0;
        delay_pipeline[35] <= 0;
        delay_pipeline[36] <= 0;
        delay_pipeline[37] <= 0;
        delay_pipeline[38] <= 0;
        delay_pipeline[39] <= 0;
        delay_pipeline[40] <= 0;
        delay_pipeline[41] <= 0;
        delay_pipeline[42] <= 0;
        delay_pipeline[43] <= 0;
        delay_pipeline[44] <= 0;
        delay_pipeline[45] <= 0;
        delay_pipeline[46] <= 0;
        delay_pipeline[47] <= 0;
        delay_pipeline[48] <= 0;
        delay_pipeline[49] <= 0;
        delay_pipeline[50] <= 0;
        delay_pipeline[51] <= 0;
        delay_pipeline[52] <= 0;
        delay_pipeline[53] <= 0;
        delay_pipeline[54] <= 0;
        delay_pipeline[55] <= 0;
        delay_pipeline[56] <= 0;
        delay_pipeline[57] <= 0;
        delay_pipeline[58] <= 0;
        delay_pipeline[59] <= 0;
        delay_pipeline[60] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
          delay_pipeline[31] <= delay_pipeline[30];
          delay_pipeline[32] <= delay_pipeline[31];
          delay_pipeline[33] <= delay_pipeline[32];
          delay_pipeline[34] <= delay_pipeline[33];
          delay_pipeline[35] <= delay_pipeline[34];
          delay_pipeline[36] <= delay_pipeline[35];
          delay_pipeline[37] <= delay_pipeline[36];
          delay_pipeline[38] <= delay_pipeline[37];
          delay_pipeline[39] <= delay_pipeline[38];
          delay_pipeline[40] <= delay_pipeline[39];
          delay_pipeline[41] <= delay_pipeline[40];
          delay_pipeline[42] <= delay_pipeline[41];
          delay_pipeline[43] <= delay_pipeline[42];
          delay_pipeline[44] <= delay_pipeline[43];
          delay_pipeline[45] <= delay_pipeline[44];
          delay_pipeline[46] <= delay_pipeline[45];
          delay_pipeline[47] <= delay_pipeline[46];
          delay_pipeline[48] <= delay_pipeline[47];
          delay_pipeline[49] <= delay_pipeline[48];
          delay_pipeline[50] <= delay_pipeline[49];
          delay_pipeline[51] <= delay_pipeline[50];
          delay_pipeline[52] <= delay_pipeline[51];
          delay_pipeline[53] <= delay_pipeline[52];
          delay_pipeline[54] <= delay_pipeline[53];
          delay_pipeline[55] <= delay_pipeline[54];
          delay_pipeline[56] <= delay_pipeline[55];
          delay_pipeline[57] <= delay_pipeline[56];
          delay_pipeline[58] <= delay_pipeline[57];
          delay_pipeline[59] <= delay_pipeline[58];
          delay_pipeline[60] <= delay_pipeline[59];
        end
      end
    end // Delay_Pipeline_process


  always @ (posedge clk or posedge reset)
    begin: temp_process1
      if (reset == 1'b1) begin
        delay_pipeline_60_under_pipe <= 0;
        delay_pipeline_60_under_pipe_1 <= 0;
        coeff61_pipe <= 0;
        coeff61_pipe_1 <= 0;
        product61_pipe <= 0;
        product61_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_60_under_pipe <= delay_pipeline[60];
          delay_pipeline_60_under_pipe_1 <= delay_pipeline_60_under_pipe;
          coeff61_pipe <= coeff61;
          coeff61_pipe_1 <= coeff61_pipe;

          product61_pipe <= delay_pipeline_60_under_pipe_1 * coeff61_pipe_1;

          product61_pipe_1 <= product61_pipe;
        end
      end
    end // temp_process1

  assign product61 = product61_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process2
      if (reset == 1'b1) begin
        delay_pipeline_59_under_pipe <= 0;
        delay_pipeline_59_under_pipe_1 <= 0;
        coeff60_pipe <= 0;
        coeff60_pipe_1 <= 0;
        product60_pipe <= 0;
        product60_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_59_under_pipe <= delay_pipeline[59];
          delay_pipeline_59_under_pipe_1 <= delay_pipeline_59_under_pipe;
          coeff60_pipe <= coeff60;
          coeff60_pipe_1 <= coeff60_pipe;

          product60_pipe <= delay_pipeline_59_under_pipe_1 * coeff60_pipe_1;

          product60_pipe_1 <= product60_pipe;
        end
      end
    end // temp_process2

  assign product60 = product60_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process3
      if (reset == 1'b1) begin
        delay_pipeline_58_under_pipe <= 0;
        delay_pipeline_58_under_pipe_1 <= 0;
        coeff59_pipe <= 0;
        coeff59_pipe_1 <= 0;
        product59_pipe <= 0;
        product59_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_58_under_pipe <= delay_pipeline[58];
          delay_pipeline_58_under_pipe_1 <= delay_pipeline_58_under_pipe;
          coeff59_pipe <= coeff59;
          coeff59_pipe_1 <= coeff59_pipe;

          product59_pipe <= delay_pipeline_58_under_pipe_1 * coeff59_pipe_1;

          product59_pipe_1 <= product59_pipe;
        end
      end
    end // temp_process3

  assign product59 = product59_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process4
      if (reset == 1'b1) begin
        delay_pipeline_57_under_pipe <= 0;
        delay_pipeline_57_under_pipe_1 <= 0;
        coeff58_pipe <= 0;
        coeff58_pipe_1 <= 0;
        product58_pipe <= 0;
        product58_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_57_under_pipe <= delay_pipeline[57];
          delay_pipeline_57_under_pipe_1 <= delay_pipeline_57_under_pipe;
          coeff58_pipe <= coeff58;
          coeff58_pipe_1 <= coeff58_pipe;

          product58_pipe <= delay_pipeline_57_under_pipe_1 * coeff58_pipe_1;

          product58_pipe_1 <= product58_pipe;
        end
      end
    end // temp_process4

  assign product58 = product58_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process5
      if (reset == 1'b1) begin
        delay_pipeline_56_under_pipe <= 0;
        delay_pipeline_56_under_pipe_1 <= 0;
        coeff57_pipe <= 0;
        coeff57_pipe_1 <= 0;
        product57_pipe <= 0;
        product57_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_56_under_pipe <= delay_pipeline[56];
          delay_pipeline_56_under_pipe_1 <= delay_pipeline_56_under_pipe;
          coeff57_pipe <= coeff57;
          coeff57_pipe_1 <= coeff57_pipe;

          product57_pipe <= delay_pipeline_56_under_pipe_1 * coeff57_pipe_1;

          product57_pipe_1 <= product57_pipe;
        end
      end
    end // temp_process5

  assign product57 = product57_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process6
      if (reset == 1'b1) begin
        delay_pipeline_55_under_pipe <= 0;
        delay_pipeline_55_under_pipe_1 <= 0;
        coeff56_pipe <= 0;
        coeff56_pipe_1 <= 0;
        product56_pipe <= 0;
        product56_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_55_under_pipe <= delay_pipeline[55];
          delay_pipeline_55_under_pipe_1 <= delay_pipeline_55_under_pipe;
          coeff56_pipe <= coeff56;
          coeff56_pipe_1 <= coeff56_pipe;

          product56_pipe <= delay_pipeline_55_under_pipe_1 * coeff56_pipe_1;

          product56_pipe_1 <= product56_pipe;
        end
      end
    end // temp_process6

  assign product56 = product56_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process7
      if (reset == 1'b1) begin
        delay_pipeline_54_under_pipe <= 0;
        delay_pipeline_54_under_pipe_1 <= 0;
        coeff55_pipe <= 0;
        coeff55_pipe_1 <= 0;
        product55_pipe <= 0;
        product55_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_54_under_pipe <= delay_pipeline[54];
          delay_pipeline_54_under_pipe_1 <= delay_pipeline_54_under_pipe;
          coeff55_pipe <= coeff55;
          coeff55_pipe_1 <= coeff55_pipe;

          product55_pipe <= delay_pipeline_54_under_pipe_1 * coeff55_pipe_1;

          product55_pipe_1 <= product55_pipe;
        end
      end
    end // temp_process7

  assign product55 = product55_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process8
      if (reset == 1'b1) begin
        delay_pipeline_53_under_pipe <= 0;
        delay_pipeline_53_under_pipe_1 <= 0;
        coeff54_pipe <= 0;
        coeff54_pipe_1 <= 0;
        product54_pipe <= 0;
        product54_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_53_under_pipe <= delay_pipeline[53];
          delay_pipeline_53_under_pipe_1 <= delay_pipeline_53_under_pipe;
          coeff54_pipe <= coeff54;
          coeff54_pipe_1 <= coeff54_pipe;

          product54_pipe <= delay_pipeline_53_under_pipe_1 * coeff54_pipe_1;

          product54_pipe_1 <= product54_pipe;
        end
      end
    end // temp_process8

  assign product54 = product54_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process9
      if (reset == 1'b1) begin
        delay_pipeline_52_under_pipe <= 0;
        delay_pipeline_52_under_pipe_1 <= 0;
        coeff53_pipe <= 0;
        coeff53_pipe_1 <= 0;
        product53_pipe <= 0;
        product53_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_52_under_pipe <= delay_pipeline[52];
          delay_pipeline_52_under_pipe_1 <= delay_pipeline_52_under_pipe;
          coeff53_pipe <= coeff53;
          coeff53_pipe_1 <= coeff53_pipe;

          product53_pipe <= delay_pipeline_52_under_pipe_1 * coeff53_pipe_1;

          product53_pipe_1 <= product53_pipe;
        end
      end
    end // temp_process9

  assign product53 = product53_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process10
      if (reset == 1'b1) begin
        delay_pipeline_51_under_pipe <= 0;
        delay_pipeline_51_under_pipe_1 <= 0;
        coeff52_pipe <= 0;
        coeff52_pipe_1 <= 0;
        product52_pipe <= 0;
        product52_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_51_under_pipe <= delay_pipeline[51];
          delay_pipeline_51_under_pipe_1 <= delay_pipeline_51_under_pipe;
          coeff52_pipe <= coeff52;
          coeff52_pipe_1 <= coeff52_pipe;

          product52_pipe <= delay_pipeline_51_under_pipe_1 * coeff52_pipe_1;

          product52_pipe_1 <= product52_pipe;
        end
      end
    end // temp_process10

  assign product52 = product52_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process11
      if (reset == 1'b1) begin
        delay_pipeline_50_under_pipe <= 0;
        delay_pipeline_50_under_pipe_1 <= 0;
        coeff51_pipe <= 0;
        coeff51_pipe_1 <= 0;
        product51_pipe <= 0;
        product51_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_50_under_pipe <= delay_pipeline[50];
          delay_pipeline_50_under_pipe_1 <= delay_pipeline_50_under_pipe;
          coeff51_pipe <= coeff51;
          coeff51_pipe_1 <= coeff51_pipe;

          product51_pipe <= delay_pipeline_50_under_pipe_1 * coeff51_pipe_1;

          product51_pipe_1 <= product51_pipe;
        end
      end
    end // temp_process11

  assign product51 = product51_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process12
      if (reset == 1'b1) begin
        delay_pipeline_49_under_pipe <= 0;
        delay_pipeline_49_under_pipe_1 <= 0;
        coeff50_pipe <= 0;
        coeff50_pipe_1 <= 0;
        product50_pipe <= 0;
        product50_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_49_under_pipe <= delay_pipeline[49];
          delay_pipeline_49_under_pipe_1 <= delay_pipeline_49_under_pipe;
          coeff50_pipe <= coeff50;
          coeff50_pipe_1 <= coeff50_pipe;

          product50_pipe <= delay_pipeline_49_under_pipe_1 * coeff50_pipe_1;

          product50_pipe_1 <= product50_pipe;
        end
      end
    end // temp_process12

  assign product50 = product50_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process13
      if (reset == 1'b1) begin
        delay_pipeline_48_under_pipe <= 0;
        delay_pipeline_48_under_pipe_1 <= 0;
        coeff49_pipe <= 0;
        coeff49_pipe_1 <= 0;
        product49_pipe <= 0;
        product49_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_48_under_pipe <= delay_pipeline[48];
          delay_pipeline_48_under_pipe_1 <= delay_pipeline_48_under_pipe;
          coeff49_pipe <= coeff49;
          coeff49_pipe_1 <= coeff49_pipe;

          product49_pipe <= delay_pipeline_48_under_pipe_1 * coeff49_pipe_1;

          product49_pipe_1 <= product49_pipe;
        end
      end
    end // temp_process13

  assign product49 = product49_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process14
      if (reset == 1'b1) begin
        delay_pipeline_47_under_pipe <= 0;
        delay_pipeline_47_under_pipe_1 <= 0;
        coeff48_pipe <= 0;
        coeff48_pipe_1 <= 0;
        product48_pipe <= 0;
        product48_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_47_under_pipe <= delay_pipeline[47];
          delay_pipeline_47_under_pipe_1 <= delay_pipeline_47_under_pipe;
          coeff48_pipe <= coeff48;
          coeff48_pipe_1 <= coeff48_pipe;

          product48_pipe <= delay_pipeline_47_under_pipe_1 * coeff48_pipe_1;

          product48_pipe_1 <= product48_pipe;
        end
      end
    end // temp_process14

  assign product48 = product48_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process15
      if (reset == 1'b1) begin
        delay_pipeline_46_under_pipe <= 0;
        delay_pipeline_46_under_pipe_1 <= 0;
        coeff47_pipe <= 0;
        coeff47_pipe_1 <= 0;
        product47_pipe <= 0;
        product47_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_46_under_pipe <= delay_pipeline[46];
          delay_pipeline_46_under_pipe_1 <= delay_pipeline_46_under_pipe;
          coeff47_pipe <= coeff47;
          coeff47_pipe_1 <= coeff47_pipe;

          product47_pipe <= delay_pipeline_46_under_pipe_1 * coeff47_pipe_1;

          product47_pipe_1 <= product47_pipe;
        end
      end
    end // temp_process15

  assign product47 = product47_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process16
      if (reset == 1'b1) begin
        delay_pipeline_45_under_pipe <= 0;
        delay_pipeline_45_under_pipe_1 <= 0;
        coeff46_pipe <= 0;
        coeff46_pipe_1 <= 0;
        product46_pipe <= 0;
        product46_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_45_under_pipe <= delay_pipeline[45];
          delay_pipeline_45_under_pipe_1 <= delay_pipeline_45_under_pipe;
          coeff46_pipe <= coeff46;
          coeff46_pipe_1 <= coeff46_pipe;

          product46_pipe <= delay_pipeline_45_under_pipe_1 * coeff46_pipe_1;

          product46_pipe_1 <= product46_pipe;
        end
      end
    end // temp_process16

  assign product46 = product46_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process17
      if (reset == 1'b1) begin
        delay_pipeline_44_under_pipe <= 0;
        delay_pipeline_44_under_pipe_1 <= 0;
        coeff45_pipe <= 0;
        coeff45_pipe_1 <= 0;
        product45_pipe <= 0;
        product45_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_44_under_pipe <= delay_pipeline[44];
          delay_pipeline_44_under_pipe_1 <= delay_pipeline_44_under_pipe;
          coeff45_pipe <= coeff45;
          coeff45_pipe_1 <= coeff45_pipe;

          product45_pipe <= delay_pipeline_44_under_pipe_1 * coeff45_pipe_1;

          product45_pipe_1 <= product45_pipe;
        end
      end
    end // temp_process17

  assign product45 = product45_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process18
      if (reset == 1'b1) begin
        delay_pipeline_43_under_pipe <= 0;
        delay_pipeline_43_under_pipe_1 <= 0;
        coeff44_pipe <= 0;
        coeff44_pipe_1 <= 0;
        product44_pipe <= 0;
        product44_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_43_under_pipe <= delay_pipeline[43];
          delay_pipeline_43_under_pipe_1 <= delay_pipeline_43_under_pipe;
          coeff44_pipe <= coeff44;
          coeff44_pipe_1 <= coeff44_pipe;

          product44_pipe <= delay_pipeline_43_under_pipe_1 * coeff44_pipe_1;

          product44_pipe_1 <= product44_pipe;
        end
      end
    end // temp_process18

  assign product44 = product44_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process19
      if (reset == 1'b1) begin
        delay_pipeline_42_under_pipe <= 0;
        delay_pipeline_42_under_pipe_1 <= 0;
        coeff43_pipe <= 0;
        coeff43_pipe_1 <= 0;
        product43_pipe <= 0;
        product43_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_42_under_pipe <= delay_pipeline[42];
          delay_pipeline_42_under_pipe_1 <= delay_pipeline_42_under_pipe;
          coeff43_pipe <= coeff43;
          coeff43_pipe_1 <= coeff43_pipe;

          product43_pipe <= delay_pipeline_42_under_pipe_1 * coeff43_pipe_1;

          product43_pipe_1 <= product43_pipe;
        end
      end
    end // temp_process19

  assign product43 = product43_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process20
      if (reset == 1'b1) begin
        delay_pipeline_41_under_pipe <= 0;
        delay_pipeline_41_under_pipe_1 <= 0;
        coeff42_pipe <= 0;
        coeff42_pipe_1 <= 0;
        product42_pipe <= 0;
        product42_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_41_under_pipe <= delay_pipeline[41];
          delay_pipeline_41_under_pipe_1 <= delay_pipeline_41_under_pipe;
          coeff42_pipe <= coeff42;
          coeff42_pipe_1 <= coeff42_pipe;

          product42_pipe <= delay_pipeline_41_under_pipe_1 * coeff42_pipe_1;

          product42_pipe_1 <= product42_pipe;
        end
      end
    end // temp_process20

  assign product42 = product42_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process21
      if (reset == 1'b1) begin
        delay_pipeline_40_under_pipe <= 0;
        delay_pipeline_40_under_pipe_1 <= 0;
        coeff41_pipe <= 0;
        coeff41_pipe_1 <= 0;
        product41_pipe <= 0;
        product41_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_40_under_pipe <= delay_pipeline[40];
          delay_pipeline_40_under_pipe_1 <= delay_pipeline_40_under_pipe;
          coeff41_pipe <= coeff41;
          coeff41_pipe_1 <= coeff41_pipe;

          product41_pipe <= delay_pipeline_40_under_pipe_1 * coeff41_pipe_1;

          product41_pipe_1 <= product41_pipe;
        end
      end
    end // temp_process21

  assign product41 = product41_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process22
      if (reset == 1'b1) begin
        delay_pipeline_39_under_pipe <= 0;
        delay_pipeline_39_under_pipe_1 <= 0;
        coeff40_pipe <= 0;
        coeff40_pipe_1 <= 0;
        product40_pipe <= 0;
        product40_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_39_under_pipe <= delay_pipeline[39];
          delay_pipeline_39_under_pipe_1 <= delay_pipeline_39_under_pipe;
          coeff40_pipe <= coeff40;
          coeff40_pipe_1 <= coeff40_pipe;

          product40_pipe <= delay_pipeline_39_under_pipe_1 * coeff40_pipe_1;

          product40_pipe_1 <= product40_pipe;
        end
      end
    end // temp_process22

  assign product40 = product40_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process23
      if (reset == 1'b1) begin
        delay_pipeline_38_under_pipe <= 0;
        delay_pipeline_38_under_pipe_1 <= 0;
        coeff39_pipe <= 0;
        coeff39_pipe_1 <= 0;
        product39_pipe <= 0;
        product39_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_38_under_pipe <= delay_pipeline[38];
          delay_pipeline_38_under_pipe_1 <= delay_pipeline_38_under_pipe;
          coeff39_pipe <= coeff39;
          coeff39_pipe_1 <= coeff39_pipe;

          product39_pipe <= delay_pipeline_38_under_pipe_1 * coeff39_pipe_1;

          product39_pipe_1 <= product39_pipe;
        end
      end
    end // temp_process23

  assign product39 = product39_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process24
      if (reset == 1'b1) begin
        delay_pipeline_37_under_pipe <= 0;
        delay_pipeline_37_under_pipe_1 <= 0;
        coeff38_pipe <= 0;
        coeff38_pipe_1 <= 0;
        product38_pipe <= 0;
        product38_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_37_under_pipe <= delay_pipeline[37];
          delay_pipeline_37_under_pipe_1 <= delay_pipeline_37_under_pipe;
          coeff38_pipe <= coeff38;
          coeff38_pipe_1 <= coeff38_pipe;

          product38_pipe <= delay_pipeline_37_under_pipe_1 * coeff38_pipe_1;

          product38_pipe_1 <= product38_pipe;
        end
      end
    end // temp_process24

  assign product38 = product38_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process25
      if (reset == 1'b1) begin
        delay_pipeline_36_under_pipe <= 0;
        delay_pipeline_36_under_pipe_1 <= 0;
        coeff37_pipe <= 0;
        coeff37_pipe_1 <= 0;
        product37_pipe <= 0;
        product37_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_36_under_pipe <= delay_pipeline[36];
          delay_pipeline_36_under_pipe_1 <= delay_pipeline_36_under_pipe;
          coeff37_pipe <= coeff37;
          coeff37_pipe_1 <= coeff37_pipe;

          product37_pipe <= delay_pipeline_36_under_pipe_1 * coeff37_pipe_1;

          product37_pipe_1 <= product37_pipe;
        end
      end
    end // temp_process25

  assign product37 = product37_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process26
      if (reset == 1'b1) begin
        delay_pipeline_35_under_pipe <= 0;
        delay_pipeline_35_under_pipe_1 <= 0;
        coeff36_pipe <= 0;
        coeff36_pipe_1 <= 0;
        product36_pipe <= 0;
        product36_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_35_under_pipe <= delay_pipeline[35];
          delay_pipeline_35_under_pipe_1 <= delay_pipeline_35_under_pipe;
          coeff36_pipe <= coeff36;
          coeff36_pipe_1 <= coeff36_pipe;

          product36_pipe <= delay_pipeline_35_under_pipe_1 * coeff36_pipe_1;

          product36_pipe_1 <= product36_pipe;
        end
      end
    end // temp_process26

  assign product36 = product36_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process27
      if (reset == 1'b1) begin
        delay_pipeline_34_under_pipe <= 0;
        delay_pipeline_34_under_pipe_1 <= 0;
        coeff35_pipe <= 0;
        coeff35_pipe_1 <= 0;
        product35_pipe <= 0;
        product35_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_34_under_pipe <= delay_pipeline[34];
          delay_pipeline_34_under_pipe_1 <= delay_pipeline_34_under_pipe;
          coeff35_pipe <= coeff35;
          coeff35_pipe_1 <= coeff35_pipe;

          product35_pipe <= delay_pipeline_34_under_pipe_1 * coeff35_pipe_1;

          product35_pipe_1 <= product35_pipe;
        end
      end
    end // temp_process27

  assign product35 = product35_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process28
      if (reset == 1'b1) begin
        delay_pipeline_33_under_pipe <= 0;
        delay_pipeline_33_under_pipe_1 <= 0;
        coeff34_pipe <= 0;
        coeff34_pipe_1 <= 0;
        product34_pipe <= 0;
        product34_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_33_under_pipe <= delay_pipeline[33];
          delay_pipeline_33_under_pipe_1 <= delay_pipeline_33_under_pipe;
          coeff34_pipe <= coeff34;
          coeff34_pipe_1 <= coeff34_pipe;

          product34_pipe <= delay_pipeline_33_under_pipe_1 * coeff34_pipe_1;

          product34_pipe_1 <= product34_pipe;
        end
      end
    end // temp_process28

  assign product34 = product34_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process29
      if (reset == 1'b1) begin
        delay_pipeline_32_under_pipe <= 0;
        delay_pipeline_32_under_pipe_1 <= 0;
        coeff33_pipe <= 0;
        coeff33_pipe_1 <= 0;
        product33_pipe <= 0;
        product33_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_32_under_pipe <= delay_pipeline[32];
          delay_pipeline_32_under_pipe_1 <= delay_pipeline_32_under_pipe;
          coeff33_pipe <= coeff33;
          coeff33_pipe_1 <= coeff33_pipe;

          product33_pipe <= delay_pipeline_32_under_pipe_1 * coeff33_pipe_1;

          product33_pipe_1 <= product33_pipe;
        end
      end
    end // temp_process29

  assign product33 = product33_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process30
      if (reset == 1'b1) begin
        delay_pipeline_31_under_pipe <= 0;
        delay_pipeline_31_under_pipe_1 <= 0;
        coeff32_pipe <= 0;
        coeff32_pipe_1 <= 0;
        product32_pipe <= 0;
        product32_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_31_under_pipe <= delay_pipeline[31];
          delay_pipeline_31_under_pipe_1 <= delay_pipeline_31_under_pipe;
          coeff32_pipe <= coeff32;
          coeff32_pipe_1 <= coeff32_pipe;

          product32_pipe <= delay_pipeline_31_under_pipe_1 * coeff32_pipe_1;

          product32_pipe_1 <= product32_pipe;
        end
      end
    end // temp_process30

  assign product32 = product32_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process31
      if (reset == 1'b1) begin
        delay_pipeline_30_under_pipe <= 0;
        delay_pipeline_30_under_pipe_1 <= 0;
        coeff31_pipe <= 0;
        coeff31_pipe_1 <= 0;
        product31_pipe <= 0;
        product31_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_30_under_pipe <= delay_pipeline[30];
          delay_pipeline_30_under_pipe_1 <= delay_pipeline_30_under_pipe;
          coeff31_pipe <= coeff31;
          coeff31_pipe_1 <= coeff31_pipe;

          product31_pipe <= delay_pipeline_30_under_pipe_1 * coeff31_pipe_1;

          product31_pipe_1 <= product31_pipe;
        end
      end
    end // temp_process31

  assign product31 = product31_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process32
      if (reset == 1'b1) begin
        delay_pipeline_29_under_pipe <= 0;
        delay_pipeline_29_under_pipe_1 <= 0;
        coeff30_pipe <= 0;
        coeff30_pipe_1 <= 0;
        product30_pipe <= 0;
        product30_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_29_under_pipe <= delay_pipeline[29];
          delay_pipeline_29_under_pipe_1 <= delay_pipeline_29_under_pipe;
          coeff30_pipe <= coeff30;
          coeff30_pipe_1 <= coeff30_pipe;

          product30_pipe <= delay_pipeline_29_under_pipe_1 * coeff30_pipe_1;

          product30_pipe_1 <= product30_pipe;
        end
      end
    end // temp_process32

  assign product30 = product30_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process33
      if (reset == 1'b1) begin
        delay_pipeline_28_under_pipe <= 0;
        delay_pipeline_28_under_pipe_1 <= 0;
        coeff29_pipe <= 0;
        coeff29_pipe_1 <= 0;
        product29_pipe <= 0;
        product29_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_28_under_pipe <= delay_pipeline[28];
          delay_pipeline_28_under_pipe_1 <= delay_pipeline_28_under_pipe;
          coeff29_pipe <= coeff29;
          coeff29_pipe_1 <= coeff29_pipe;

          product29_pipe <= delay_pipeline_28_under_pipe_1 * coeff29_pipe_1;

          product29_pipe_1 <= product29_pipe;
        end
      end
    end // temp_process33

  assign product29 = product29_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process34
      if (reset == 1'b1) begin
        delay_pipeline_27_under_pipe <= 0;
        delay_pipeline_27_under_pipe_1 <= 0;
        coeff28_pipe <= 0;
        coeff28_pipe_1 <= 0;
        product28_pipe <= 0;
        product28_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_27_under_pipe <= delay_pipeline[27];
          delay_pipeline_27_under_pipe_1 <= delay_pipeline_27_under_pipe;
          coeff28_pipe <= coeff28;
          coeff28_pipe_1 <= coeff28_pipe;

          product28_pipe <= delay_pipeline_27_under_pipe_1 * coeff28_pipe_1;

          product28_pipe_1 <= product28_pipe;
        end
      end
    end // temp_process34

  assign product28 = product28_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process35
      if (reset == 1'b1) begin
        delay_pipeline_26_under_pipe <= 0;
        delay_pipeline_26_under_pipe_1 <= 0;
        coeff27_pipe <= 0;
        coeff27_pipe_1 <= 0;
        product27_pipe <= 0;
        product27_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_26_under_pipe <= delay_pipeline[26];
          delay_pipeline_26_under_pipe_1 <= delay_pipeline_26_under_pipe;
          coeff27_pipe <= coeff27;
          coeff27_pipe_1 <= coeff27_pipe;

          product27_pipe <= delay_pipeline_26_under_pipe_1 * coeff27_pipe_1;

          product27_pipe_1 <= product27_pipe;
        end
      end
    end // temp_process35

  assign product27 = product27_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process36
      if (reset == 1'b1) begin
        delay_pipeline_25_under_pipe <= 0;
        delay_pipeline_25_under_pipe_1 <= 0;
        coeff26_pipe <= 0;
        coeff26_pipe_1 <= 0;
        product26_pipe <= 0;
        product26_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_25_under_pipe <= delay_pipeline[25];
          delay_pipeline_25_under_pipe_1 <= delay_pipeline_25_under_pipe;
          coeff26_pipe <= coeff26;
          coeff26_pipe_1 <= coeff26_pipe;

          product26_pipe <= delay_pipeline_25_under_pipe_1 * coeff26_pipe_1;

          product26_pipe_1 <= product26_pipe;
        end
      end
    end // temp_process36

  assign product26 = product26_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process37
      if (reset == 1'b1) begin
        delay_pipeline_24_under_pipe <= 0;
        delay_pipeline_24_under_pipe_1 <= 0;
        coeff25_pipe <= 0;
        coeff25_pipe_1 <= 0;
        product25_pipe <= 0;
        product25_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_24_under_pipe <= delay_pipeline[24];
          delay_pipeline_24_under_pipe_1 <= delay_pipeline_24_under_pipe;
          coeff25_pipe <= coeff25;
          coeff25_pipe_1 <= coeff25_pipe;

          product25_pipe <= delay_pipeline_24_under_pipe_1 * coeff25_pipe_1;

          product25_pipe_1 <= product25_pipe;
        end
      end
    end // temp_process37

  assign product25 = product25_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process38
      if (reset == 1'b1) begin
        delay_pipeline_23_under_pipe <= 0;
        delay_pipeline_23_under_pipe_1 <= 0;
        coeff24_pipe <= 0;
        coeff24_pipe_1 <= 0;
        product24_pipe <= 0;
        product24_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_23_under_pipe <= delay_pipeline[23];
          delay_pipeline_23_under_pipe_1 <= delay_pipeline_23_under_pipe;
          coeff24_pipe <= coeff24;
          coeff24_pipe_1 <= coeff24_pipe;

          product24_pipe <= delay_pipeline_23_under_pipe_1 * coeff24_pipe_1;

          product24_pipe_1 <= product24_pipe;
        end
      end
    end // temp_process38

  assign product24 = product24_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process39
      if (reset == 1'b1) begin
        delay_pipeline_22_under_pipe <= 0;
        delay_pipeline_22_under_pipe_1 <= 0;
        coeff23_pipe <= 0;
        coeff23_pipe_1 <= 0;
        product23_pipe <= 0;
        product23_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_22_under_pipe <= delay_pipeline[22];
          delay_pipeline_22_under_pipe_1 <= delay_pipeline_22_under_pipe;
          coeff23_pipe <= coeff23;
          coeff23_pipe_1 <= coeff23_pipe;

          product23_pipe <= delay_pipeline_22_under_pipe_1 * coeff23_pipe_1;

          product23_pipe_1 <= product23_pipe;
        end
      end
    end // temp_process39

  assign product23 = product23_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process40
      if (reset == 1'b1) begin
        delay_pipeline_21_under_pipe <= 0;
        delay_pipeline_21_under_pipe_1 <= 0;
        coeff22_pipe <= 0;
        coeff22_pipe_1 <= 0;
        product22_pipe <= 0;
        product22_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_21_under_pipe <= delay_pipeline[21];
          delay_pipeline_21_under_pipe_1 <= delay_pipeline_21_under_pipe;
          coeff22_pipe <= coeff22;
          coeff22_pipe_1 <= coeff22_pipe;

          product22_pipe <= delay_pipeline_21_under_pipe_1 * coeff22_pipe_1;

          product22_pipe_1 <= product22_pipe;
        end
      end
    end // temp_process40

  assign product22 = product22_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process41
      if (reset == 1'b1) begin
        delay_pipeline_20_under_pipe <= 0;
        delay_pipeline_20_under_pipe_1 <= 0;
        coeff21_pipe <= 0;
        coeff21_pipe_1 <= 0;
        product21_pipe <= 0;
        product21_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_20_under_pipe <= delay_pipeline[20];
          delay_pipeline_20_under_pipe_1 <= delay_pipeline_20_under_pipe;
          coeff21_pipe <= coeff21;
          coeff21_pipe_1 <= coeff21_pipe;

          product21_pipe <= delay_pipeline_20_under_pipe_1 * coeff21_pipe_1;

          product21_pipe_1 <= product21_pipe;
        end
      end
    end // temp_process41

  assign product21 = product21_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process42
      if (reset == 1'b1) begin
        delay_pipeline_19_under_pipe <= 0;
        delay_pipeline_19_under_pipe_1 <= 0;
        coeff20_pipe <= 0;
        coeff20_pipe_1 <= 0;
        product20_pipe <= 0;
        product20_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_19_under_pipe <= delay_pipeline[19];
          delay_pipeline_19_under_pipe_1 <= delay_pipeline_19_under_pipe;
          coeff20_pipe <= coeff20;
          coeff20_pipe_1 <= coeff20_pipe;

          product20_pipe <= delay_pipeline_19_under_pipe_1 * coeff20_pipe_1;

          product20_pipe_1 <= product20_pipe;
        end
      end
    end // temp_process42

  assign product20 = product20_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process43
      if (reset == 1'b1) begin
        delay_pipeline_18_under_pipe <= 0;
        delay_pipeline_18_under_pipe_1 <= 0;
        coeff19_pipe <= 0;
        coeff19_pipe_1 <= 0;
        product19_pipe <= 0;
        product19_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_18_under_pipe <= delay_pipeline[18];
          delay_pipeline_18_under_pipe_1 <= delay_pipeline_18_under_pipe;
          coeff19_pipe <= coeff19;
          coeff19_pipe_1 <= coeff19_pipe;

          product19_pipe <= delay_pipeline_18_under_pipe_1 * coeff19_pipe_1;

          product19_pipe_1 <= product19_pipe;
        end
      end
    end // temp_process43

  assign product19 = product19_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process44
      if (reset == 1'b1) begin
        delay_pipeline_17_under_pipe <= 0;
        delay_pipeline_17_under_pipe_1 <= 0;
        coeff18_pipe <= 0;
        coeff18_pipe_1 <= 0;
        product18_pipe <= 0;
        product18_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_17_under_pipe <= delay_pipeline[17];
          delay_pipeline_17_under_pipe_1 <= delay_pipeline_17_under_pipe;
          coeff18_pipe <= coeff18;
          coeff18_pipe_1 <= coeff18_pipe;

          product18_pipe <= delay_pipeline_17_under_pipe_1 * coeff18_pipe_1;

          product18_pipe_1 <= product18_pipe;
        end
      end
    end // temp_process44

  assign product18 = product18_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process45
      if (reset == 1'b1) begin
        delay_pipeline_16_under_pipe <= 0;
        delay_pipeline_16_under_pipe_1 <= 0;
        coeff17_pipe <= 0;
        coeff17_pipe_1 <= 0;
        product17_pipe <= 0;
        product17_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_16_under_pipe <= delay_pipeline[16];
          delay_pipeline_16_under_pipe_1 <= delay_pipeline_16_under_pipe;
          coeff17_pipe <= coeff17;
          coeff17_pipe_1 <= coeff17_pipe;

          product17_pipe <= delay_pipeline_16_under_pipe_1 * coeff17_pipe_1;

          product17_pipe_1 <= product17_pipe;
        end
      end
    end // temp_process45

  assign product17 = product17_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process46
      if (reset == 1'b1) begin
        delay_pipeline_15_under_pipe <= 0;
        delay_pipeline_15_under_pipe_1 <= 0;
        coeff16_pipe <= 0;
        coeff16_pipe_1 <= 0;
        product16_pipe <= 0;
        product16_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_15_under_pipe <= delay_pipeline[15];
          delay_pipeline_15_under_pipe_1 <= delay_pipeline_15_under_pipe;
          coeff16_pipe <= coeff16;
          coeff16_pipe_1 <= coeff16_pipe;

          product16_pipe <= delay_pipeline_15_under_pipe_1 * coeff16_pipe_1;

          product16_pipe_1 <= product16_pipe;
        end
      end
    end // temp_process46

  assign product16 = product16_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process47
      if (reset == 1'b1) begin
        delay_pipeline_14_under_pipe <= 0;
        delay_pipeline_14_under_pipe_1 <= 0;
        coeff15_pipe <= 0;
        coeff15_pipe_1 <= 0;
        product15_pipe <= 0;
        product15_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_14_under_pipe <= delay_pipeline[14];
          delay_pipeline_14_under_pipe_1 <= delay_pipeline_14_under_pipe;
          coeff15_pipe <= coeff15;
          coeff15_pipe_1 <= coeff15_pipe;

          product15_pipe <= delay_pipeline_14_under_pipe_1 * coeff15_pipe_1;

          product15_pipe_1 <= product15_pipe;
        end
      end
    end // temp_process47

  assign product15 = product15_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process48
      if (reset == 1'b1) begin
        delay_pipeline_13_under_pipe <= 0;
        delay_pipeline_13_under_pipe_1 <= 0;
        coeff14_pipe <= 0;
        coeff14_pipe_1 <= 0;
        product14_pipe <= 0;
        product14_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_13_under_pipe <= delay_pipeline[13];
          delay_pipeline_13_under_pipe_1 <= delay_pipeline_13_under_pipe;
          coeff14_pipe <= coeff14;
          coeff14_pipe_1 <= coeff14_pipe;

          product14_pipe <= delay_pipeline_13_under_pipe_1 * coeff14_pipe_1;

          product14_pipe_1 <= product14_pipe;
        end
      end
    end // temp_process48

  assign product14 = product14_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process49
      if (reset == 1'b1) begin
        delay_pipeline_12_under_pipe <= 0;
        delay_pipeline_12_under_pipe_1 <= 0;
        coeff13_pipe <= 0;
        coeff13_pipe_1 <= 0;
        product13_pipe <= 0;
        product13_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_12_under_pipe <= delay_pipeline[12];
          delay_pipeline_12_under_pipe_1 <= delay_pipeline_12_under_pipe;
          coeff13_pipe <= coeff13;
          coeff13_pipe_1 <= coeff13_pipe;

          product13_pipe <= delay_pipeline_12_under_pipe_1 * coeff13_pipe_1;

          product13_pipe_1 <= product13_pipe;
        end
      end
    end // temp_process49

  assign product13 = product13_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process50
      if (reset == 1'b1) begin
        delay_pipeline_11_under_pipe <= 0;
        delay_pipeline_11_under_pipe_1 <= 0;
        coeff12_pipe <= 0;
        coeff12_pipe_1 <= 0;
        product12_pipe <= 0;
        product12_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_11_under_pipe <= delay_pipeline[11];
          delay_pipeline_11_under_pipe_1 <= delay_pipeline_11_under_pipe;
          coeff12_pipe <= coeff12;
          coeff12_pipe_1 <= coeff12_pipe;

          product12_pipe <= delay_pipeline_11_under_pipe_1 * coeff12_pipe_1;

          product12_pipe_1 <= product12_pipe;
        end
      end
    end // temp_process50

  assign product12 = product12_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process51
      if (reset == 1'b1) begin
        delay_pipeline_10_under_pipe <= 0;
        delay_pipeline_10_under_pipe_1 <= 0;
        coeff11_pipe <= 0;
        coeff11_pipe_1 <= 0;
        product11_pipe <= 0;
        product11_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_10_under_pipe <= delay_pipeline[10];
          delay_pipeline_10_under_pipe_1 <= delay_pipeline_10_under_pipe;
          coeff11_pipe <= coeff11;
          coeff11_pipe_1 <= coeff11_pipe;

          product11_pipe <= delay_pipeline_10_under_pipe_1 * coeff11_pipe_1;

          product11_pipe_1 <= product11_pipe;
        end
      end
    end // temp_process51

  assign product11 = product11_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process52
      if (reset == 1'b1) begin
        delay_pipeline_9_under_pipe <= 0;
        delay_pipeline_9_under_pipe_1 <= 0;
        coeff10_pipe <= 0;
        coeff10_pipe_1 <= 0;
        product10_pipe <= 0;
        product10_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_9_under_pipe <= delay_pipeline[9];
          delay_pipeline_9_under_pipe_1 <= delay_pipeline_9_under_pipe;
          coeff10_pipe <= coeff10;
          coeff10_pipe_1 <= coeff10_pipe;

          product10_pipe <= delay_pipeline_9_under_pipe_1 * coeff10_pipe_1;

          product10_pipe_1 <= product10_pipe;
        end
      end
    end // temp_process52

  assign product10 = product10_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process53
      if (reset == 1'b1) begin
        delay_pipeline_8_under_pipe <= 0;
        delay_pipeline_8_under_pipe_1 <= 0;
        coeff9_pipe <= 0;
        coeff9_pipe_1 <= 0;
        product9_pipe <= 0;
        product9_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_8_under_pipe <= delay_pipeline[8];
          delay_pipeline_8_under_pipe_1 <= delay_pipeline_8_under_pipe;
          coeff9_pipe <= coeff9;
          coeff9_pipe_1 <= coeff9_pipe;

          product9_pipe <= delay_pipeline_8_under_pipe_1 * coeff9_pipe_1;

          product9_pipe_1 <= product9_pipe;
        end
      end
    end // temp_process53

  assign product9 = product9_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process54
      if (reset == 1'b1) begin
        delay_pipeline_7_under_pipe <= 0;
        delay_pipeline_7_under_pipe_1 <= 0;
        coeff8_pipe <= 0;
        coeff8_pipe_1 <= 0;
        product8_pipe <= 0;
        product8_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_7_under_pipe <= delay_pipeline[7];
          delay_pipeline_7_under_pipe_1 <= delay_pipeline_7_under_pipe;
          coeff8_pipe <= coeff8;
          coeff8_pipe_1 <= coeff8_pipe;

          product8_pipe <= delay_pipeline_7_under_pipe_1 * coeff8_pipe_1;

          product8_pipe_1 <= product8_pipe;
        end
      end
    end // temp_process54

  assign product8 = product8_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process55
      if (reset == 1'b1) begin
        delay_pipeline_6_under_pipe <= 0;
        delay_pipeline_6_under_pipe_1 <= 0;
        coeff7_pipe <= 0;
        coeff7_pipe_1 <= 0;
        product7_pipe <= 0;
        product7_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_6_under_pipe <= delay_pipeline[6];
          delay_pipeline_6_under_pipe_1 <= delay_pipeline_6_under_pipe;
          coeff7_pipe <= coeff7;
          coeff7_pipe_1 <= coeff7_pipe;

          product7_pipe <= delay_pipeline_6_under_pipe_1 * coeff7_pipe_1;

          product7_pipe_1 <= product7_pipe;
        end
      end
    end // temp_process55

  assign product7 = product7_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process56
      if (reset == 1'b1) begin
        delay_pipeline_5_under_pipe <= 0;
        delay_pipeline_5_under_pipe_1 <= 0;
        coeff6_pipe <= 0;
        coeff6_pipe_1 <= 0;
        product6_pipe <= 0;
        product6_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_5_under_pipe <= delay_pipeline[5];
          delay_pipeline_5_under_pipe_1 <= delay_pipeline_5_under_pipe;
          coeff6_pipe <= coeff6;
          coeff6_pipe_1 <= coeff6_pipe;

          product6_pipe <= delay_pipeline_5_under_pipe_1 * coeff6_pipe_1;

          product6_pipe_1 <= product6_pipe;
        end
      end
    end // temp_process56

  assign product6 = product6_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process57
      if (reset == 1'b1) begin
        delay_pipeline_4_under_pipe <= 0;
        delay_pipeline_4_under_pipe_1 <= 0;
        coeff5_pipe <= 0;
        coeff5_pipe_1 <= 0;
        product5_pipe <= 0;
        product5_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_4_under_pipe <= delay_pipeline[4];
          delay_pipeline_4_under_pipe_1 <= delay_pipeline_4_under_pipe;
          coeff5_pipe <= coeff5;
          coeff5_pipe_1 <= coeff5_pipe;

          product5_pipe <= delay_pipeline_4_under_pipe_1 * coeff5_pipe_1;

          product5_pipe_1 <= product5_pipe;
        end
      end
    end // temp_process57

  assign product5 = product5_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process58
      if (reset == 1'b1) begin
        delay_pipeline_3_under_pipe <= 0;
        delay_pipeline_3_under_pipe_1 <= 0;
        coeff4_pipe <= 0;
        coeff4_pipe_1 <= 0;
        product4_pipe <= 0;
        product4_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_3_under_pipe <= delay_pipeline[3];
          delay_pipeline_3_under_pipe_1 <= delay_pipeline_3_under_pipe;
          coeff4_pipe <= coeff4;
          coeff4_pipe_1 <= coeff4_pipe;

          product4_pipe <= delay_pipeline_3_under_pipe_1 * coeff4_pipe_1;

          product4_pipe_1 <= product4_pipe;
        end
      end
    end // temp_process58

  assign product4 = product4_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process59
      if (reset == 1'b1) begin
        delay_pipeline_2_under_pipe <= 0;
        delay_pipeline_2_under_pipe_1 <= 0;
        coeff3_pipe <= 0;
        coeff3_pipe_1 <= 0;
        product3_pipe <= 0;
        product3_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_2_under_pipe <= delay_pipeline[2];
          delay_pipeline_2_under_pipe_1 <= delay_pipeline_2_under_pipe;
          coeff3_pipe <= coeff3;
          coeff3_pipe_1 <= coeff3_pipe;

          product3_pipe <= delay_pipeline_2_under_pipe_1 * coeff3_pipe_1;

          product3_pipe_1 <= product3_pipe;
        end
      end
    end // temp_process59

  assign product3 = product3_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process60
      if (reset == 1'b1) begin
        delay_pipeline_1_under_pipe <= 0;
        delay_pipeline_1_under_pipe_1 <= 0;
        coeff2_pipe <= 0;
        coeff2_pipe_1 <= 0;
        product2_pipe <= 0;
        product2_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_1_under_pipe <= delay_pipeline[1];
          delay_pipeline_1_under_pipe_1 <= delay_pipeline_1_under_pipe;
          coeff2_pipe <= coeff2;
          coeff2_pipe_1 <= coeff2_pipe;

          product2_pipe <= delay_pipeline_1_under_pipe_1 * coeff2_pipe_1;

          product2_pipe_1 <= product2_pipe;
        end
      end
    end // temp_process60

  assign product2 = product2_pipe_1;

  always @ (posedge clk or posedge reset)
    begin: temp_process61
      if (reset == 1'b1) begin
        delay_pipeline_0_under_pipe <= 0;
        delay_pipeline_0_under_pipe_1 <= 0;
        coeff1_pipe <= 0;
        coeff1_pipe_1 <= 0;
        product1_pipe <= 0;
        product1_pipe_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline_0_under_pipe <= delay_pipeline[0];
          delay_pipeline_0_under_pipe_1 <= delay_pipeline_0_under_pipe;
          coeff1_pipe <= coeff1;
          coeff1_pipe_1 <= coeff1_pipe;

          product1_pipe <= delay_pipeline_0_under_pipe_1 * coeff1_pipe_1;

          product1_pipe_1 <= product1_pipe;
        end
      end
    end // temp_process61

  assign product1 = product1_pipe_1;

  assign add_signext = product61;
  assign add_signext_1 = product60;
  assign add_temp = add_signext + add_signext_1;
  assign sum1_1 = $signed({{5{add_temp[48]}}, add_temp});

  assign add_signext_2 = product59;
  assign add_signext_3 = product58;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sum1_2 = $signed({{5{add_temp_1[48]}}, add_temp_1});

  assign add_signext_4 = product57;
  assign add_signext_5 = product56;
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sum1_3 = $signed({{5{add_temp_2[48]}}, add_temp_2});

  assign add_signext_6 = product55;
  assign add_signext_7 = product54;
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sum1_4 = $signed({{5{add_temp_3[48]}}, add_temp_3});

  assign add_signext_8 = product53;
  assign add_signext_9 = product52;
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sum1_5 = $signed({{5{add_temp_4[48]}}, add_temp_4});

  assign add_signext_10 = product51;
  assign add_signext_11 = product50;
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sum1_6 = $signed({{5{add_temp_5[48]}}, add_temp_5});

  assign add_signext_12 = product49;
  assign add_signext_13 = product48;
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sum1_7 = $signed({{5{add_temp_6[48]}}, add_temp_6});

  assign add_signext_14 = product47;
  assign add_signext_15 = product46;
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sum1_8 = $signed({{5{add_temp_7[48]}}, add_temp_7});

  assign add_signext_16 = product45;
  assign add_signext_17 = product44;
  assign add_temp_8 = add_signext_16 + add_signext_17;
  assign sum1_9 = $signed({{5{add_temp_8[48]}}, add_temp_8});

  assign add_signext_18 = product43;
  assign add_signext_19 = product42;
  assign add_temp_9 = add_signext_18 + add_signext_19;
  assign sum1_10 = $signed({{5{add_temp_9[48]}}, add_temp_9});

  assign add_signext_20 = product41;
  assign add_signext_21 = product40;
  assign add_temp_10 = add_signext_20 + add_signext_21;
  assign sum1_11 = $signed({{5{add_temp_10[48]}}, add_temp_10});

  assign add_signext_22 = product39;
  assign add_signext_23 = product38;
  assign add_temp_11 = add_signext_22 + add_signext_23;
  assign sum1_12 = $signed({{5{add_temp_11[48]}}, add_temp_11});

  assign add_signext_24 = product37;
  assign add_signext_25 = product36;
  assign add_temp_12 = add_signext_24 + add_signext_25;
  assign sum1_13 = $signed({{5{add_temp_12[48]}}, add_temp_12});

  assign add_signext_26 = product35;
  assign add_signext_27 = product34;
  assign add_temp_13 = add_signext_26 + add_signext_27;
  assign sum1_14 = $signed({{5{add_temp_13[48]}}, add_temp_13});

  assign add_signext_28 = product33;
  assign add_signext_29 = product32;
  assign add_temp_14 = add_signext_28 + add_signext_29;
  assign sum1_15 = $signed({{5{add_temp_14[48]}}, add_temp_14});

  assign add_signext_30 = product31;
  assign add_signext_31 = product30;
  assign add_temp_15 = add_signext_30 + add_signext_31;
  assign sum1_16 = $signed({{5{add_temp_15[48]}}, add_temp_15});

  assign add_signext_32 = product29;
  assign add_signext_33 = product28;
  assign add_temp_16 = add_signext_32 + add_signext_33;
  assign sum1_17 = $signed({{5{add_temp_16[48]}}, add_temp_16});

  assign add_signext_34 = product27;
  assign add_signext_35 = product26;
  assign add_temp_17 = add_signext_34 + add_signext_35;
  assign sum1_18 = $signed({{5{add_temp_17[48]}}, add_temp_17});

  assign add_signext_36 = product25;
  assign add_signext_37 = product24;
  assign add_temp_18 = add_signext_36 + add_signext_37;
  assign sum1_19 = $signed({{5{add_temp_18[48]}}, add_temp_18});

  assign add_signext_38 = product23;
  assign add_signext_39 = product22;
  assign add_temp_19 = add_signext_38 + add_signext_39;
  assign sum1_20 = $signed({{5{add_temp_19[48]}}, add_temp_19});

  assign add_signext_40 = product21;
  assign add_signext_41 = product20;
  assign add_temp_20 = add_signext_40 + add_signext_41;
  assign sum1_21 = $signed({{5{add_temp_20[48]}}, add_temp_20});

  assign add_signext_42 = product19;
  assign add_signext_43 = product18;
  assign add_temp_21 = add_signext_42 + add_signext_43;
  assign sum1_22 = $signed({{5{add_temp_21[48]}}, add_temp_21});

  assign add_signext_44 = product17;
  assign add_signext_45 = product16;
  assign add_temp_22 = add_signext_44 + add_signext_45;
  assign sum1_23 = $signed({{5{add_temp_22[48]}}, add_temp_22});

  assign add_signext_46 = product15;
  assign add_signext_47 = product14;
  assign add_temp_23 = add_signext_46 + add_signext_47;
  assign sum1_24 = $signed({{5{add_temp_23[48]}}, add_temp_23});

  assign add_signext_48 = product13;
  assign add_signext_49 = product12;
  assign add_temp_24 = add_signext_48 + add_signext_49;
  assign sum1_25 = $signed({{5{add_temp_24[48]}}, add_temp_24});

  assign add_signext_50 = product11;
  assign add_signext_51 = product10;
  assign add_temp_25 = add_signext_50 + add_signext_51;
  assign sum1_26 = $signed({{5{add_temp_25[48]}}, add_temp_25});

  assign add_signext_52 = product9;
  assign add_signext_53 = product8;
  assign add_temp_26 = add_signext_52 + add_signext_53;
  assign sum1_27 = $signed({{5{add_temp_26[48]}}, add_temp_26});

  assign add_signext_54 = product7;
  assign add_signext_55 = product6;
  assign add_temp_27 = add_signext_54 + add_signext_55;
  assign sum1_28 = $signed({{5{add_temp_27[48]}}, add_temp_27});

  assign add_signext_56 = product5;
  assign add_signext_57 = product4;
  assign add_temp_28 = add_signext_56 + add_signext_57;
  assign sum1_29 = $signed({{5{add_temp_28[48]}}, add_temp_28});

  assign add_signext_58 = product3;
  assign add_signext_59 = product2;
  assign add_temp_29 = add_signext_58 + add_signext_59;
  assign sum1_30 = $signed({{5{add_temp_29[48]}}, add_temp_29});

  always @ (posedge clk or posedge reset)
    begin: temp_process62
      if (reset == 1'b1) begin
        sumpipe1_1 <= 0;
        sumpipe1_2 <= 0;
        sumpipe1_3 <= 0;
        sumpipe1_4 <= 0;
        sumpipe1_5 <= 0;
        sumpipe1_6 <= 0;
        sumpipe1_7 <= 0;
        sumpipe1_8 <= 0;
        sumpipe1_9 <= 0;
        sumpipe1_10 <= 0;
        sumpipe1_11 <= 0;
        sumpipe1_12 <= 0;
        sumpipe1_13 <= 0;
        sumpipe1_14 <= 0;
        sumpipe1_15 <= 0;
        sumpipe1_16 <= 0;
        sumpipe1_17 <= 0;
        sumpipe1_18 <= 0;
        sumpipe1_19 <= 0;
        sumpipe1_20 <= 0;
        sumpipe1_21 <= 0;
        sumpipe1_22 <= 0;
        sumpipe1_23 <= 0;
        sumpipe1_24 <= 0;
        sumpipe1_25 <= 0;
        sumpipe1_26 <= 0;
        sumpipe1_27 <= 0;
        sumpipe1_28 <= 0;
        sumpipe1_29 <= 0;
        sumpipe1_30 <= 0;
        sumpipe1_31 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe1_1 <= sum1_1;
          sumpipe1_2 <= sum1_2;
          sumpipe1_3 <= sum1_3;
          sumpipe1_4 <= sum1_4;
          sumpipe1_5 <= sum1_5;
          sumpipe1_6 <= sum1_6;
          sumpipe1_7 <= sum1_7;
          sumpipe1_8 <= sum1_8;
          sumpipe1_9 <= sum1_9;
          sumpipe1_10 <= sum1_10;
          sumpipe1_11 <= sum1_11;
          sumpipe1_12 <= sum1_12;
          sumpipe1_13 <= sum1_13;
          sumpipe1_14 <= sum1_14;
          sumpipe1_15 <= sum1_15;
          sumpipe1_16 <= sum1_16;
          sumpipe1_17 <= sum1_17;
          sumpipe1_18 <= sum1_18;
          sumpipe1_19 <= sum1_19;
          sumpipe1_20 <= sum1_20;
          sumpipe1_21 <= sum1_21;
          sumpipe1_22 <= sum1_22;
          sumpipe1_23 <= sum1_23;
          sumpipe1_24 <= sum1_24;
          sumpipe1_25 <= sum1_25;
          sumpipe1_26 <= sum1_26;
          sumpipe1_27 <= sum1_27;
          sumpipe1_28 <= sum1_28;
          sumpipe1_29 <= sum1_29;
          sumpipe1_30 <= sum1_30;
          sumpipe1_31 <= product1;
        end
      end
    end // temp_process62

  assign add_signext_60 = sumpipe1_1;
  assign add_signext_61 = sumpipe1_2;
  assign add_temp_30 = add_signext_60 + add_signext_61;
  assign sum2_1 = add_temp_30[53:0];

  assign add_signext_62 = sumpipe1_3;
  assign add_signext_63 = sumpipe1_4;
  assign add_temp_31 = add_signext_62 + add_signext_63;
  assign sum2_2 = add_temp_31[53:0];

  assign add_signext_64 = sumpipe1_5;
  assign add_signext_65 = sumpipe1_6;
  assign add_temp_32 = add_signext_64 + add_signext_65;
  assign sum2_3 = add_temp_32[53:0];

  assign add_signext_66 = sumpipe1_7;
  assign add_signext_67 = sumpipe1_8;
  assign add_temp_33 = add_signext_66 + add_signext_67;
  assign sum2_4 = add_temp_33[53:0];

  assign add_signext_68 = sumpipe1_9;
  assign add_signext_69 = sumpipe1_10;
  assign add_temp_34 = add_signext_68 + add_signext_69;
  assign sum2_5 = add_temp_34[53:0];

  assign add_signext_70 = sumpipe1_11;
  assign add_signext_71 = sumpipe1_12;
  assign add_temp_35 = add_signext_70 + add_signext_71;
  assign sum2_6 = add_temp_35[53:0];

  assign add_signext_72 = sumpipe1_13;
  assign add_signext_73 = sumpipe1_14;
  assign add_temp_36 = add_signext_72 + add_signext_73;
  assign sum2_7 = add_temp_36[53:0];

  assign add_signext_74 = sumpipe1_15;
  assign add_signext_75 = sumpipe1_16;
  assign add_temp_37 = add_signext_74 + add_signext_75;
  assign sum2_8 = add_temp_37[53:0];

  assign add_signext_76 = sumpipe1_17;
  assign add_signext_77 = sumpipe1_18;
  assign add_temp_38 = add_signext_76 + add_signext_77;
  assign sum2_9 = add_temp_38[53:0];

  assign add_signext_78 = sumpipe1_19;
  assign add_signext_79 = sumpipe1_20;
  assign add_temp_39 = add_signext_78 + add_signext_79;
  assign sum2_10 = add_temp_39[53:0];

  assign add_signext_80 = sumpipe1_21;
  assign add_signext_81 = sumpipe1_22;
  assign add_temp_40 = add_signext_80 + add_signext_81;
  assign sum2_11 = add_temp_40[53:0];

  assign add_signext_82 = sumpipe1_23;
  assign add_signext_83 = sumpipe1_24;
  assign add_temp_41 = add_signext_82 + add_signext_83;
  assign sum2_12 = add_temp_41[53:0];

  assign add_signext_84 = sumpipe1_25;
  assign add_signext_85 = sumpipe1_26;
  assign add_temp_42 = add_signext_84 + add_signext_85;
  assign sum2_13 = add_temp_42[53:0];

  assign add_signext_86 = sumpipe1_27;
  assign add_signext_87 = sumpipe1_28;
  assign add_temp_43 = add_signext_86 + add_signext_87;
  assign sum2_14 = add_temp_43[53:0];

  assign add_signext_88 = sumpipe1_29;
  assign add_signext_89 = sumpipe1_30;
  assign add_temp_44 = add_signext_88 + add_signext_89;
  assign sum2_15 = add_temp_44[53:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process63
      if (reset == 1'b1) begin
        sumpipe2_1 <= 0;
        sumpipe2_2 <= 0;
        sumpipe2_3 <= 0;
        sumpipe2_4 <= 0;
        sumpipe2_5 <= 0;
        sumpipe2_6 <= 0;
        sumpipe2_7 <= 0;
        sumpipe2_8 <= 0;
        sumpipe2_9 <= 0;
        sumpipe2_10 <= 0;
        sumpipe2_11 <= 0;
        sumpipe2_12 <= 0;
        sumpipe2_13 <= 0;
        sumpipe2_14 <= 0;
        sumpipe2_15 <= 0;
        sumpipe2_16 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe2_1 <= sum2_1;
          sumpipe2_2 <= sum2_2;
          sumpipe2_3 <= sum2_3;
          sumpipe2_4 <= sum2_4;
          sumpipe2_5 <= sum2_5;
          sumpipe2_6 <= sum2_6;
          sumpipe2_7 <= sum2_7;
          sumpipe2_8 <= sum2_8;
          sumpipe2_9 <= sum2_9;
          sumpipe2_10 <= sum2_10;
          sumpipe2_11 <= sum2_11;
          sumpipe2_12 <= sum2_12;
          sumpipe2_13 <= sum2_13;
          sumpipe2_14 <= sum2_14;
          sumpipe2_15 <= sum2_15;
          sumpipe2_16 <= sumpipe1_31;
        end
      end
    end // temp_process63

  assign add_signext_90 = sumpipe2_1;
  assign add_signext_91 = sumpipe2_2;
  assign add_temp_45 = add_signext_90 + add_signext_91;
  assign sum3_1 = add_temp_45[53:0];

  assign add_signext_92 = sumpipe2_3;
  assign add_signext_93 = sumpipe2_4;
  assign add_temp_46 = add_signext_92 + add_signext_93;
  assign sum3_2 = add_temp_46[53:0];

  assign add_signext_94 = sumpipe2_5;
  assign add_signext_95 = sumpipe2_6;
  assign add_temp_47 = add_signext_94 + add_signext_95;
  assign sum3_3 = add_temp_47[53:0];

  assign add_signext_96 = sumpipe2_7;
  assign add_signext_97 = sumpipe2_8;
  assign add_temp_48 = add_signext_96 + add_signext_97;
  assign sum3_4 = add_temp_48[53:0];

  assign add_signext_98 = sumpipe2_9;
  assign add_signext_99 = sumpipe2_10;
  assign add_temp_49 = add_signext_98 + add_signext_99;
  assign sum3_5 = add_temp_49[53:0];

  assign add_signext_100 = sumpipe2_11;
  assign add_signext_101 = sumpipe2_12;
  assign add_temp_50 = add_signext_100 + add_signext_101;
  assign sum3_6 = add_temp_50[53:0];

  assign add_signext_102 = sumpipe2_13;
  assign add_signext_103 = sumpipe2_14;
  assign add_temp_51 = add_signext_102 + add_signext_103;
  assign sum3_7 = add_temp_51[53:0];

  assign add_signext_104 = sumpipe2_15;
  assign add_signext_105 = $signed({{6{sumpipe2_16[47]}}, sumpipe2_16});
  assign add_temp_52 = add_signext_104 + add_signext_105;
  assign sum3_8 = add_temp_52[53:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process64
      if (reset == 1'b1) begin
        sumpipe3_1 <= 0;
        sumpipe3_2 <= 0;
        sumpipe3_3 <= 0;
        sumpipe3_4 <= 0;
        sumpipe3_5 <= 0;
        sumpipe3_6 <= 0;
        sumpipe3_7 <= 0;
        sumpipe3_8 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe3_1 <= sum3_1;
          sumpipe3_2 <= sum3_2;
          sumpipe3_3 <= sum3_3;
          sumpipe3_4 <= sum3_4;
          sumpipe3_5 <= sum3_5;
          sumpipe3_6 <= sum3_6;
          sumpipe3_7 <= sum3_7;
          sumpipe3_8 <= sum3_8;
        end
      end
    end // temp_process64

  assign add_signext_106 = sumpipe3_1;
  assign add_signext_107 = sumpipe3_2;
  assign add_temp_53 = add_signext_106 + add_signext_107;
  assign sum4_1 = add_temp_53[53:0];

  assign add_signext_108 = sumpipe3_3;
  assign add_signext_109 = sumpipe3_4;
  assign add_temp_54 = add_signext_108 + add_signext_109;
  assign sum4_2 = add_temp_54[53:0];

  assign add_signext_110 = sumpipe3_5;
  assign add_signext_111 = sumpipe3_6;
  assign add_temp_55 = add_signext_110 + add_signext_111;
  assign sum4_3 = add_temp_55[53:0];

  assign add_signext_112 = sumpipe3_7;
  assign add_signext_113 = sumpipe3_8;
  assign add_temp_56 = add_signext_112 + add_signext_113;
  assign sum4_4 = add_temp_56[53:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process65
      if (reset == 1'b1) begin
        sumpipe4_1 <= 0;
        sumpipe4_2 <= 0;
        sumpipe4_3 <= 0;
        sumpipe4_4 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe4_1 <= sum4_1;
          sumpipe4_2 <= sum4_2;
          sumpipe4_3 <= sum4_3;
          sumpipe4_4 <= sum4_4;
        end
      end
    end // temp_process65

  assign add_signext_114 = sumpipe4_1;
  assign add_signext_115 = sumpipe4_2;
  assign add_temp_57 = add_signext_114 + add_signext_115;
  assign sum5_1 = add_temp_57[53:0];

  assign add_signext_116 = sumpipe4_3;
  assign add_signext_117 = sumpipe4_4;
  assign add_temp_58 = add_signext_116 + add_signext_117;
  assign sum5_2 = add_temp_58[53:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process66
      if (reset == 1'b1) begin
        sumpipe5_1 <= 0;
        sumpipe5_2 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe5_1 <= sum5_1;
          sumpipe5_2 <= sum5_2;
        end
      end
    end // temp_process66

  assign add_signext_118 = sumpipe5_1;
  assign add_signext_119 = sumpipe5_2;
  assign add_temp_59 = add_signext_118 + add_signext_119;
  assign sum6_1 = add_temp_59[53:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process67
      if (reset == 1'b1) begin
        sumpipe6_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe6_1 <= sum6_1;
        end
      end
    end // temp_process67

  assign sum_final = sumpipe6_1;

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= sum_final;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // fir_minimum_24bit_2p

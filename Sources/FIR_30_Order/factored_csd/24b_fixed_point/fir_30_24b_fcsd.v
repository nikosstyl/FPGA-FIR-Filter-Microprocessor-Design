// -------------------------------------------------------------
//
// Module: fir_30_24b_fcsd
// Generated by MATLAB(R) 9.12 and Filter Design HDL Coder 3.1.11.
// Generated on: 2023-06-22 12:05:04
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// CoeffMultipliers: Factored-CSD
// FIRAdderStyle: tree
// OptimizeForHDL: on
// TargetDirectory: W:\Nikos\UTh\Σχεδίαση Επεξεργαστών\Project\FIR_30_Order\factored_csd\24b_fixed_point
// AddPipelineRegisters: on
// Name: fir_30_24b_fcsd
// InputDataType: numerictype(1,24,0)
// TargetLanguage: Verilog
// TestBenchName: fir_30_24b_fcsd_tb
// TestBenchStimulus: impulse step ramp chirp noise 

// Filter Specifications:
//
// Sample Rate     : 46 kHz
// Response        : Lowpass
// Specification   : N,Fp,Fst,Ap
// Stopband Edge   : 9.6 kHz
// Filter Order    : 30
// Passband Edge   : 8 kHz
// Passband Ripple : 60 dB
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 31
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s24,24 -> [-5.000000e-01 5.000000e-01)
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module fir_30_24b_fcsd
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [23:0] filter_in; //sfix24
  output  signed [52:0] filter_out; //sfix53_En24

////////////////////////////////////////////////////////////////
//Module Architecture: fir_30_24b_fcsd
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [23:0] coeff1 = 24'b000000000000100000001100; //sfix24_En24
  parameter signed [23:0] coeff2 = 24'b000000000010110100001011; //sfix24_En24
  parameter signed [23:0] coeff3 = 24'b000000001000001000000111; //sfix24_En24
  parameter signed [23:0] coeff4 = 24'b000000001101111001110010; //sfix24_En24
  parameter signed [23:0] coeff5 = 24'b000000001000100111001100; //sfix24_En24
  parameter signed [23:0] coeff6 = 24'b111111100001101110110101; //sfix24_En24
  parameter signed [23:0] coeff7 = 24'b111101111111111010011001; //sfix24_En24
  parameter signed [23:0] coeff8 = 24'b111011011011100001101010; //sfix24_En24
  parameter signed [23:0] coeff9 = 24'b111000010110100100111001; //sfix24_En24
  parameter signed [23:0] coeff10 = 24'b110110000100110001110100; //sfix24_En24
  parameter signed [23:0] coeff11 = 24'b110110010010101010010111; //sfix24_En24
  parameter signed [23:0] coeff12 = 24'b111010001101011101011111; //sfix24_En24
  parameter signed [23:0] coeff13 = 24'b000001100111100000110110; //sfix24_En24
  parameter signed [23:0] coeff14 = 24'b001010100001110110010000; //sfix24_En24
  parameter signed [23:0] coeff15 = 24'b010001110100011101000010; //sfix24_En24
  parameter signed [23:0] coeff16 = 24'b010100101000100100101111; //sfix24_En24
  parameter signed [23:0] coeff17 = 24'b010001110100011101000010; //sfix24_En24
  parameter signed [23:0] coeff18 = 24'b001010100001110110010000; //sfix24_En24
  parameter signed [23:0] coeff19 = 24'b000001100111100000110110; //sfix24_En24
  parameter signed [23:0] coeff20 = 24'b111010001101011101011111; //sfix24_En24
  parameter signed [23:0] coeff21 = 24'b110110010010101010010111; //sfix24_En24
  parameter signed [23:0] coeff22 = 24'b110110000100110001110100; //sfix24_En24
  parameter signed [23:0] coeff23 = 24'b111000010110100100111001; //sfix24_En24
  parameter signed [23:0] coeff24 = 24'b111011011011100001101010; //sfix24_En24
  parameter signed [23:0] coeff25 = 24'b111101111111111010011001; //sfix24_En24
  parameter signed [23:0] coeff26 = 24'b111111100001101110110101; //sfix24_En24
  parameter signed [23:0] coeff27 = 24'b000000001000100111001100; //sfix24_En24
  parameter signed [23:0] coeff28 = 24'b000000001101111001110010; //sfix24_En24
  parameter signed [23:0] coeff29 = 24'b000000001000001000000111; //sfix24_En24
  parameter signed [23:0] coeff30 = 24'b000000000010110100001011; //sfix24_En24
  parameter signed [23:0] coeff31 = 24'b000000000000100000001100; //sfix24_En24

  // Signals
  reg  signed [23:0] delay_pipeline [0:30] ; // sfix24
  wire signed [47:0] product31; // sfix48_En24
  wire signed [35:0] mulcsd_temp; // sfix36_En24
  wire signed [47:0] product30; // sfix48_En24
  wire signed [33:0] factoredcsd_temp; // sfix34_En10
  wire signed [34:0] mulcsd_temp_1; // sfix35_En10
  wire signed [37:0] factoredcsd_temp_1; // sfix38_En14
  wire signed [38:0] mulcsd_temp_2; // sfix39_En14
  wire signed [37:0] factoredcsd_temp_2; // sfix38_En24
  wire signed [47:0] product29; // sfix48_En24
  wire signed [39:0] mulcsd_temp_3; // sfix40_En24
  wire signed [47:0] product28; // sfix48_En24
  wire signed [40:0] mulcsd_temp_4; // sfix41_En24
  wire signed [47:0] product27; // sfix48_En24
  wire signed [39:0] mulcsd_temp_5; // sfix40_En24
  wire signed [47:0] product26; // sfix48_En24
  wire signed [41:0] mulcsd_temp_6; // sfix42_En24
  wire signed [47:0] product25; // sfix48_En24
  wire signed [43:0] mulcsd_temp_7; // sfix44_En24
  wire signed [47:0] product24; // sfix48_En24
  wire signed [44:0] mulcsd_temp_8; // sfix45_En24
  wire signed [47:0] product23; // sfix48_En24
  wire signed [45:0] mulcsd_temp_9; // sfix46_En24
  wire signed [47:0] product22; // sfix48_En24
  wire signed [35:0] factoredcsd_temp_3; // sfix36_En12
  wire signed [35:0] mulcsd_temp_10; // sfix36_En12
  wire signed [44:0] factoredcsd_temp_4; // sfix45_En21
  wire signed [44:0] mulcsd_temp_11; // sfix45_En21
  wire signed [45:0] factoredcsd_temp_5; // sfix46_En24
  wire signed [46:0] unaryminus_temp; // sfix47_En24
  wire signed [47:0] product21; // sfix48_En24
  wire signed [45:0] mulcsd_temp_12; // sfix46_En24
  wire signed [47:0] product20; // sfix48_En24
  wire signed [44:0] mulcsd_temp_13; // sfix45_En24
  wire signed [47:0] product19; // sfix48_En24
  wire signed [33:0] factoredcsd_temp_6; // sfix34_En10
  wire signed [33:0] mulcsd_temp_14; // sfix34_En10
  wire signed [39:0] factoredcsd_temp_7; // sfix40_En16
  wire signed [40:0] mulcsd_temp_15; // sfix41_En16
  wire signed [42:0] factoredcsd_temp_8; // sfix43_En19
  wire signed [42:0] mulcsd_temp_16; // sfix43_En19
  wire signed [42:0] factoredcsd_temp_9; // sfix43_En24
  wire signed [47:0] product18; // sfix48_En24
  wire signed [45:0] mulcsd_temp_17; // sfix46_En24
  wire signed [47:0] product17; // sfix48_En24
  wire signed [46:0] mulcsd_temp_18; // sfix47_En24
  wire signed [47:0] product16; // sfix48_En24
  wire signed [46:0] mulcsd_temp_19; // sfix47_En24
  wire signed [47:0] product15; // sfix48_En24
  wire signed [46:0] mulcsd_temp_20; // sfix47_En24
  wire signed [47:0] product14; // sfix48_En24
  wire signed [45:0] mulcsd_temp_21; // sfix46_En24
  wire signed [47:0] product13; // sfix48_En24
  wire signed [33:0] factoredcsd_temp_10; // sfix34_En10
  wire signed [33:0] mulcsd_temp_22; // sfix34_En10
  wire signed [39:0] factoredcsd_temp_11; // sfix40_En16
  wire signed [40:0] mulcsd_temp_23; // sfix41_En16
  wire signed [42:0] factoredcsd_temp_12; // sfix43_En19
  wire signed [42:0] mulcsd_temp_24; // sfix43_En19
  wire signed [42:0] factoredcsd_temp_13; // sfix43_En24
  wire signed [47:0] product12; // sfix48_En24
  wire signed [44:0] mulcsd_temp_25; // sfix45_En24
  wire signed [47:0] product11; // sfix48_En24
  wire signed [45:0] mulcsd_temp_26; // sfix46_En24
  wire signed [47:0] product10; // sfix48_En24
  wire signed [35:0] factoredcsd_temp_14; // sfix36_En12
  wire signed [35:0] mulcsd_temp_27; // sfix36_En12
  wire signed [44:0] factoredcsd_temp_15; // sfix45_En21
  wire signed [44:0] mulcsd_temp_28; // sfix45_En21
  wire signed [45:0] factoredcsd_temp_16; // sfix46_En24
  wire signed [46:0] unaryminus_temp_1; // sfix47_En24
  wire signed [47:0] product9; // sfix48_En24
  wire signed [45:0] mulcsd_temp_29; // sfix46_En24
  wire signed [47:0] product8; // sfix48_En24
  wire signed [44:0] mulcsd_temp_30; // sfix45_En24
  wire signed [47:0] product7; // sfix48_En24
  wire signed [43:0] mulcsd_temp_31; // sfix44_En24
  wire signed [47:0] product6; // sfix48_En24
  wire signed [41:0] mulcsd_temp_32; // sfix42_En24
  wire signed [47:0] product5; // sfix48_En24
  wire signed [39:0] mulcsd_temp_33; // sfix40_En24
  wire signed [47:0] product4; // sfix48_En24
  wire signed [40:0] mulcsd_temp_34; // sfix41_En24
  wire signed [47:0] product3; // sfix48_En24
  wire signed [39:0] mulcsd_temp_35; // sfix40_En24
  wire signed [47:0] product2; // sfix48_En24
  wire signed [33:0] factoredcsd_temp_17; // sfix34_En10
  wire signed [34:0] mulcsd_temp_36; // sfix35_En10
  wire signed [37:0] factoredcsd_temp_18; // sfix38_En14
  wire signed [38:0] mulcsd_temp_37; // sfix39_En14
  wire signed [37:0] factoredcsd_temp_19; // sfix38_En24
  wire signed [47:0] product1; // sfix48_En24
  wire signed [35:0] mulcsd_temp_38; // sfix36_En24
  wire signed [52:0] sum_final; // sfix53_En24
  wire signed [52:0] sum1_1; // sfix53_En24
  wire signed [47:0] add_signext; // sfix48_En24
  wire signed [47:0] add_signext_1; // sfix48_En24
  wire signed [48:0] add_temp; // sfix49_En24
  reg  signed [52:0] sumpipe1_1; // sfix53_En24
  wire signed [52:0] sum1_2; // sfix53_En24
  wire signed [47:0] add_signext_2; // sfix48_En24
  wire signed [47:0] add_signext_3; // sfix48_En24
  wire signed [48:0] add_temp_1; // sfix49_En24
  reg  signed [52:0] sumpipe1_2; // sfix53_En24
  wire signed [52:0] sum1_3; // sfix53_En24
  wire signed [47:0] add_signext_4; // sfix48_En24
  wire signed [47:0] add_signext_5; // sfix48_En24
  wire signed [48:0] add_temp_2; // sfix49_En24
  reg  signed [52:0] sumpipe1_3; // sfix53_En24
  wire signed [52:0] sum1_4; // sfix53_En24
  wire signed [47:0] add_signext_6; // sfix48_En24
  wire signed [47:0] add_signext_7; // sfix48_En24
  wire signed [48:0] add_temp_3; // sfix49_En24
  reg  signed [52:0] sumpipe1_4; // sfix53_En24
  wire signed [52:0] sum1_5; // sfix53_En24
  wire signed [47:0] add_signext_8; // sfix48_En24
  wire signed [47:0] add_signext_9; // sfix48_En24
  wire signed [48:0] add_temp_4; // sfix49_En24
  reg  signed [52:0] sumpipe1_5; // sfix53_En24
  wire signed [52:0] sum1_6; // sfix53_En24
  wire signed [47:0] add_signext_10; // sfix48_En24
  wire signed [47:0] add_signext_11; // sfix48_En24
  wire signed [48:0] add_temp_5; // sfix49_En24
  reg  signed [52:0] sumpipe1_6; // sfix53_En24
  wire signed [52:0] sum1_7; // sfix53_En24
  wire signed [47:0] add_signext_12; // sfix48_En24
  wire signed [47:0] add_signext_13; // sfix48_En24
  wire signed [48:0] add_temp_6; // sfix49_En24
  reg  signed [52:0] sumpipe1_7; // sfix53_En24
  wire signed [52:0] sum1_8; // sfix53_En24
  wire signed [47:0] add_signext_14; // sfix48_En24
  wire signed [47:0] add_signext_15; // sfix48_En24
  wire signed [48:0] add_temp_7; // sfix49_En24
  reg  signed [52:0] sumpipe1_8; // sfix53_En24
  wire signed [52:0] sum1_9; // sfix53_En24
  wire signed [47:0] add_signext_16; // sfix48_En24
  wire signed [47:0] add_signext_17; // sfix48_En24
  wire signed [48:0] add_temp_8; // sfix49_En24
  reg  signed [52:0] sumpipe1_9; // sfix53_En24
  wire signed [52:0] sum1_10; // sfix53_En24
  wire signed [47:0] add_signext_18; // sfix48_En24
  wire signed [47:0] add_signext_19; // sfix48_En24
  wire signed [48:0] add_temp_9; // sfix49_En24
  reg  signed [52:0] sumpipe1_10; // sfix53_En24
  wire signed [52:0] sum1_11; // sfix53_En24
  wire signed [47:0] add_signext_20; // sfix48_En24
  wire signed [47:0] add_signext_21; // sfix48_En24
  wire signed [48:0] add_temp_10; // sfix49_En24
  reg  signed [52:0] sumpipe1_11; // sfix53_En24
  wire signed [52:0] sum1_12; // sfix53_En24
  wire signed [47:0] add_signext_22; // sfix48_En24
  wire signed [47:0] add_signext_23; // sfix48_En24
  wire signed [48:0] add_temp_11; // sfix49_En24
  reg  signed [52:0] sumpipe1_12; // sfix53_En24
  wire signed [52:0] sum1_13; // sfix53_En24
  wire signed [47:0] add_signext_24; // sfix48_En24
  wire signed [47:0] add_signext_25; // sfix48_En24
  wire signed [48:0] add_temp_12; // sfix49_En24
  reg  signed [52:0] sumpipe1_13; // sfix53_En24
  wire signed [52:0] sum1_14; // sfix53_En24
  wire signed [47:0] add_signext_26; // sfix48_En24
  wire signed [47:0] add_signext_27; // sfix48_En24
  wire signed [48:0] add_temp_13; // sfix49_En24
  reg  signed [52:0] sumpipe1_14; // sfix53_En24
  wire signed [52:0] sum1_15; // sfix53_En24
  wire signed [47:0] add_signext_28; // sfix48_En24
  wire signed [47:0] add_signext_29; // sfix48_En24
  wire signed [48:0] add_temp_14; // sfix49_En24
  reg  signed [52:0] sumpipe1_15; // sfix53_En24
  reg  signed [47:0] sumpipe1_16; // sfix48_En24
  wire signed [52:0] sum2_1; // sfix53_En24
  wire signed [52:0] add_signext_30; // sfix53_En24
  wire signed [52:0] add_signext_31; // sfix53_En24
  wire signed [53:0] add_temp_15; // sfix54_En24
  reg  signed [52:0] sumpipe2_1; // sfix53_En24
  wire signed [52:0] sum2_2; // sfix53_En24
  wire signed [52:0] add_signext_32; // sfix53_En24
  wire signed [52:0] add_signext_33; // sfix53_En24
  wire signed [53:0] add_temp_16; // sfix54_En24
  reg  signed [52:0] sumpipe2_2; // sfix53_En24
  wire signed [52:0] sum2_3; // sfix53_En24
  wire signed [52:0] add_signext_34; // sfix53_En24
  wire signed [52:0] add_signext_35; // sfix53_En24
  wire signed [53:0] add_temp_17; // sfix54_En24
  reg  signed [52:0] sumpipe2_3; // sfix53_En24
  wire signed [52:0] sum2_4; // sfix53_En24
  wire signed [52:0] add_signext_36; // sfix53_En24
  wire signed [52:0] add_signext_37; // sfix53_En24
  wire signed [53:0] add_temp_18; // sfix54_En24
  reg  signed [52:0] sumpipe2_4; // sfix53_En24
  wire signed [52:0] sum2_5; // sfix53_En24
  wire signed [52:0] add_signext_38; // sfix53_En24
  wire signed [52:0] add_signext_39; // sfix53_En24
  wire signed [53:0] add_temp_19; // sfix54_En24
  reg  signed [52:0] sumpipe2_5; // sfix53_En24
  wire signed [52:0] sum2_6; // sfix53_En24
  wire signed [52:0] add_signext_40; // sfix53_En24
  wire signed [52:0] add_signext_41; // sfix53_En24
  wire signed [53:0] add_temp_20; // sfix54_En24
  reg  signed [52:0] sumpipe2_6; // sfix53_En24
  wire signed [52:0] sum2_7; // sfix53_En24
  wire signed [52:0] add_signext_42; // sfix53_En24
  wire signed [52:0] add_signext_43; // sfix53_En24
  wire signed [53:0] add_temp_21; // sfix54_En24
  reg  signed [52:0] sumpipe2_7; // sfix53_En24
  wire signed [52:0] sum2_8; // sfix53_En24
  wire signed [52:0] add_signext_44; // sfix53_En24
  wire signed [52:0] add_signext_45; // sfix53_En24
  wire signed [53:0] add_temp_22; // sfix54_En24
  reg  signed [52:0] sumpipe2_8; // sfix53_En24
  wire signed [52:0] sum3_1; // sfix53_En24
  wire signed [52:0] add_signext_46; // sfix53_En24
  wire signed [52:0] add_signext_47; // sfix53_En24
  wire signed [53:0] add_temp_23; // sfix54_En24
  reg  signed [52:0] sumpipe3_1; // sfix53_En24
  wire signed [52:0] sum3_2; // sfix53_En24
  wire signed [52:0] add_signext_48; // sfix53_En24
  wire signed [52:0] add_signext_49; // sfix53_En24
  wire signed [53:0] add_temp_24; // sfix54_En24
  reg  signed [52:0] sumpipe3_2; // sfix53_En24
  wire signed [52:0] sum3_3; // sfix53_En24
  wire signed [52:0] add_signext_50; // sfix53_En24
  wire signed [52:0] add_signext_51; // sfix53_En24
  wire signed [53:0] add_temp_25; // sfix54_En24
  reg  signed [52:0] sumpipe3_3; // sfix53_En24
  wire signed [52:0] sum3_4; // sfix53_En24
  wire signed [52:0] add_signext_52; // sfix53_En24
  wire signed [52:0] add_signext_53; // sfix53_En24
  wire signed [53:0] add_temp_26; // sfix54_En24
  reg  signed [52:0] sumpipe3_4; // sfix53_En24
  wire signed [52:0] sum4_1; // sfix53_En24
  wire signed [52:0] add_signext_54; // sfix53_En24
  wire signed [52:0] add_signext_55; // sfix53_En24
  wire signed [53:0] add_temp_27; // sfix54_En24
  reg  signed [52:0] sumpipe4_1; // sfix53_En24
  wire signed [52:0] sum4_2; // sfix53_En24
  wire signed [52:0] add_signext_56; // sfix53_En24
  wire signed [52:0] add_signext_57; // sfix53_En24
  wire signed [53:0] add_temp_28; // sfix54_En24
  reg  signed [52:0] sumpipe4_2; // sfix53_En24
  wire signed [52:0] sum5_1; // sfix53_En24
  wire signed [52:0] add_signext_58; // sfix53_En24
  wire signed [52:0] add_signext_59; // sfix53_En24
  wire signed [53:0] add_temp_29; // sfix54_En24
  reg  signed [52:0] sumpipe5_1; // sfix53_En24
  reg  signed [52:0] output_register; // sfix53_En24

  // Block Statements
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
        delay_pipeline[18] <= 0;
        delay_pipeline[19] <= 0;
        delay_pipeline[20] <= 0;
        delay_pipeline[21] <= 0;
        delay_pipeline[22] <= 0;
        delay_pipeline[23] <= 0;
        delay_pipeline[24] <= 0;
        delay_pipeline[25] <= 0;
        delay_pipeline[26] <= 0;
        delay_pipeline[27] <= 0;
        delay_pipeline[28] <= 0;
        delay_pipeline[29] <= 0;
        delay_pipeline[30] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
        end
      end
    end // Delay_Pipeline_process


// For FCSD of 2060, optimizing to CSD due to lower cost
  assign mulcsd_temp = 
        $signed({delay_pipeline[30], 11'b00000000000}) +
        $signed({delay_pipeline[30], 4'b0000}) -
        $signed({delay_pipeline[30], 2'b00});
  assign product31 = $signed({{12{mulcsd_temp[35]}}, mulcsd_temp});

// For FCSD of 11531, using factorization: 887 13 
// 
  assign mulcsd_temp_1 = 
        $signed({delay_pipeline[29], 10'b0000000000}) -
        $signed({delay_pipeline[29], 8'b00000000}) +
        $signed({delay_pipeline[29], 7'b0000000}) -
        $signed({delay_pipeline[29], 4'b0000}) +
        $signed({delay_pipeline[29], 3'b000}) -
        delay_pipeline[29];
  assign factoredcsd_temp = mulcsd_temp_1[33:0];

  assign mulcsd_temp_2 = 
        $signed({factoredcsd_temp, 4'b0000}) -
        $signed({factoredcsd_temp, 2'b00}) +
        factoredcsd_temp;
  assign factoredcsd_temp_1 = mulcsd_temp_2[37:0];

  assign factoredcsd_temp_2 = factoredcsd_temp_1;

  assign product30 = $signed({{10{factoredcsd_temp_2[37]}}, factoredcsd_temp_2});

// For FCSD of 33287, optimizing to CSD due to lower cost
  assign mulcsd_temp_3 = 
        $signed({delay_pipeline[28], 15'b000000000000000}) +
        $signed({delay_pipeline[28], 9'b000000000}) +
        $signed({delay_pipeline[28], 3'b000}) -
        delay_pipeline[28];
  assign product29 = $signed({{8{mulcsd_temp_3[39]}}, mulcsd_temp_3});

// For FCSD of 56946, optimizing to CSD due to lower cost
  assign mulcsd_temp_4 = 
        $signed({delay_pipeline[27], 16'b0000000000000000}) -
        $signed({delay_pipeline[27], 14'b00000000000000}) +
        $signed({delay_pipeline[27], 13'b0000000000000}) -
        $signed({delay_pipeline[27], 9'b000000000}) +
        $signed({delay_pipeline[27], 7'b0000000}) -
        $signed({delay_pipeline[27], 4'b0000}) +
        $signed({delay_pipeline[27], 1'b0});
  assign product28 = $signed({{7{mulcsd_temp_4[40]}}, mulcsd_temp_4});

// For FCSD of 35276, optimizing to CSD due to lower cost
  assign mulcsd_temp_5 = 
        $signed({delay_pipeline[26], 15'b000000000000000}) +
        $signed({delay_pipeline[26], 11'b00000000000}) +
        $signed({delay_pipeline[26], 9'b000000000}) -
        $signed({delay_pipeline[26], 6'b000000}) +
        $signed({delay_pipeline[26], 4'b0000}) -
        $signed({delay_pipeline[26], 2'b00});
  assign product27 = $signed({{8{mulcsd_temp_5[39]}}, mulcsd_temp_5});

// For FCSD of -123979, optimizing to CSD due to lower cost
  assign mulcsd_temp_6 = - (
        $signed({delay_pipeline[25], 17'b00000000000000000}) -
        $signed({delay_pipeline[25], 13'b0000000000000}) +
        $signed({delay_pipeline[25], 10'b0000000000}) +
        $signed({delay_pipeline[25], 6'b000000}) +
        $signed({delay_pipeline[25], 3'b000}) +
        $signed({delay_pipeline[25], 2'b00}) -
        delay_pipeline[25]);
  assign product26 = $signed({{6{mulcsd_temp_6[41]}}, mulcsd_temp_6});

// For FCSD of -524647, optimizing to CSD due to lower cost
  assign mulcsd_temp_7 = - (
        $signed({delay_pipeline[24], 19'b0000000000000000000}) +
        $signed({delay_pipeline[24], 8'b00000000}) +
        $signed({delay_pipeline[24], 7'b0000000}) -
        $signed({delay_pipeline[24], 5'b00000}) +
        $signed({delay_pipeline[24], 3'b000}) -
        delay_pipeline[24]);
  assign product25 = $signed({{4{mulcsd_temp_7[43]}}, mulcsd_temp_7});

// For FCSD of -1197974, optimizing to CSD due to lower cost
  assign mulcsd_temp_8 = - (
        $signed({delay_pipeline[23], 20'b00000000000000000000}) +
        $signed({delay_pipeline[23], 17'b00000000000000000}) +
        $signed({delay_pipeline[23], 14'b00000000000000}) +
        $signed({delay_pipeline[23], 11'b00000000000}) -
        $signed({delay_pipeline[23], 7'b0000000}) +
        $signed({delay_pipeline[23], 4'b0000}) +
        $signed({delay_pipeline[23], 3'b000}) -
        $signed({delay_pipeline[23], 1'b0}));
  assign product24 = $signed({{3{mulcsd_temp_8[44]}}, mulcsd_temp_8});

// For FCSD of -2004679, optimizing to CSD due to lower cost
  assign mulcsd_temp_9 = - (
        $signed({delay_pipeline[22], 21'b000000000000000000000}) -
        $signed({delay_pipeline[22], 17'b00000000000000000}) +
        $signed({delay_pipeline[22], 15'b000000000000000}) +
        $signed({delay_pipeline[22], 12'b000000000000}) +
        $signed({delay_pipeline[22], 11'b00000000000}) -
        $signed({delay_pipeline[22], 9'b000000000}) +
        $signed({delay_pipeline[22], 8'b00000000}) -
        $signed({delay_pipeline[22], 6'b000000}) +
        $signed({delay_pipeline[22], 3'b000}) -
        delay_pipeline[22]);
  assign product23 = $signed({{2{mulcsd_temp_9[45]}}, mulcsd_temp_9});

// For FCSD of -2601868, using factorization: 2531 257 2 2 
// 
  assign mulcsd_temp_10 = 
        $signed({delay_pipeline[21], 11'b00000000000}) +
        $signed({delay_pipeline[21], 9'b000000000}) -
        $signed({delay_pipeline[21], 5'b00000}) +
        $signed({delay_pipeline[21], 2'b00}) -
        delay_pipeline[21];
  assign factoredcsd_temp_3 = mulcsd_temp_10;

  assign mulcsd_temp_11 = 
        $signed({factoredcsd_temp_3, 8'b00000000}) +
        factoredcsd_temp_3;
  assign factoredcsd_temp_4 = mulcsd_temp_11;

  assign factoredcsd_temp_5 = $signed({factoredcsd_temp_4[43:0], 2'b00});

  assign unaryminus_temp = (factoredcsd_temp_5==46'b1000000000000000000000000000000000000000000000) ? $signed({1'b0, factoredcsd_temp_5}) : -factoredcsd_temp_5;
  assign product22 = $signed({{1{unaryminus_temp[46]}}, unaryminus_temp});

// For FCSD of -2545001, optimizing to CSD due to lower cost
  assign mulcsd_temp_12 = - (
        $signed({delay_pipeline[20], 21'b000000000000000000000}) +
        $signed({delay_pipeline[20], 19'b0000000000000000000}) -
        $signed({delay_pipeline[20], 17'b00000000000000000}) +
        $signed({delay_pipeline[20], 16'b0000000000000000}) -
        $signed({delay_pipeline[20], 14'b00000000000000}) +
        $signed({delay_pipeline[20], 12'b000000000000}) +
        $signed({delay_pipeline[20], 10'b0000000000}) +
        $signed({delay_pipeline[20], 8'b00000000}) +
        $signed({delay_pipeline[20], 7'b0000000}) -
        $signed({delay_pipeline[20], 5'b00000}) +
        $signed({delay_pipeline[20], 3'b000}) +
        delay_pipeline[20]);
  assign product21 = $signed({{2{mulcsd_temp_12[45]}}, mulcsd_temp_12});

// For FCSD of -1517729, optimizing to CSD due to lower cost
  assign mulcsd_temp_13 = - (
        $signed({delay_pipeline[19], 20'b00000000000000000000}) +
        $signed({delay_pipeline[19], 19'b0000000000000000000}) -
        $signed({delay_pipeline[19], 16'b0000000000000000}) +
        $signed({delay_pipeline[19], 13'b0000000000000}) +
        $signed({delay_pipeline[19], 11'b00000000000}) +
        $signed({delay_pipeline[19], 7'b0000000}) +
        $signed({delay_pipeline[19], 5'b00000}) +
        delay_pipeline[19]);
  assign product20 = $signed({{3{mulcsd_temp_13[44]}}, mulcsd_temp_13});

// For FCSD of 423990, using factorization: 673 63 5 2 
// 
  assign mulcsd_temp_14 = 
        $signed({delay_pipeline[18], 9'b000000000}) +
        $signed({delay_pipeline[18], 7'b0000000}) +
        $signed({delay_pipeline[18], 5'b00000}) +
        delay_pipeline[18];
  assign factoredcsd_temp_6 = mulcsd_temp_14;

  assign mulcsd_temp_15 = 
        $signed({factoredcsd_temp_6, 6'b000000}) -
        factoredcsd_temp_6;
  assign factoredcsd_temp_7 = mulcsd_temp_15[39:0];

  assign mulcsd_temp_16 = 
        $signed({factoredcsd_temp_7, 2'b00}) +
        factoredcsd_temp_7;
  assign factoredcsd_temp_8 = mulcsd_temp_16;

  assign factoredcsd_temp_9 = $signed({factoredcsd_temp_8[41:0], 1'b0});

  assign product19 = $signed({{5{factoredcsd_temp_9[42]}}, factoredcsd_temp_9});

// For FCSD of 2760080, optimizing to CSD due to lower cost
  assign mulcsd_temp_17 = 
        $signed({delay_pipeline[17], 21'b000000000000000000000}) +
        $signed({delay_pipeline[17], 19'b0000000000000000000}) +
        $signed({delay_pipeline[17], 17'b00000000000000000}) +
        $signed({delay_pipeline[17], 13'b0000000000000}) -
        $signed({delay_pipeline[17], 10'b0000000000}) +
        $signed({delay_pipeline[17], 9'b000000000}) -
        $signed({delay_pipeline[17], 7'b0000000}) +
        $signed({delay_pipeline[17], 4'b0000});
  assign product18 = $signed({{2{mulcsd_temp_17[45]}}, mulcsd_temp_17});

// For FCSD of 4671298, optimizing to CSD due to lower cost
  assign mulcsd_temp_18 = 
        $signed({delay_pipeline[16], 22'b0000000000000000000000}) +
        $signed({delay_pipeline[16], 19'b0000000000000000000}) -
        $signed({delay_pipeline[16], 16'b0000000000000000}) +
        $signed({delay_pipeline[16], 14'b00000000000000}) +
        $signed({delay_pipeline[16], 11'b00000000000}) -
        $signed({delay_pipeline[16], 8'b00000000}) +
        $signed({delay_pipeline[16], 6'b000000}) +
        $signed({delay_pipeline[16], 1'b0});
  assign product17 = $signed({{1{mulcsd_temp_18[46]}}, mulcsd_temp_18});

// For FCSD of 5409071, optimizing to CSD due to lower cost
  assign mulcsd_temp_19 = 
        $signed({delay_pipeline[15], 22'b0000000000000000000000}) +
        $signed({delay_pipeline[15], 20'b00000000000000000000}) +
        $signed({delay_pipeline[15], 17'b00000000000000000}) +
        $signed({delay_pipeline[15], 15'b000000000000000}) +
        $signed({delay_pipeline[15], 11'b00000000000}) +
        $signed({delay_pipeline[15], 8'b00000000}) +
        $signed({delay_pipeline[15], 5'b00000}) +
        $signed({delay_pipeline[15], 4'b0000}) -
        delay_pipeline[15];
  assign product16 = $signed({{1{mulcsd_temp_19[46]}}, mulcsd_temp_19});

// For FCSD of 4671298, optimizing to CSD due to lower cost
  assign mulcsd_temp_20 = 
        $signed({delay_pipeline[14], 22'b0000000000000000000000}) +
        $signed({delay_pipeline[14], 19'b0000000000000000000}) -
        $signed({delay_pipeline[14], 16'b0000000000000000}) +
        $signed({delay_pipeline[14], 14'b00000000000000}) +
        $signed({delay_pipeline[14], 11'b00000000000}) -
        $signed({delay_pipeline[14], 8'b00000000}) +
        $signed({delay_pipeline[14], 6'b000000}) +
        $signed({delay_pipeline[14], 1'b0});
  assign product15 = $signed({{1{mulcsd_temp_20[46]}}, mulcsd_temp_20});

// For FCSD of 2760080, optimizing to CSD due to lower cost
  assign mulcsd_temp_21 = 
        $signed({delay_pipeline[13], 21'b000000000000000000000}) +
        $signed({delay_pipeline[13], 19'b0000000000000000000}) +
        $signed({delay_pipeline[13], 17'b00000000000000000}) +
        $signed({delay_pipeline[13], 13'b0000000000000}) -
        $signed({delay_pipeline[13], 10'b0000000000}) +
        $signed({delay_pipeline[13], 9'b000000000}) -
        $signed({delay_pipeline[13], 7'b0000000}) +
        $signed({delay_pipeline[13], 4'b0000});
  assign product14 = $signed({{2{mulcsd_temp_21[45]}}, mulcsd_temp_21});

// For FCSD of 423990, using factorization: 673 63 5 2 
// 
  assign mulcsd_temp_22 = 
        $signed({delay_pipeline[12], 9'b000000000}) +
        $signed({delay_pipeline[12], 7'b0000000}) +
        $signed({delay_pipeline[12], 5'b00000}) +
        delay_pipeline[12];
  assign factoredcsd_temp_10 = mulcsd_temp_22;

  assign mulcsd_temp_23 = 
        $signed({factoredcsd_temp_10, 6'b000000}) -
        factoredcsd_temp_10;
  assign factoredcsd_temp_11 = mulcsd_temp_23[39:0];

  assign mulcsd_temp_24 = 
        $signed({factoredcsd_temp_11, 2'b00}) +
        factoredcsd_temp_11;
  assign factoredcsd_temp_12 = mulcsd_temp_24;

  assign factoredcsd_temp_13 = $signed({factoredcsd_temp_12[41:0], 1'b0});

  assign product13 = $signed({{5{factoredcsd_temp_13[42]}}, factoredcsd_temp_13});

// For FCSD of -1517729, optimizing to CSD due to lower cost
  assign mulcsd_temp_25 = - (
        $signed({delay_pipeline[11], 20'b00000000000000000000}) +
        $signed({delay_pipeline[11], 19'b0000000000000000000}) -
        $signed({delay_pipeline[11], 16'b0000000000000000}) +
        $signed({delay_pipeline[11], 13'b0000000000000}) +
        $signed({delay_pipeline[11], 11'b00000000000}) +
        $signed({delay_pipeline[11], 7'b0000000}) +
        $signed({delay_pipeline[11], 5'b00000}) +
        delay_pipeline[11]);
  assign product12 = $signed({{3{mulcsd_temp_25[44]}}, mulcsd_temp_25});

// For FCSD of -2545001, optimizing to CSD due to lower cost
  assign mulcsd_temp_26 = - (
        $signed({delay_pipeline[10], 21'b000000000000000000000}) +
        $signed({delay_pipeline[10], 19'b0000000000000000000}) -
        $signed({delay_pipeline[10], 17'b00000000000000000}) +
        $signed({delay_pipeline[10], 16'b0000000000000000}) -
        $signed({delay_pipeline[10], 14'b00000000000000}) +
        $signed({delay_pipeline[10], 12'b000000000000}) +
        $signed({delay_pipeline[10], 10'b0000000000}) +
        $signed({delay_pipeline[10], 8'b00000000}) +
        $signed({delay_pipeline[10], 7'b0000000}) -
        $signed({delay_pipeline[10], 5'b00000}) +
        $signed({delay_pipeline[10], 3'b000}) +
        delay_pipeline[10]);
  assign product11 = $signed({{2{mulcsd_temp_26[45]}}, mulcsd_temp_26});

// For FCSD of -2601868, using factorization: 2531 257 2 2 
// 
  assign mulcsd_temp_27 = 
        $signed({delay_pipeline[9], 11'b00000000000}) +
        $signed({delay_pipeline[9], 9'b000000000}) -
        $signed({delay_pipeline[9], 5'b00000}) +
        $signed({delay_pipeline[9], 2'b00}) -
        delay_pipeline[9];
  assign factoredcsd_temp_14 = mulcsd_temp_27;

  assign mulcsd_temp_28 = 
        $signed({factoredcsd_temp_14, 8'b00000000}) +
        factoredcsd_temp_14;
  assign factoredcsd_temp_15 = mulcsd_temp_28;

  assign factoredcsd_temp_16 = $signed({factoredcsd_temp_15[43:0], 2'b00});

  assign unaryminus_temp_1 = (factoredcsd_temp_16==46'b1000000000000000000000000000000000000000000000) ? $signed({1'b0, factoredcsd_temp_16}) : -factoredcsd_temp_16;
  assign product10 = $signed({{1{unaryminus_temp_1[46]}}, unaryminus_temp_1});

// For FCSD of -2004679, optimizing to CSD due to lower cost
  assign mulcsd_temp_29 = - (
        $signed({delay_pipeline[8], 21'b000000000000000000000}) -
        $signed({delay_pipeline[8], 17'b00000000000000000}) +
        $signed({delay_pipeline[8], 15'b000000000000000}) +
        $signed({delay_pipeline[8], 12'b000000000000}) +
        $signed({delay_pipeline[8], 11'b00000000000}) -
        $signed({delay_pipeline[8], 9'b000000000}) +
        $signed({delay_pipeline[8], 8'b00000000}) -
        $signed({delay_pipeline[8], 6'b000000}) +
        $signed({delay_pipeline[8], 3'b000}) -
        delay_pipeline[8]);
  assign product9 = $signed({{2{mulcsd_temp_29[45]}}, mulcsd_temp_29});

// For FCSD of -1197974, optimizing to CSD due to lower cost
  assign mulcsd_temp_30 = - (
        $signed({delay_pipeline[7], 20'b00000000000000000000}) +
        $signed({delay_pipeline[7], 17'b00000000000000000}) +
        $signed({delay_pipeline[7], 14'b00000000000000}) +
        $signed({delay_pipeline[7], 11'b00000000000}) -
        $signed({delay_pipeline[7], 7'b0000000}) +
        $signed({delay_pipeline[7], 4'b0000}) +
        $signed({delay_pipeline[7], 3'b000}) -
        $signed({delay_pipeline[7], 1'b0}));
  assign product8 = $signed({{3{mulcsd_temp_30[44]}}, mulcsd_temp_30});

// For FCSD of -524647, optimizing to CSD due to lower cost
  assign mulcsd_temp_31 = - (
        $signed({delay_pipeline[6], 19'b0000000000000000000}) +
        $signed({delay_pipeline[6], 8'b00000000}) +
        $signed({delay_pipeline[6], 7'b0000000}) -
        $signed({delay_pipeline[6], 5'b00000}) +
        $signed({delay_pipeline[6], 3'b000}) -
        delay_pipeline[6]);
  assign product7 = $signed({{4{mulcsd_temp_31[43]}}, mulcsd_temp_31});

// For FCSD of -123979, optimizing to CSD due to lower cost
  assign mulcsd_temp_32 = - (
        $signed({delay_pipeline[5], 17'b00000000000000000}) -
        $signed({delay_pipeline[5], 13'b0000000000000}) +
        $signed({delay_pipeline[5], 10'b0000000000}) +
        $signed({delay_pipeline[5], 6'b000000}) +
        $signed({delay_pipeline[5], 3'b000}) +
        $signed({delay_pipeline[5], 2'b00}) -
        delay_pipeline[5]);
  assign product6 = $signed({{6{mulcsd_temp_32[41]}}, mulcsd_temp_32});

// For FCSD of 35276, optimizing to CSD due to lower cost
  assign mulcsd_temp_33 = 
        $signed({delay_pipeline[4], 15'b000000000000000}) +
        $signed({delay_pipeline[4], 11'b00000000000}) +
        $signed({delay_pipeline[4], 9'b000000000}) -
        $signed({delay_pipeline[4], 6'b000000}) +
        $signed({delay_pipeline[4], 4'b0000}) -
        $signed({delay_pipeline[4], 2'b00});
  assign product5 = $signed({{8{mulcsd_temp_33[39]}}, mulcsd_temp_33});

// For FCSD of 56946, optimizing to CSD due to lower cost
  assign mulcsd_temp_34 = 
        $signed({delay_pipeline[3], 16'b0000000000000000}) -
        $signed({delay_pipeline[3], 14'b00000000000000}) +
        $signed({delay_pipeline[3], 13'b0000000000000}) -
        $signed({delay_pipeline[3], 9'b000000000}) +
        $signed({delay_pipeline[3], 7'b0000000}) -
        $signed({delay_pipeline[3], 4'b0000}) +
        $signed({delay_pipeline[3], 1'b0});
  assign product4 = $signed({{7{mulcsd_temp_34[40]}}, mulcsd_temp_34});

// For FCSD of 33287, optimizing to CSD due to lower cost
  assign mulcsd_temp_35 = 
        $signed({delay_pipeline[2], 15'b000000000000000}) +
        $signed({delay_pipeline[2], 9'b000000000}) +
        $signed({delay_pipeline[2], 3'b000}) -
        delay_pipeline[2];
  assign product3 = $signed({{8{mulcsd_temp_35[39]}}, mulcsd_temp_35});

// For FCSD of 11531, using factorization: 887 13 
// 
  assign mulcsd_temp_36 = 
        $signed({delay_pipeline[1], 10'b0000000000}) -
        $signed({delay_pipeline[1], 8'b00000000}) +
        $signed({delay_pipeline[1], 7'b0000000}) -
        $signed({delay_pipeline[1], 4'b0000}) +
        $signed({delay_pipeline[1], 3'b000}) -
        delay_pipeline[1];
  assign factoredcsd_temp_17 = mulcsd_temp_36[33:0];

  assign mulcsd_temp_37 = 
        $signed({factoredcsd_temp_17, 4'b0000}) -
        $signed({factoredcsd_temp_17, 2'b00}) +
        factoredcsd_temp_17;
  assign factoredcsd_temp_18 = mulcsd_temp_37[37:0];

  assign factoredcsd_temp_19 = factoredcsd_temp_18;

  assign product2 = $signed({{10{factoredcsd_temp_19[37]}}, factoredcsd_temp_19});

// For FCSD of 2060, optimizing to CSD due to lower cost
  assign mulcsd_temp_38 = 
        $signed({delay_pipeline[0], 11'b00000000000}) +
        $signed({delay_pipeline[0], 4'b0000}) -
        $signed({delay_pipeline[0], 2'b00});
  assign product1 = $signed({{12{mulcsd_temp_38[35]}}, mulcsd_temp_38});

  assign add_signext = product31;
  assign add_signext_1 = product30;
  assign add_temp = add_signext + add_signext_1;
  assign sum1_1 = $signed({{4{add_temp[48]}}, add_temp});

  assign add_signext_2 = product29;
  assign add_signext_3 = product28;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sum1_2 = $signed({{4{add_temp_1[48]}}, add_temp_1});

  assign add_signext_4 = product27;
  assign add_signext_5 = product26;
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sum1_3 = $signed({{4{add_temp_2[48]}}, add_temp_2});

  assign add_signext_6 = product25;
  assign add_signext_7 = product24;
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sum1_4 = $signed({{4{add_temp_3[48]}}, add_temp_3});

  assign add_signext_8 = product23;
  assign add_signext_9 = product22;
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sum1_5 = $signed({{4{add_temp_4[48]}}, add_temp_4});

  assign add_signext_10 = product21;
  assign add_signext_11 = product20;
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sum1_6 = $signed({{4{add_temp_5[48]}}, add_temp_5});

  assign add_signext_12 = product19;
  assign add_signext_13 = product18;
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sum1_7 = $signed({{4{add_temp_6[48]}}, add_temp_6});

  assign add_signext_14 = product17;
  assign add_signext_15 = product16;
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sum1_8 = $signed({{4{add_temp_7[48]}}, add_temp_7});

  assign add_signext_16 = product15;
  assign add_signext_17 = product14;
  assign add_temp_8 = add_signext_16 + add_signext_17;
  assign sum1_9 = $signed({{4{add_temp_8[48]}}, add_temp_8});

  assign add_signext_18 = product13;
  assign add_signext_19 = product12;
  assign add_temp_9 = add_signext_18 + add_signext_19;
  assign sum1_10 = $signed({{4{add_temp_9[48]}}, add_temp_9});

  assign add_signext_20 = product11;
  assign add_signext_21 = product10;
  assign add_temp_10 = add_signext_20 + add_signext_21;
  assign sum1_11 = $signed({{4{add_temp_10[48]}}, add_temp_10});

  assign add_signext_22 = product9;
  assign add_signext_23 = product8;
  assign add_temp_11 = add_signext_22 + add_signext_23;
  assign sum1_12 = $signed({{4{add_temp_11[48]}}, add_temp_11});

  assign add_signext_24 = product7;
  assign add_signext_25 = product6;
  assign add_temp_12 = add_signext_24 + add_signext_25;
  assign sum1_13 = $signed({{4{add_temp_12[48]}}, add_temp_12});

  assign add_signext_26 = product5;
  assign add_signext_27 = product4;
  assign add_temp_13 = add_signext_26 + add_signext_27;
  assign sum1_14 = $signed({{4{add_temp_13[48]}}, add_temp_13});

  assign add_signext_28 = product3;
  assign add_signext_29 = product2;
  assign add_temp_14 = add_signext_28 + add_signext_29;
  assign sum1_15 = $signed({{4{add_temp_14[48]}}, add_temp_14});

  always @ (posedge clk or posedge reset)
    begin: temp_process1
      if (reset == 1'b1) begin
        sumpipe1_1 <= 0;
        sumpipe1_2 <= 0;
        sumpipe1_3 <= 0;
        sumpipe1_4 <= 0;
        sumpipe1_5 <= 0;
        sumpipe1_6 <= 0;
        sumpipe1_7 <= 0;
        sumpipe1_8 <= 0;
        sumpipe1_9 <= 0;
        sumpipe1_10 <= 0;
        sumpipe1_11 <= 0;
        sumpipe1_12 <= 0;
        sumpipe1_13 <= 0;
        sumpipe1_14 <= 0;
        sumpipe1_15 <= 0;
        sumpipe1_16 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe1_1 <= sum1_1;
          sumpipe1_2 <= sum1_2;
          sumpipe1_3 <= sum1_3;
          sumpipe1_4 <= sum1_4;
          sumpipe1_5 <= sum1_5;
          sumpipe1_6 <= sum1_6;
          sumpipe1_7 <= sum1_7;
          sumpipe1_8 <= sum1_8;
          sumpipe1_9 <= sum1_9;
          sumpipe1_10 <= sum1_10;
          sumpipe1_11 <= sum1_11;
          sumpipe1_12 <= sum1_12;
          sumpipe1_13 <= sum1_13;
          sumpipe1_14 <= sum1_14;
          sumpipe1_15 <= sum1_15;
          sumpipe1_16 <= product1;
        end
      end
    end // temp_process1

  assign add_signext_30 = sumpipe1_1;
  assign add_signext_31 = sumpipe1_2;
  assign add_temp_15 = add_signext_30 + add_signext_31;
  assign sum2_1 = add_temp_15[52:0];

  assign add_signext_32 = sumpipe1_3;
  assign add_signext_33 = sumpipe1_4;
  assign add_temp_16 = add_signext_32 + add_signext_33;
  assign sum2_2 = add_temp_16[52:0];

  assign add_signext_34 = sumpipe1_5;
  assign add_signext_35 = sumpipe1_6;
  assign add_temp_17 = add_signext_34 + add_signext_35;
  assign sum2_3 = add_temp_17[52:0];

  assign add_signext_36 = sumpipe1_7;
  assign add_signext_37 = sumpipe1_8;
  assign add_temp_18 = add_signext_36 + add_signext_37;
  assign sum2_4 = add_temp_18[52:0];

  assign add_signext_38 = sumpipe1_9;
  assign add_signext_39 = sumpipe1_10;
  assign add_temp_19 = add_signext_38 + add_signext_39;
  assign sum2_5 = add_temp_19[52:0];

  assign add_signext_40 = sumpipe1_11;
  assign add_signext_41 = sumpipe1_12;
  assign add_temp_20 = add_signext_40 + add_signext_41;
  assign sum2_6 = add_temp_20[52:0];

  assign add_signext_42 = sumpipe1_13;
  assign add_signext_43 = sumpipe1_14;
  assign add_temp_21 = add_signext_42 + add_signext_43;
  assign sum2_7 = add_temp_21[52:0];

  assign add_signext_44 = sumpipe1_15;
  assign add_signext_45 = $signed({{5{sumpipe1_16[47]}}, sumpipe1_16});
  assign add_temp_22 = add_signext_44 + add_signext_45;
  assign sum2_8 = add_temp_22[52:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process2
      if (reset == 1'b1) begin
        sumpipe2_1 <= 0;
        sumpipe2_2 <= 0;
        sumpipe2_3 <= 0;
        sumpipe2_4 <= 0;
        sumpipe2_5 <= 0;
        sumpipe2_6 <= 0;
        sumpipe2_7 <= 0;
        sumpipe2_8 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe2_1 <= sum2_1;
          sumpipe2_2 <= sum2_2;
          sumpipe2_3 <= sum2_3;
          sumpipe2_4 <= sum2_4;
          sumpipe2_5 <= sum2_5;
          sumpipe2_6 <= sum2_6;
          sumpipe2_7 <= sum2_7;
          sumpipe2_8 <= sum2_8;
        end
      end
    end // temp_process2

  assign add_signext_46 = sumpipe2_1;
  assign add_signext_47 = sumpipe2_2;
  assign add_temp_23 = add_signext_46 + add_signext_47;
  assign sum3_1 = add_temp_23[52:0];

  assign add_signext_48 = sumpipe2_3;
  assign add_signext_49 = sumpipe2_4;
  assign add_temp_24 = add_signext_48 + add_signext_49;
  assign sum3_2 = add_temp_24[52:0];

  assign add_signext_50 = sumpipe2_5;
  assign add_signext_51 = sumpipe2_6;
  assign add_temp_25 = add_signext_50 + add_signext_51;
  assign sum3_3 = add_temp_25[52:0];

  assign add_signext_52 = sumpipe2_7;
  assign add_signext_53 = sumpipe2_8;
  assign add_temp_26 = add_signext_52 + add_signext_53;
  assign sum3_4 = add_temp_26[52:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process3
      if (reset == 1'b1) begin
        sumpipe3_1 <= 0;
        sumpipe3_2 <= 0;
        sumpipe3_3 <= 0;
        sumpipe3_4 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe3_1 <= sum3_1;
          sumpipe3_2 <= sum3_2;
          sumpipe3_3 <= sum3_3;
          sumpipe3_4 <= sum3_4;
        end
      end
    end // temp_process3

  assign add_signext_54 = sumpipe3_1;
  assign add_signext_55 = sumpipe3_2;
  assign add_temp_27 = add_signext_54 + add_signext_55;
  assign sum4_1 = add_temp_27[52:0];

  assign add_signext_56 = sumpipe3_3;
  assign add_signext_57 = sumpipe3_4;
  assign add_temp_28 = add_signext_56 + add_signext_57;
  assign sum4_2 = add_temp_28[52:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process4
      if (reset == 1'b1) begin
        sumpipe4_1 <= 0;
        sumpipe4_2 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe4_1 <= sum4_1;
          sumpipe4_2 <= sum4_2;
        end
      end
    end // temp_process4

  assign add_signext_58 = sumpipe4_1;
  assign add_signext_59 = sumpipe4_2;
  assign add_temp_29 = add_signext_58 + add_signext_59;
  assign sum5_1 = add_temp_29[52:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process5
      if (reset == 1'b1) begin
        sumpipe5_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe5_1 <= sum5_1;
        end
      end
    end // temp_process5

  assign sum_final = sumpipe5_1;

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= sum_final;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // fir_30_24b_fcsd

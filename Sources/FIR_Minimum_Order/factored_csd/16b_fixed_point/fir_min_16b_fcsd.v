// -------------------------------------------------------------
//
// Module: fir_min_16b_fcsd
// Generated by MATLAB(R) 9.12 and Filter Design HDL Coder 3.1.11.
// Generated on: 2023-06-19 20:49:58
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// CoeffMultipliers: Factored-CSD
// FIRAdderStyle: tree
// OptimizeForHDL: on
// TargetDirectory: W:\Nikos\UTh\Σχεδίαση Επεξεργαστών\Project\FIR_Minimum_Order\factored_csd\16b_fixed_point
// AddPipelineRegisters: on
// Name: fir_min_16b_fcsd
// InputDataType: numerictype(1,16,0)
// TargetLanguage: Verilog
// TestBenchName: fir_min_16b_fcsd_tb
// TestBenchStimulus: impulse step ramp chirp noise 

// Filter Specifications:
//
// Sample Rate     : 46 kHz
// Response        : Lowpass
// Specification   : Fp,Fst,Ap,Ast
// Stopband Atten. : 60 dB
// Passband Edge   : 8 kHz
// Stopband Edge   : 9.6 kHz
// Passband Ripple : 1 dB
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 61
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s16,16 -> [-5.000000e-01 5.000000e-01)
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module fir_min_16b_fcsd
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [15:0] filter_in; //sfix16
  output  signed [37:0] filter_out; //sfix38_En16

////////////////////////////////////////////////////////////////
//Module Architecture: fir_min_16b_fcsd
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeff1 = 16'b0000000001000111; //sfix16_En16
  parameter signed [15:0] coeff2 = 16'b0000000000001101; //sfix16_En16
  parameter signed [15:0] coeff3 = 16'b1111111100001001; //sfix16_En16
  parameter signed [15:0] coeff4 = 16'b1111110110000010; //sfix16_En16
  parameter signed [15:0] coeff5 = 16'b1111110010111111; //sfix16_En16
  parameter signed [15:0] coeff6 = 16'b1111110111011111; //sfix16_En16
  parameter signed [15:0] coeff7 = 16'b0000000001011010; //sfix16_En16
  parameter signed [15:0] coeff8 = 16'b0000001000000011; //sfix16_En16
  parameter signed [15:0] coeff9 = 16'b0000000100100010; //sfix16_En16
  parameter signed [15:0] coeff10 = 16'b1111111010100100; //sfix16_En16
  parameter signed [15:0] coeff11 = 16'b1111110110000101; //sfix16_En16
  parameter signed [15:0] coeff12 = 16'b1111111101111011; //sfix16_En16
  parameter signed [15:0] coeff13 = 16'b0000001010000111; //sfix16_En16
  parameter signed [15:0] coeff14 = 16'b0000001011010011; //sfix16_En16
  parameter signed [15:0] coeff15 = 16'b1111111101100011; //sfix16_En16
  parameter signed [15:0] coeff16 = 16'b1111110000000010; //sfix16_En16
  parameter signed [15:0] coeff17 = 16'b1111110101000001; //sfix16_En16
  parameter signed [15:0] coeff18 = 16'b0000001010000111; //sfix16_En16
  parameter signed [15:0] coeff19 = 16'b0000010110100101; //sfix16_En16
  parameter signed [15:0] coeff20 = 16'b0000000111010001; //sfix16_En16
  parameter signed [15:0] coeff21 = 16'b1111101001110110; //sfix16_En16
  parameter signed [15:0] coeff22 = 16'b1111100010110111; //sfix16_En16
  parameter signed [15:0] coeff23 = 16'b0000000010101110; //sfix16_En16
  parameter signed [15:0] coeff24 = 16'b0000101001011110; //sfix16_En16
  parameter signed [15:0] coeff25 = 16'b0000100010110001; //sfix16_En16
  parameter signed [15:0] coeff26 = 16'b1111100101010011; //sfix16_En16
  parameter signed [15:0] coeff27 = 16'b1110110000001010; //sfix16_En16
  parameter signed [15:0] coeff28 = 16'b1111011001011100; //sfix16_En16
  parameter signed [15:0] coeff29 = 16'b0001110100100111; //sfix16_En16
  parameter signed [15:0] coeff30 = 16'b0100101011101100; //sfix16_En16
  parameter signed [15:0] coeff31 = 16'b0101111101001110; //sfix16_En16
  parameter signed [15:0] coeff32 = 16'b0100101011101100; //sfix16_En16
  parameter signed [15:0] coeff33 = 16'b0001110100100111; //sfix16_En16
  parameter signed [15:0] coeff34 = 16'b1111011001011100; //sfix16_En16
  parameter signed [15:0] coeff35 = 16'b1110110000001010; //sfix16_En16
  parameter signed [15:0] coeff36 = 16'b1111100101010011; //sfix16_En16
  parameter signed [15:0] coeff37 = 16'b0000100010110001; //sfix16_En16
  parameter signed [15:0] coeff38 = 16'b0000101001011110; //sfix16_En16
  parameter signed [15:0] coeff39 = 16'b0000000010101110; //sfix16_En16
  parameter signed [15:0] coeff40 = 16'b1111100010110111; //sfix16_En16
  parameter signed [15:0] coeff41 = 16'b1111101001110110; //sfix16_En16
  parameter signed [15:0] coeff42 = 16'b0000000111010001; //sfix16_En16
  parameter signed [15:0] coeff43 = 16'b0000010110100101; //sfix16_En16
  parameter signed [15:0] coeff44 = 16'b0000001010000111; //sfix16_En16
  parameter signed [15:0] coeff45 = 16'b1111110101000001; //sfix16_En16
  parameter signed [15:0] coeff46 = 16'b1111110000000010; //sfix16_En16
  parameter signed [15:0] coeff47 = 16'b1111111101100011; //sfix16_En16
  parameter signed [15:0] coeff48 = 16'b0000001011010011; //sfix16_En16
  parameter signed [15:0] coeff49 = 16'b0000001010000111; //sfix16_En16
  parameter signed [15:0] coeff50 = 16'b1111111101111011; //sfix16_En16
  parameter signed [15:0] coeff51 = 16'b1111110110000101; //sfix16_En16
  parameter signed [15:0] coeff52 = 16'b1111111010100100; //sfix16_En16
  parameter signed [15:0] coeff53 = 16'b0000000100100010; //sfix16_En16
  parameter signed [15:0] coeff54 = 16'b0000001000000011; //sfix16_En16
  parameter signed [15:0] coeff55 = 16'b0000000001011010; //sfix16_En16
  parameter signed [15:0] coeff56 = 16'b1111110111011111; //sfix16_En16
  parameter signed [15:0] coeff57 = 16'b1111110010111111; //sfix16_En16
  parameter signed [15:0] coeff58 = 16'b1111110110000010; //sfix16_En16
  parameter signed [15:0] coeff59 = 16'b1111111100001001; //sfix16_En16
  parameter signed [15:0] coeff60 = 16'b0000000000001101; //sfix16_En16
  parameter signed [15:0] coeff61 = 16'b0000000001000111; //sfix16_En16

  // Signals
  reg  signed [15:0] delay_pipeline [0:60] ; // sfix16
  wire signed [31:0] product61; // sfix32_En16
  wire signed [22:0] mulcsd_temp; // sfix23_En16
  wire signed [31:0] product60; // sfix32_En16
  wire signed [20:0] mulcsd_temp_1; // sfix21_En16
  wire signed [31:0] product59; // sfix32_En16
  wire signed [24:0] mulcsd_temp_2; // sfix25_En16
  wire signed [31:0] product58; // sfix32_En16
  wire signed [25:0] mulcsd_temp_3; // sfix26_En16
  wire signed [31:0] product57; // sfix32_En16
  wire signed [26:0] mulcsd_temp_4; // sfix27_En16
  wire signed [31:0] product56; // sfix32_En16
  wire signed [25:0] mulcsd_temp_5; // sfix26_En16
  wire signed [31:0] product55; // sfix32_En16
  wire signed [19:0] factoredcsd_temp; // sfix20_En4
  wire signed [20:0] mulcsd_temp_6; // sfix21_En4
  wire signed [21:0] factoredcsd_temp_1; // sfix22_En6
  wire signed [22:0] mulcsd_temp_7; // sfix23_En6
  wire signed [22:0] factoredcsd_temp_2; // sfix23_En16
  wire signed [31:0] product54; // sfix32_En16
  wire signed [25:0] mulcsd_temp_8; // sfix26_En16
  wire signed [31:0] product53; // sfix32_En16
  wire signed [24:0] mulcsd_temp_9; // sfix25_En16
  wire signed [31:0] product52; // sfix32_En16
  wire signed [24:0] mulcsd_temp_10; // sfix25_En16
  wire signed [31:0] product51; // sfix32_En16
  wire signed [22:0] factoredcsd_temp_3; // sfix23_En7
  wire signed [23:0] mulcsd_temp_11; // sfix24_En7
  wire signed [25:0] factoredcsd_temp_4; // sfix26_En10
  wire signed [25:0] mulcsd_temp_12; // sfix26_En10
  wire signed [25:0] factoredcsd_temp_5; // sfix26_En16
  wire signed [26:0] unaryminus_temp; // sfix27_En16
  wire signed [31:0] product50; // sfix32_En16
  wire signed [23:0] mulcsd_temp_13; // sfix24_En16
  wire signed [31:0] product49; // sfix32_En16
  wire signed [25:0] mulcsd_temp_14; // sfix26_En16
  wire signed [31:0] product48; // sfix32_En16
  wire signed [23:0] factoredcsd_temp_6; // sfix24_En8
  wire signed [24:0] mulcsd_temp_15; // sfix25_En8
  wire signed [25:0] factoredcsd_temp_7; // sfix26_En10
  wire signed [26:0] mulcsd_temp_16; // sfix27_En10
  wire signed [25:0] factoredcsd_temp_8; // sfix26_En16
  wire signed [31:0] product47; // sfix32_En16
  wire signed [23:0] mulcsd_temp_17; // sfix24_En16
  wire signed [31:0] product46; // sfix32_En16
  wire signed [26:0] mulcsd_temp_18; // sfix27_En16
  wire signed [31:0] product45; // sfix32_En16
  wire signed [25:0] mulcsd_temp_19; // sfix26_En16
  wire signed [31:0] product44; // sfix32_En16
  wire signed [25:0] mulcsd_temp_20; // sfix26_En16
  wire signed [31:0] product43; // sfix32_En16
  wire signed [20:0] factoredcsd_temp_9; // sfix21_En5
  wire signed [20:0] mulcsd_temp_21; // sfix21_En5
  wire signed [25:0] factoredcsd_temp_10; // sfix26_En10
  wire signed [25:0] mulcsd_temp_22; // sfix26_En10
  wire signed [26:0] factoredcsd_temp_11; // sfix27_En13
  wire signed [28:0] mulcsd_temp_23; // sfix29_En13
  wire signed [26:0] factoredcsd_temp_12; // sfix27_En16
  wire signed [31:0] product42; // sfix32_En16
  wire signed [20:0] factoredcsd_temp_13; // sfix21_En5
  wire signed [21:0] mulcsd_temp_24; // sfix22_En5
  wire signed [24:0] factoredcsd_temp_14; // sfix25_En9
  wire signed [25:0] mulcsd_temp_25; // sfix26_En9
  wire signed [24:0] factoredcsd_temp_15; // sfix25_En16
  wire signed [31:0] product41; // sfix32_En16
  wire signed [26:0] mulcsd_temp_26; // sfix27_En16
  wire signed [31:0] product40; // sfix32_En16
  wire signed [27:0] mulcsd_temp_27; // sfix28_En16
  wire signed [31:0] product39; // sfix32_En16
  wire signed [23:0] mulcsd_temp_28; // sfix24_En16
  wire signed [31:0] product38; // sfix32_En16
  wire signed [27:0] mulcsd_temp_29; // sfix28_En16
  wire signed [31:0] product37; // sfix32_En16
  wire signed [27:0] mulcsd_temp_30; // sfix28_En16
  wire signed [31:0] product36; // sfix32_En16
  wire signed [27:0] mulcsd_temp_31; // sfix28_En16
  wire signed [31:0] product35; // sfix32_En16
  wire signed [24:0] factoredcsd_temp_16; // sfix25_En9
  wire signed [25:0] mulcsd_temp_32; // sfix26_En9
  wire signed [27:0] factoredcsd_temp_17; // sfix28_En12
  wire signed [27:0] mulcsd_temp_33; // sfix28_En12
  wire signed [28:0] factoredcsd_temp_18; // sfix29_En16
  wire signed [29:0] unaryminus_temp_1; // sfix30_En16
  wire signed [31:0] product34; // sfix32_En16
  wire signed [27:0] mulcsd_temp_34; // sfix28_En16
  wire signed [31:0] product33; // sfix32_En16
  wire signed [24:0] factoredcsd_temp_19; // sfix25_En9
  wire signed [25:0] mulcsd_temp_35; // sfix26_En9
  wire signed [28:0] factoredcsd_temp_20; // sfix29_En14
  wire signed [29:0] mulcsd_temp_36; // sfix30_En14
  wire signed [28:0] factoredcsd_temp_21; // sfix29_En16
  wire signed [31:0] product32; // sfix32_En16
  wire signed [23:0] factoredcsd_temp_22; // sfix24_En8
  wire signed [23:0] mulcsd_temp_37; // sfix24_En8
  wire signed [26:0] factoredcsd_temp_23; // sfix27_En11
  wire signed [27:0] mulcsd_temp_38; // sfix28_En11
  wire signed [29:0] factoredcsd_temp_24; // sfix30_En14
  wire signed [29:0] mulcsd_temp_39; // sfix30_En14
  wire signed [30:0] factoredcsd_temp_25; // sfix31_En16
  wire signed [31:0] product31; // sfix32_En16
  wire signed [30:0] mulcsd_temp_40; // sfix31_En16
  wire signed [31:0] product30; // sfix32_En16
  wire signed [23:0] factoredcsd_temp_26; // sfix24_En8
  wire signed [23:0] mulcsd_temp_41; // sfix24_En8
  wire signed [26:0] factoredcsd_temp_27; // sfix27_En11
  wire signed [27:0] mulcsd_temp_42; // sfix28_En11
  wire signed [29:0] factoredcsd_temp_28; // sfix30_En14
  wire signed [29:0] mulcsd_temp_43; // sfix30_En14
  wire signed [30:0] factoredcsd_temp_29; // sfix31_En16
  wire signed [31:0] product29; // sfix32_En16
  wire signed [24:0] factoredcsd_temp_30; // sfix25_En9
  wire signed [25:0] mulcsd_temp_44; // sfix26_En9
  wire signed [28:0] factoredcsd_temp_31; // sfix29_En14
  wire signed [29:0] mulcsd_temp_45; // sfix30_En14
  wire signed [28:0] factoredcsd_temp_32; // sfix29_En16
  wire signed [31:0] product28; // sfix32_En16
  wire signed [27:0] mulcsd_temp_46; // sfix28_En16
  wire signed [31:0] product27; // sfix32_En16
  wire signed [24:0] factoredcsd_temp_33; // sfix25_En9
  wire signed [25:0] mulcsd_temp_47; // sfix26_En9
  wire signed [27:0] factoredcsd_temp_34; // sfix28_En12
  wire signed [27:0] mulcsd_temp_48; // sfix28_En12
  wire signed [28:0] factoredcsd_temp_35; // sfix29_En16
  wire signed [29:0] unaryminus_temp_2; // sfix30_En16
  wire signed [31:0] product26; // sfix32_En16
  wire signed [27:0] mulcsd_temp_49; // sfix28_En16
  wire signed [31:0] product25; // sfix32_En16
  wire signed [27:0] mulcsd_temp_50; // sfix28_En16
  wire signed [31:0] product24; // sfix32_En16
  wire signed [27:0] mulcsd_temp_51; // sfix28_En16
  wire signed [31:0] product23; // sfix32_En16
  wire signed [23:0] mulcsd_temp_52; // sfix24_En16
  wire signed [31:0] product22; // sfix32_En16
  wire signed [27:0] mulcsd_temp_53; // sfix28_En16
  wire signed [31:0] product21; // sfix32_En16
  wire signed [26:0] mulcsd_temp_54; // sfix27_En16
  wire signed [31:0] product20; // sfix32_En16
  wire signed [20:0] factoredcsd_temp_36; // sfix21_En5
  wire signed [21:0] mulcsd_temp_55; // sfix22_En5
  wire signed [24:0] factoredcsd_temp_37; // sfix25_En9
  wire signed [25:0] mulcsd_temp_56; // sfix26_En9
  wire signed [24:0] factoredcsd_temp_38; // sfix25_En16
  wire signed [31:0] product19; // sfix32_En16
  wire signed [20:0] factoredcsd_temp_39; // sfix21_En5
  wire signed [20:0] mulcsd_temp_57; // sfix21_En5
  wire signed [25:0] factoredcsd_temp_40; // sfix26_En10
  wire signed [25:0] mulcsd_temp_58; // sfix26_En10
  wire signed [26:0] factoredcsd_temp_41; // sfix27_En13
  wire signed [28:0] mulcsd_temp_59; // sfix29_En13
  wire signed [26:0] factoredcsd_temp_42; // sfix27_En16
  wire signed [31:0] product18; // sfix32_En16
  wire signed [25:0] mulcsd_temp_60; // sfix26_En16
  wire signed [31:0] product17; // sfix32_En16
  wire signed [25:0] mulcsd_temp_61; // sfix26_En16
  wire signed [31:0] product16; // sfix32_En16
  wire signed [26:0] mulcsd_temp_62; // sfix27_En16
  wire signed [31:0] product15; // sfix32_En16
  wire signed [23:0] mulcsd_temp_63; // sfix24_En16
  wire signed [31:0] product14; // sfix32_En16
  wire signed [23:0] factoredcsd_temp_43; // sfix24_En8
  wire signed [24:0] mulcsd_temp_64; // sfix25_En8
  wire signed [25:0] factoredcsd_temp_44; // sfix26_En10
  wire signed [26:0] mulcsd_temp_65; // sfix27_En10
  wire signed [25:0] factoredcsd_temp_45; // sfix26_En16
  wire signed [31:0] product13; // sfix32_En16
  wire signed [25:0] mulcsd_temp_66; // sfix26_En16
  wire signed [31:0] product12; // sfix32_En16
  wire signed [23:0] mulcsd_temp_67; // sfix24_En16
  wire signed [31:0] product11; // sfix32_En16
  wire signed [22:0] factoredcsd_temp_46; // sfix23_En7
  wire signed [23:0] mulcsd_temp_68; // sfix24_En7
  wire signed [25:0] factoredcsd_temp_47; // sfix26_En10
  wire signed [25:0] mulcsd_temp_69; // sfix26_En10
  wire signed [25:0] factoredcsd_temp_48; // sfix26_En16
  wire signed [26:0] unaryminus_temp_3; // sfix27_En16
  wire signed [31:0] product10; // sfix32_En16
  wire signed [24:0] mulcsd_temp_70; // sfix25_En16
  wire signed [31:0] product9; // sfix32_En16
  wire signed [24:0] mulcsd_temp_71; // sfix25_En16
  wire signed [31:0] product8; // sfix32_En16
  wire signed [25:0] mulcsd_temp_72; // sfix26_En16
  wire signed [31:0] product7; // sfix32_En16
  wire signed [19:0] factoredcsd_temp_49; // sfix20_En4
  wire signed [20:0] mulcsd_temp_73; // sfix21_En4
  wire signed [21:0] factoredcsd_temp_50; // sfix22_En6
  wire signed [22:0] mulcsd_temp_74; // sfix23_En6
  wire signed [22:0] factoredcsd_temp_51; // sfix23_En16
  wire signed [31:0] product6; // sfix32_En16
  wire signed [25:0] mulcsd_temp_75; // sfix26_En16
  wire signed [31:0] product5; // sfix32_En16
  wire signed [26:0] mulcsd_temp_76; // sfix27_En16
  wire signed [31:0] product4; // sfix32_En16
  wire signed [25:0] mulcsd_temp_77; // sfix26_En16
  wire signed [31:0] product3; // sfix32_En16
  wire signed [24:0] mulcsd_temp_78; // sfix25_En16
  wire signed [31:0] product2; // sfix32_En16
  wire signed [20:0] mulcsd_temp_79; // sfix21_En16
  wire signed [31:0] product1; // sfix32_En16
  wire signed [22:0] mulcsd_temp_80; // sfix23_En16
  wire signed [37:0] sum_final; // sfix38_En16
  wire signed [37:0] sum1_1; // sfix38_En16
  wire signed [31:0] add_signext; // sfix32_En16
  wire signed [31:0] add_signext_1; // sfix32_En16
  wire signed [32:0] add_temp; // sfix33_En16
  reg  signed [37:0] sumpipe1_1; // sfix38_En16
  wire signed [37:0] sum1_2; // sfix38_En16
  wire signed [31:0] add_signext_2; // sfix32_En16
  wire signed [31:0] add_signext_3; // sfix32_En16
  wire signed [32:0] add_temp_1; // sfix33_En16
  reg  signed [37:0] sumpipe1_2; // sfix38_En16
  wire signed [37:0] sum1_3; // sfix38_En16
  wire signed [31:0] add_signext_4; // sfix32_En16
  wire signed [31:0] add_signext_5; // sfix32_En16
  wire signed [32:0] add_temp_2; // sfix33_En16
  reg  signed [37:0] sumpipe1_3; // sfix38_En16
  wire signed [37:0] sum1_4; // sfix38_En16
  wire signed [31:0] add_signext_6; // sfix32_En16
  wire signed [31:0] add_signext_7; // sfix32_En16
  wire signed [32:0] add_temp_3; // sfix33_En16
  reg  signed [37:0] sumpipe1_4; // sfix38_En16
  wire signed [37:0] sum1_5; // sfix38_En16
  wire signed [31:0] add_signext_8; // sfix32_En16
  wire signed [31:0] add_signext_9; // sfix32_En16
  wire signed [32:0] add_temp_4; // sfix33_En16
  reg  signed [37:0] sumpipe1_5; // sfix38_En16
  wire signed [37:0] sum1_6; // sfix38_En16
  wire signed [31:0] add_signext_10; // sfix32_En16
  wire signed [31:0] add_signext_11; // sfix32_En16
  wire signed [32:0] add_temp_5; // sfix33_En16
  reg  signed [37:0] sumpipe1_6; // sfix38_En16
  wire signed [37:0] sum1_7; // sfix38_En16
  wire signed [31:0] add_signext_12; // sfix32_En16
  wire signed [31:0] add_signext_13; // sfix32_En16
  wire signed [32:0] add_temp_6; // sfix33_En16
  reg  signed [37:0] sumpipe1_7; // sfix38_En16
  wire signed [37:0] sum1_8; // sfix38_En16
  wire signed [31:0] add_signext_14; // sfix32_En16
  wire signed [31:0] add_signext_15; // sfix32_En16
  wire signed [32:0] add_temp_7; // sfix33_En16
  reg  signed [37:0] sumpipe1_8; // sfix38_En16
  wire signed [37:0] sum1_9; // sfix38_En16
  wire signed [31:0] add_signext_16; // sfix32_En16
  wire signed [31:0] add_signext_17; // sfix32_En16
  wire signed [32:0] add_temp_8; // sfix33_En16
  reg  signed [37:0] sumpipe1_9; // sfix38_En16
  wire signed [37:0] sum1_10; // sfix38_En16
  wire signed [31:0] add_signext_18; // sfix32_En16
  wire signed [31:0] add_signext_19; // sfix32_En16
  wire signed [32:0] add_temp_9; // sfix33_En16
  reg  signed [37:0] sumpipe1_10; // sfix38_En16
  wire signed [37:0] sum1_11; // sfix38_En16
  wire signed [31:0] add_signext_20; // sfix32_En16
  wire signed [31:0] add_signext_21; // sfix32_En16
  wire signed [32:0] add_temp_10; // sfix33_En16
  reg  signed [37:0] sumpipe1_11; // sfix38_En16
  wire signed [37:0] sum1_12; // sfix38_En16
  wire signed [31:0] add_signext_22; // sfix32_En16
  wire signed [31:0] add_signext_23; // sfix32_En16
  wire signed [32:0] add_temp_11; // sfix33_En16
  reg  signed [37:0] sumpipe1_12; // sfix38_En16
  wire signed [37:0] sum1_13; // sfix38_En16
  wire signed [31:0] add_signext_24; // sfix32_En16
  wire signed [31:0] add_signext_25; // sfix32_En16
  wire signed [32:0] add_temp_12; // sfix33_En16
  reg  signed [37:0] sumpipe1_13; // sfix38_En16
  wire signed [37:0] sum1_14; // sfix38_En16
  wire signed [31:0] add_signext_26; // sfix32_En16
  wire signed [31:0] add_signext_27; // sfix32_En16
  wire signed [32:0] add_temp_13; // sfix33_En16
  reg  signed [37:0] sumpipe1_14; // sfix38_En16
  wire signed [37:0] sum1_15; // sfix38_En16
  wire signed [31:0] add_signext_28; // sfix32_En16
  wire signed [31:0] add_signext_29; // sfix32_En16
  wire signed [32:0] add_temp_14; // sfix33_En16
  reg  signed [37:0] sumpipe1_15; // sfix38_En16
  wire signed [37:0] sum1_16; // sfix38_En16
  wire signed [31:0] add_signext_30; // sfix32_En16
  wire signed [31:0] add_signext_31; // sfix32_En16
  wire signed [32:0] add_temp_15; // sfix33_En16
  reg  signed [37:0] sumpipe1_16; // sfix38_En16
  wire signed [37:0] sum1_17; // sfix38_En16
  wire signed [31:0] add_signext_32; // sfix32_En16
  wire signed [31:0] add_signext_33; // sfix32_En16
  wire signed [32:0] add_temp_16; // sfix33_En16
  reg  signed [37:0] sumpipe1_17; // sfix38_En16
  wire signed [37:0] sum1_18; // sfix38_En16
  wire signed [31:0] add_signext_34; // sfix32_En16
  wire signed [31:0] add_signext_35; // sfix32_En16
  wire signed [32:0] add_temp_17; // sfix33_En16
  reg  signed [37:0] sumpipe1_18; // sfix38_En16
  wire signed [37:0] sum1_19; // sfix38_En16
  wire signed [31:0] add_signext_36; // sfix32_En16
  wire signed [31:0] add_signext_37; // sfix32_En16
  wire signed [32:0] add_temp_18; // sfix33_En16
  reg  signed [37:0] sumpipe1_19; // sfix38_En16
  wire signed [37:0] sum1_20; // sfix38_En16
  wire signed [31:0] add_signext_38; // sfix32_En16
  wire signed [31:0] add_signext_39; // sfix32_En16
  wire signed [32:0] add_temp_19; // sfix33_En16
  reg  signed [37:0] sumpipe1_20; // sfix38_En16
  wire signed [37:0] sum1_21; // sfix38_En16
  wire signed [31:0] add_signext_40; // sfix32_En16
  wire signed [31:0] add_signext_41; // sfix32_En16
  wire signed [32:0] add_temp_20; // sfix33_En16
  reg  signed [37:0] sumpipe1_21; // sfix38_En16
  wire signed [37:0] sum1_22; // sfix38_En16
  wire signed [31:0] add_signext_42; // sfix32_En16
  wire signed [31:0] add_signext_43; // sfix32_En16
  wire signed [32:0] add_temp_21; // sfix33_En16
  reg  signed [37:0] sumpipe1_22; // sfix38_En16
  wire signed [37:0] sum1_23; // sfix38_En16
  wire signed [31:0] add_signext_44; // sfix32_En16
  wire signed [31:0] add_signext_45; // sfix32_En16
  wire signed [32:0] add_temp_22; // sfix33_En16
  reg  signed [37:0] sumpipe1_23; // sfix38_En16
  wire signed [37:0] sum1_24; // sfix38_En16
  wire signed [31:0] add_signext_46; // sfix32_En16
  wire signed [31:0] add_signext_47; // sfix32_En16
  wire signed [32:0] add_temp_23; // sfix33_En16
  reg  signed [37:0] sumpipe1_24; // sfix38_En16
  wire signed [37:0] sum1_25; // sfix38_En16
  wire signed [31:0] add_signext_48; // sfix32_En16
  wire signed [31:0] add_signext_49; // sfix32_En16
  wire signed [32:0] add_temp_24; // sfix33_En16
  reg  signed [37:0] sumpipe1_25; // sfix38_En16
  wire signed [37:0] sum1_26; // sfix38_En16
  wire signed [31:0] add_signext_50; // sfix32_En16
  wire signed [31:0] add_signext_51; // sfix32_En16
  wire signed [32:0] add_temp_25; // sfix33_En16
  reg  signed [37:0] sumpipe1_26; // sfix38_En16
  wire signed [37:0] sum1_27; // sfix38_En16
  wire signed [31:0] add_signext_52; // sfix32_En16
  wire signed [31:0] add_signext_53; // sfix32_En16
  wire signed [32:0] add_temp_26; // sfix33_En16
  reg  signed [37:0] sumpipe1_27; // sfix38_En16
  wire signed [37:0] sum1_28; // sfix38_En16
  wire signed [31:0] add_signext_54; // sfix32_En16
  wire signed [31:0] add_signext_55; // sfix32_En16
  wire signed [32:0] add_temp_27; // sfix33_En16
  reg  signed [37:0] sumpipe1_28; // sfix38_En16
  wire signed [37:0] sum1_29; // sfix38_En16
  wire signed [31:0] add_signext_56; // sfix32_En16
  wire signed [31:0] add_signext_57; // sfix32_En16
  wire signed [32:0] add_temp_28; // sfix33_En16
  reg  signed [37:0] sumpipe1_29; // sfix38_En16
  wire signed [37:0] sum1_30; // sfix38_En16
  wire signed [31:0] add_signext_58; // sfix32_En16
  wire signed [31:0] add_signext_59; // sfix32_En16
  wire signed [32:0] add_temp_29; // sfix33_En16
  reg  signed [37:0] sumpipe1_30; // sfix38_En16
  reg  signed [31:0] sumpipe1_31; // sfix32_En16
  wire signed [37:0] sum2_1; // sfix38_En16
  wire signed [37:0] add_signext_60; // sfix38_En16
  wire signed [37:0] add_signext_61; // sfix38_En16
  wire signed [38:0] add_temp_30; // sfix39_En16
  reg  signed [37:0] sumpipe2_1; // sfix38_En16
  wire signed [37:0] sum2_2; // sfix38_En16
  wire signed [37:0] add_signext_62; // sfix38_En16
  wire signed [37:0] add_signext_63; // sfix38_En16
  wire signed [38:0] add_temp_31; // sfix39_En16
  reg  signed [37:0] sumpipe2_2; // sfix38_En16
  wire signed [37:0] sum2_3; // sfix38_En16
  wire signed [37:0] add_signext_64; // sfix38_En16
  wire signed [37:0] add_signext_65; // sfix38_En16
  wire signed [38:0] add_temp_32; // sfix39_En16
  reg  signed [37:0] sumpipe2_3; // sfix38_En16
  wire signed [37:0] sum2_4; // sfix38_En16
  wire signed [37:0] add_signext_66; // sfix38_En16
  wire signed [37:0] add_signext_67; // sfix38_En16
  wire signed [38:0] add_temp_33; // sfix39_En16
  reg  signed [37:0] sumpipe2_4; // sfix38_En16
  wire signed [37:0] sum2_5; // sfix38_En16
  wire signed [37:0] add_signext_68; // sfix38_En16
  wire signed [37:0] add_signext_69; // sfix38_En16
  wire signed [38:0] add_temp_34; // sfix39_En16
  reg  signed [37:0] sumpipe2_5; // sfix38_En16
  wire signed [37:0] sum2_6; // sfix38_En16
  wire signed [37:0] add_signext_70; // sfix38_En16
  wire signed [37:0] add_signext_71; // sfix38_En16
  wire signed [38:0] add_temp_35; // sfix39_En16
  reg  signed [37:0] sumpipe2_6; // sfix38_En16
  wire signed [37:0] sum2_7; // sfix38_En16
  wire signed [37:0] add_signext_72; // sfix38_En16
  wire signed [37:0] add_signext_73; // sfix38_En16
  wire signed [38:0] add_temp_36; // sfix39_En16
  reg  signed [37:0] sumpipe2_7; // sfix38_En16
  wire signed [37:0] sum2_8; // sfix38_En16
  wire signed [37:0] add_signext_74; // sfix38_En16
  wire signed [37:0] add_signext_75; // sfix38_En16
  wire signed [38:0] add_temp_37; // sfix39_En16
  reg  signed [37:0] sumpipe2_8; // sfix38_En16
  wire signed [37:0] sum2_9; // sfix38_En16
  wire signed [37:0] add_signext_76; // sfix38_En16
  wire signed [37:0] add_signext_77; // sfix38_En16
  wire signed [38:0] add_temp_38; // sfix39_En16
  reg  signed [37:0] sumpipe2_9; // sfix38_En16
  wire signed [37:0] sum2_10; // sfix38_En16
  wire signed [37:0] add_signext_78; // sfix38_En16
  wire signed [37:0] add_signext_79; // sfix38_En16
  wire signed [38:0] add_temp_39; // sfix39_En16
  reg  signed [37:0] sumpipe2_10; // sfix38_En16
  wire signed [37:0] sum2_11; // sfix38_En16
  wire signed [37:0] add_signext_80; // sfix38_En16
  wire signed [37:0] add_signext_81; // sfix38_En16
  wire signed [38:0] add_temp_40; // sfix39_En16
  reg  signed [37:0] sumpipe2_11; // sfix38_En16
  wire signed [37:0] sum2_12; // sfix38_En16
  wire signed [37:0] add_signext_82; // sfix38_En16
  wire signed [37:0] add_signext_83; // sfix38_En16
  wire signed [38:0] add_temp_41; // sfix39_En16
  reg  signed [37:0] sumpipe2_12; // sfix38_En16
  wire signed [37:0] sum2_13; // sfix38_En16
  wire signed [37:0] add_signext_84; // sfix38_En16
  wire signed [37:0] add_signext_85; // sfix38_En16
  wire signed [38:0] add_temp_42; // sfix39_En16
  reg  signed [37:0] sumpipe2_13; // sfix38_En16
  wire signed [37:0] sum2_14; // sfix38_En16
  wire signed [37:0] add_signext_86; // sfix38_En16
  wire signed [37:0] add_signext_87; // sfix38_En16
  wire signed [38:0] add_temp_43; // sfix39_En16
  reg  signed [37:0] sumpipe2_14; // sfix38_En16
  wire signed [37:0] sum2_15; // sfix38_En16
  wire signed [37:0] add_signext_88; // sfix38_En16
  wire signed [37:0] add_signext_89; // sfix38_En16
  wire signed [38:0] add_temp_44; // sfix39_En16
  reg  signed [37:0] sumpipe2_15; // sfix38_En16
  reg  signed [31:0] sumpipe2_16; // sfix32_En16
  wire signed [37:0] sum3_1; // sfix38_En16
  wire signed [37:0] add_signext_90; // sfix38_En16
  wire signed [37:0] add_signext_91; // sfix38_En16
  wire signed [38:0] add_temp_45; // sfix39_En16
  reg  signed [37:0] sumpipe3_1; // sfix38_En16
  wire signed [37:0] sum3_2; // sfix38_En16
  wire signed [37:0] add_signext_92; // sfix38_En16
  wire signed [37:0] add_signext_93; // sfix38_En16
  wire signed [38:0] add_temp_46; // sfix39_En16
  reg  signed [37:0] sumpipe3_2; // sfix38_En16
  wire signed [37:0] sum3_3; // sfix38_En16
  wire signed [37:0] add_signext_94; // sfix38_En16
  wire signed [37:0] add_signext_95; // sfix38_En16
  wire signed [38:0] add_temp_47; // sfix39_En16
  reg  signed [37:0] sumpipe3_3; // sfix38_En16
  wire signed [37:0] sum3_4; // sfix38_En16
  wire signed [37:0] add_signext_96; // sfix38_En16
  wire signed [37:0] add_signext_97; // sfix38_En16
  wire signed [38:0] add_temp_48; // sfix39_En16
  reg  signed [37:0] sumpipe3_4; // sfix38_En16
  wire signed [37:0] sum3_5; // sfix38_En16
  wire signed [37:0] add_signext_98; // sfix38_En16
  wire signed [37:0] add_signext_99; // sfix38_En16
  wire signed [38:0] add_temp_49; // sfix39_En16
  reg  signed [37:0] sumpipe3_5; // sfix38_En16
  wire signed [37:0] sum3_6; // sfix38_En16
  wire signed [37:0] add_signext_100; // sfix38_En16
  wire signed [37:0] add_signext_101; // sfix38_En16
  wire signed [38:0] add_temp_50; // sfix39_En16
  reg  signed [37:0] sumpipe3_6; // sfix38_En16
  wire signed [37:0] sum3_7; // sfix38_En16
  wire signed [37:0] add_signext_102; // sfix38_En16
  wire signed [37:0] add_signext_103; // sfix38_En16
  wire signed [38:0] add_temp_51; // sfix39_En16
  reg  signed [37:0] sumpipe3_7; // sfix38_En16
  wire signed [37:0] sum3_8; // sfix38_En16
  wire signed [37:0] add_signext_104; // sfix38_En16
  wire signed [37:0] add_signext_105; // sfix38_En16
  wire signed [38:0] add_temp_52; // sfix39_En16
  reg  signed [37:0] sumpipe3_8; // sfix38_En16
  wire signed [37:0] sum4_1; // sfix38_En16
  wire signed [37:0] add_signext_106; // sfix38_En16
  wire signed [37:0] add_signext_107; // sfix38_En16
  wire signed [38:0] add_temp_53; // sfix39_En16
  reg  signed [37:0] sumpipe4_1; // sfix38_En16
  wire signed [37:0] sum4_2; // sfix38_En16
  wire signed [37:0] add_signext_108; // sfix38_En16
  wire signed [37:0] add_signext_109; // sfix38_En16
  wire signed [38:0] add_temp_54; // sfix39_En16
  reg  signed [37:0] sumpipe4_2; // sfix38_En16
  wire signed [37:0] sum4_3; // sfix38_En16
  wire signed [37:0] add_signext_110; // sfix38_En16
  wire signed [37:0] add_signext_111; // sfix38_En16
  wire signed [38:0] add_temp_55; // sfix39_En16
  reg  signed [37:0] sumpipe4_3; // sfix38_En16
  wire signed [37:0] sum4_4; // sfix38_En16
  wire signed [37:0] add_signext_112; // sfix38_En16
  wire signed [37:0] add_signext_113; // sfix38_En16
  wire signed [38:0] add_temp_56; // sfix39_En16
  reg  signed [37:0] sumpipe4_4; // sfix38_En16
  wire signed [37:0] sum5_1; // sfix38_En16
  wire signed [37:0] add_signext_114; // sfix38_En16
  wire signed [37:0] add_signext_115; // sfix38_En16
  wire signed [38:0] add_temp_57; // sfix39_En16
  reg  signed [37:0] sumpipe5_1; // sfix38_En16
  wire signed [37:0] sum5_2; // sfix38_En16
  wire signed [37:0] add_signext_116; // sfix38_En16
  wire signed [37:0] add_signext_117; // sfix38_En16
  wire signed [38:0] add_temp_58; // sfix39_En16
  reg  signed [37:0] sumpipe5_2; // sfix38_En16
  wire signed [37:0] sum6_1; // sfix38_En16
  wire signed [37:0] add_signext_118; // sfix38_En16
  wire signed [37:0] add_signext_119; // sfix38_En16
  wire signed [38:0] add_temp_59; // sfix39_En16
  reg  signed [37:0] sumpipe6_1; // sfix38_En16
  reg  signed [37:0] output_register; // sfix38_En16

  // Block Statements
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
        delay_pipeline[18] <= 0;
        delay_pipeline[19] <= 0;
        delay_pipeline[20] <= 0;
        delay_pipeline[21] <= 0;
        delay_pipeline[22] <= 0;
        delay_pipeline[23] <= 0;
        delay_pipeline[24] <= 0;
        delay_pipeline[25] <= 0;
        delay_pipeline[26] <= 0;
        delay_pipeline[27] <= 0;
        delay_pipeline[28] <= 0;
        delay_pipeline[29] <= 0;
        delay_pipeline[30] <= 0;
        delay_pipeline[31] <= 0;
        delay_pipeline[32] <= 0;
        delay_pipeline[33] <= 0;
        delay_pipeline[34] <= 0;
        delay_pipeline[35] <= 0;
        delay_pipeline[36] <= 0;
        delay_pipeline[37] <= 0;
        delay_pipeline[38] <= 0;
        delay_pipeline[39] <= 0;
        delay_pipeline[40] <= 0;
        delay_pipeline[41] <= 0;
        delay_pipeline[42] <= 0;
        delay_pipeline[43] <= 0;
        delay_pipeline[44] <= 0;
        delay_pipeline[45] <= 0;
        delay_pipeline[46] <= 0;
        delay_pipeline[47] <= 0;
        delay_pipeline[48] <= 0;
        delay_pipeline[49] <= 0;
        delay_pipeline[50] <= 0;
        delay_pipeline[51] <= 0;
        delay_pipeline[52] <= 0;
        delay_pipeline[53] <= 0;
        delay_pipeline[54] <= 0;
        delay_pipeline[55] <= 0;
        delay_pipeline[56] <= 0;
        delay_pipeline[57] <= 0;
        delay_pipeline[58] <= 0;
        delay_pipeline[59] <= 0;
        delay_pipeline[60] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
          delay_pipeline[31] <= delay_pipeline[30];
          delay_pipeline[32] <= delay_pipeline[31];
          delay_pipeline[33] <= delay_pipeline[32];
          delay_pipeline[34] <= delay_pipeline[33];
          delay_pipeline[35] <= delay_pipeline[34];
          delay_pipeline[36] <= delay_pipeline[35];
          delay_pipeline[37] <= delay_pipeline[36];
          delay_pipeline[38] <= delay_pipeline[37];
          delay_pipeline[39] <= delay_pipeline[38];
          delay_pipeline[40] <= delay_pipeline[39];
          delay_pipeline[41] <= delay_pipeline[40];
          delay_pipeline[42] <= delay_pipeline[41];
          delay_pipeline[43] <= delay_pipeline[42];
          delay_pipeline[44] <= delay_pipeline[43];
          delay_pipeline[45] <= delay_pipeline[44];
          delay_pipeline[46] <= delay_pipeline[45];
          delay_pipeline[47] <= delay_pipeline[46];
          delay_pipeline[48] <= delay_pipeline[47];
          delay_pipeline[49] <= delay_pipeline[48];
          delay_pipeline[50] <= delay_pipeline[49];
          delay_pipeline[51] <= delay_pipeline[50];
          delay_pipeline[52] <= delay_pipeline[51];
          delay_pipeline[53] <= delay_pipeline[52];
          delay_pipeline[54] <= delay_pipeline[53];
          delay_pipeline[55] <= delay_pipeline[54];
          delay_pipeline[56] <= delay_pipeline[55];
          delay_pipeline[57] <= delay_pipeline[56];
          delay_pipeline[58] <= delay_pipeline[57];
          delay_pipeline[59] <= delay_pipeline[58];
          delay_pipeline[60] <= delay_pipeline[59];
        end
      end
    end // Delay_Pipeline_process


// For FCSD of 71, optimizing to CSD due to lower cost
  assign mulcsd_temp = 
        $signed({delay_pipeline[60], 6'b000000}) +
        $signed({delay_pipeline[60], 3'b000}) -
        delay_pipeline[60];
  assign product61 = $signed({{9{mulcsd_temp[22]}}, mulcsd_temp});

// For FCSD of 13, optimizing to CSD due to lower cost
  assign mulcsd_temp_1 = 
        $signed({delay_pipeline[59], 4'b0000}) -
        $signed({delay_pipeline[59], 2'b00}) +
        delay_pipeline[59];
  assign product60 = $signed({{11{mulcsd_temp_1[20]}}, mulcsd_temp_1});

// For FCSD of -247, optimizing to CSD due to lower cost
  assign mulcsd_temp_2 = - (
        $signed({delay_pipeline[58], 8'b00000000}) -
        $signed({delay_pipeline[58], 4'b0000}) +
        $signed({delay_pipeline[58], 3'b000}) -
        delay_pipeline[58]);
  assign product59 = $signed({{7{mulcsd_temp_2[24]}}, mulcsd_temp_2});

// For FCSD of -638, optimizing to CSD due to lower cost
  assign mulcsd_temp_3 = - (
        $signed({delay_pipeline[57], 9'b000000000}) +
        $signed({delay_pipeline[57], 7'b0000000}) -
        $signed({delay_pipeline[57], 1'b0}));
  assign product58 = $signed({{6{mulcsd_temp_3[25]}}, mulcsd_temp_3});

// For FCSD of -833, optimizing to CSD due to lower cost
  assign mulcsd_temp_4 = - (
        $signed({delay_pipeline[56], 10'b0000000000}) -
        $signed({delay_pipeline[56], 8'b00000000}) +
        $signed({delay_pipeline[56], 6'b000000}) +
        delay_pipeline[56]);
  assign product57 = $signed({{5{mulcsd_temp_4[26]}}, mulcsd_temp_4});

// For FCSD of -545, optimizing to CSD due to lower cost
  assign mulcsd_temp_5 = - (
        $signed({delay_pipeline[55], 9'b000000000}) +
        $signed({delay_pipeline[55], 5'b00000}) +
        delay_pipeline[55]);
  assign product56 = $signed({{6{mulcsd_temp_5[25]}}, mulcsd_temp_5});

// For FCSD of 90, using factorization: 15 3 2 
// 
  assign mulcsd_temp_6 = 
        $signed({delay_pipeline[54], 4'b0000}) -
        delay_pipeline[54];
  assign factoredcsd_temp = mulcsd_temp_6[19:0];

  assign mulcsd_temp_7 = 
        $signed({factoredcsd_temp, 2'b00}) -
        factoredcsd_temp;
  assign factoredcsd_temp_1 = mulcsd_temp_7[21:0];

  assign factoredcsd_temp_2 = $signed({factoredcsd_temp_1[21:0], 1'b0});

  assign product55 = $signed({{9{factoredcsd_temp_2[22]}}, factoredcsd_temp_2});

// For FCSD of 515, optimizing to CSD due to lower cost
  assign mulcsd_temp_8 = 
        $signed({delay_pipeline[53], 9'b000000000}) +
        $signed({delay_pipeline[53], 2'b00}) -
        delay_pipeline[53];
  assign product54 = $signed({{6{mulcsd_temp_8[25]}}, mulcsd_temp_8});

// For FCSD of 290, optimizing to CSD due to lower cost
  assign mulcsd_temp_9 = 
        $signed({delay_pipeline[52], 8'b00000000}) +
        $signed({delay_pipeline[52], 5'b00000}) +
        $signed({delay_pipeline[52], 1'b0});
  assign product53 = $signed({{7{mulcsd_temp_9[24]}}, mulcsd_temp_9});

// For FCSD of -348, optimizing to CSD due to lower cost
  assign mulcsd_temp_10 = - (
        $signed({delay_pipeline[51], 8'b00000000}) +
        $signed({delay_pipeline[51], 6'b000000}) +
        $signed({delay_pipeline[51], 5'b00000}) -
        $signed({delay_pipeline[51], 2'b00}));
  assign product52 = $signed({{7{mulcsd_temp_10[24]}}, mulcsd_temp_10});

// For FCSD of -635, using factorization: 127 5 
// 
  assign mulcsd_temp_11 = 
        $signed({delay_pipeline[50], 7'b0000000}) -
        delay_pipeline[50];
  assign factoredcsd_temp_3 = mulcsd_temp_11[22:0];

  assign mulcsd_temp_12 = 
        $signed({factoredcsd_temp_3, 2'b00}) +
        factoredcsd_temp_3;
  assign factoredcsd_temp_4 = mulcsd_temp_12;

  assign factoredcsd_temp_5 = factoredcsd_temp_4;

  assign unaryminus_temp = (factoredcsd_temp_5==26'b10000000000000000000000000) ? $signed({1'b0, factoredcsd_temp_5}) : -factoredcsd_temp_5;
  assign product51 = $signed({{5{unaryminus_temp[26]}}, unaryminus_temp});

// For FCSD of -133, optimizing to CSD due to lower cost
  assign mulcsd_temp_13 = - (
        $signed({delay_pipeline[49], 7'b0000000}) +
        $signed({delay_pipeline[49], 2'b00}) +
        delay_pipeline[49]);
  assign product50 = $signed({{8{mulcsd_temp_13[23]}}, mulcsd_temp_13});

// For FCSD of 647, optimizing to CSD due to lower cost
  assign mulcsd_temp_14 = 
        $signed({delay_pipeline[48], 9'b000000000}) +
        $signed({delay_pipeline[48], 7'b0000000}) +
        $signed({delay_pipeline[48], 3'b000}) -
        delay_pipeline[48];
  assign product49 = $signed({{6{mulcsd_temp_14[25]}}, mulcsd_temp_14});

// For FCSD of 723, using factorization: 241 3 
// 
  assign mulcsd_temp_15 = 
        $signed({delay_pipeline[47], 8'b00000000}) -
        $signed({delay_pipeline[47], 4'b0000}) +
        delay_pipeline[47];
  assign factoredcsd_temp_6 = mulcsd_temp_15[23:0];

  assign mulcsd_temp_16 = 
        $signed({factoredcsd_temp_6, 2'b00}) -
        factoredcsd_temp_6;
  assign factoredcsd_temp_7 = mulcsd_temp_16[25:0];

  assign factoredcsd_temp_8 = factoredcsd_temp_7;

  assign product48 = $signed({{6{factoredcsd_temp_8[25]}}, factoredcsd_temp_8});

// For FCSD of -157, optimizing to CSD due to lower cost
  assign mulcsd_temp_17 = - (
        $signed({delay_pipeline[46], 7'b0000000}) +
        $signed({delay_pipeline[46], 5'b00000}) -
        $signed({delay_pipeline[46], 2'b00}) +
        delay_pipeline[46]);
  assign product47 = $signed({{8{mulcsd_temp_17[23]}}, mulcsd_temp_17});

// For FCSD of -1022, optimizing to CSD due to lower cost
  assign mulcsd_temp_18 = - (
        $signed({delay_pipeline[45], 10'b0000000000}) -
        $signed({delay_pipeline[45], 1'b0}));
  assign product46 = $signed({{5{mulcsd_temp_18[26]}}, mulcsd_temp_18});

// For FCSD of -703, optimizing to CSD due to lower cost
  assign mulcsd_temp_19 = - (
        $signed({delay_pipeline[44], 9'b000000000}) +
        $signed({delay_pipeline[44], 7'b0000000}) +
        $signed({delay_pipeline[44], 6'b000000}) -
        delay_pipeline[44]);
  assign product45 = $signed({{6{mulcsd_temp_19[25]}}, mulcsd_temp_19});

// For FCSD of 647, optimizing to CSD due to lower cost
  assign mulcsd_temp_20 = 
        $signed({delay_pipeline[43], 9'b000000000}) +
        $signed({delay_pipeline[43], 7'b0000000}) +
        $signed({delay_pipeline[43], 3'b000}) -
        delay_pipeline[43];
  assign product44 = $signed({{6{mulcsd_temp_20[25]}}, mulcsd_temp_20});

// For FCSD of 1445, using factorization: 17 17 5 
// 
  assign mulcsd_temp_21 = 
        $signed({delay_pipeline[42], 4'b0000}) +
        delay_pipeline[42];
  assign factoredcsd_temp_9 = mulcsd_temp_21;

  assign mulcsd_temp_22 = 
        $signed({factoredcsd_temp_9, 4'b0000}) +
        factoredcsd_temp_9;
  assign factoredcsd_temp_10 = mulcsd_temp_22;

  assign mulcsd_temp_23 = 
        $signed({factoredcsd_temp_10, 2'b00}) +
        factoredcsd_temp_10;
  assign factoredcsd_temp_11 = mulcsd_temp_23[26:0];

  assign factoredcsd_temp_12 = factoredcsd_temp_11;

  assign product43 = $signed({{5{factoredcsd_temp_12[26]}}, factoredcsd_temp_12});

// For FCSD of 465, using factorization: 31 15 
// 
  assign mulcsd_temp_24 = 
        $signed({delay_pipeline[41], 5'b00000}) -
        delay_pipeline[41];
  assign factoredcsd_temp_13 = mulcsd_temp_24[20:0];

  assign mulcsd_temp_25 = 
        $signed({factoredcsd_temp_13, 4'b0000}) -
        factoredcsd_temp_13;
  assign factoredcsd_temp_14 = mulcsd_temp_25[24:0];

  assign factoredcsd_temp_15 = factoredcsd_temp_14;

  assign product42 = $signed({{7{factoredcsd_temp_15[24]}}, factoredcsd_temp_15});

// For FCSD of -1418, optimizing to CSD due to lower cost
  assign mulcsd_temp_26 = - (
        $signed({delay_pipeline[40], 10'b0000000000}) +
        $signed({delay_pipeline[40], 9'b000000000}) -
        $signed({delay_pipeline[40], 7'b0000000}) +
        $signed({delay_pipeline[40], 3'b000}) +
        $signed({delay_pipeline[40], 1'b0}));
  assign product41 = $signed({{5{mulcsd_temp_26[26]}}, mulcsd_temp_26});

// For FCSD of -1865, optimizing to CSD due to lower cost
  assign mulcsd_temp_27 = - (
        $signed({delay_pipeline[39], 11'b00000000000}) -
        $signed({delay_pipeline[39], 8'b00000000}) +
        $signed({delay_pipeline[39], 6'b000000}) +
        $signed({delay_pipeline[39], 3'b000}) +
        delay_pipeline[39]);
  assign product40 = $signed({{4{mulcsd_temp_27[27]}}, mulcsd_temp_27});

// For FCSD of 174, optimizing to CSD due to lower cost
  assign mulcsd_temp_28 = 
        $signed({delay_pipeline[38], 7'b0000000}) +
        $signed({delay_pipeline[38], 5'b00000}) +
        $signed({delay_pipeline[38], 4'b0000}) -
        $signed({delay_pipeline[38], 1'b0});
  assign product39 = $signed({{8{mulcsd_temp_28[23]}}, mulcsd_temp_28});

// For FCSD of 2654, optimizing to CSD due to lower cost
  assign mulcsd_temp_29 = 
        $signed({delay_pipeline[37], 11'b00000000000}) +
        $signed({delay_pipeline[37], 9'b000000000}) +
        $signed({delay_pipeline[37], 6'b000000}) +
        $signed({delay_pipeline[37], 5'b00000}) -
        $signed({delay_pipeline[37], 1'b0});
  assign product38 = $signed({{4{mulcsd_temp_29[27]}}, mulcsd_temp_29});

// For FCSD of 2225, optimizing to CSD due to lower cost
  assign mulcsd_temp_30 = 
        $signed({delay_pipeline[36], 11'b00000000000}) +
        $signed({delay_pipeline[36], 7'b0000000}) +
        $signed({delay_pipeline[36], 6'b000000}) -
        $signed({delay_pipeline[36], 4'b0000}) +
        delay_pipeline[36];
  assign product37 = $signed({{4{mulcsd_temp_30[27]}}, mulcsd_temp_30});

// For FCSD of -1709, optimizing to CSD due to lower cost
  assign mulcsd_temp_31 = - (
        $signed({delay_pipeline[35], 11'b00000000000}) -
        $signed({delay_pipeline[35], 9'b000000000}) +
        $signed({delay_pipeline[35], 7'b0000000}) +
        $signed({delay_pipeline[35], 5'b00000}) +
        $signed({delay_pipeline[35], 4'b0000}) -
        $signed({delay_pipeline[35], 2'b00}) +
        delay_pipeline[35]);
  assign product36 = $signed({{4{mulcsd_temp_31[27]}}, mulcsd_temp_31});

// For FCSD of -5110, using factorization: 511 5 2 
// 
  assign mulcsd_temp_32 = 
        $signed({delay_pipeline[34], 9'b000000000}) -
        delay_pipeline[34];
  assign factoredcsd_temp_16 = mulcsd_temp_32[24:0];

  assign mulcsd_temp_33 = 
        $signed({factoredcsd_temp_16, 2'b00}) +
        factoredcsd_temp_16;
  assign factoredcsd_temp_17 = mulcsd_temp_33;

  assign factoredcsd_temp_18 = $signed({factoredcsd_temp_17[27:0], 1'b0});

  assign unaryminus_temp_1 = (factoredcsd_temp_18==29'b10000000000000000000000000000) ? $signed({1'b0, factoredcsd_temp_18}) : -factoredcsd_temp_18;
  assign product35 = $signed({{2{unaryminus_temp_1[29]}}, unaryminus_temp_1});

// For FCSD of -2468, optimizing to CSD due to lower cost
  assign mulcsd_temp_34 = - (
        $signed({delay_pipeline[33], 11'b00000000000}) +
        $signed({delay_pipeline[33], 9'b000000000}) -
        $signed({delay_pipeline[33], 7'b0000000}) +
        $signed({delay_pipeline[33], 5'b00000}) +
        $signed({delay_pipeline[33], 2'b00}));
  assign product34 = $signed({{4{mulcsd_temp_34[27]}}, mulcsd_temp_34});

// For FCSD of 7463, using factorization: 439 17 
// 
  assign mulcsd_temp_35 = 
        $signed({delay_pipeline[32], 9'b000000000}) -
        $signed({delay_pipeline[32], 7'b0000000}) +
        $signed({delay_pipeline[32], 6'b000000}) -
        $signed({delay_pipeline[32], 4'b0000}) +
        $signed({delay_pipeline[32], 3'b000}) -
        delay_pipeline[32];
  assign factoredcsd_temp_19 = mulcsd_temp_35[24:0];

  assign mulcsd_temp_36 = 
        $signed({factoredcsd_temp_19, 4'b0000}) +
        factoredcsd_temp_19;
  assign factoredcsd_temp_20 = mulcsd_temp_36[28:0];

  assign factoredcsd_temp_21 = factoredcsd_temp_20;

  assign product33 = $signed({{3{factoredcsd_temp_21[28]}}, factoredcsd_temp_21});

// For FCSD of 19180, using factorization: 137 7 5 2 2 
// 
  assign mulcsd_temp_37 = 
        $signed({delay_pipeline[31], 7'b0000000}) +
        $signed({delay_pipeline[31], 3'b000}) +
        delay_pipeline[31];
  assign factoredcsd_temp_22 = mulcsd_temp_37;

  assign mulcsd_temp_38 = 
        $signed({factoredcsd_temp_22, 3'b000}) -
        factoredcsd_temp_22;
  assign factoredcsd_temp_23 = mulcsd_temp_38[26:0];

  assign mulcsd_temp_39 = 
        $signed({factoredcsd_temp_23, 2'b00}) +
        factoredcsd_temp_23;
  assign factoredcsd_temp_24 = mulcsd_temp_39;

  assign factoredcsd_temp_25 = $signed({factoredcsd_temp_24[28:0], 2'b00});

  assign product32 = $signed({{1{factoredcsd_temp_25[30]}}, factoredcsd_temp_25});

// For FCSD of 24398, optimizing to CSD due to lower cost
  assign mulcsd_temp_40 = 
        $signed({delay_pipeline[30], 14'b00000000000000}) +
        $signed({delay_pipeline[30], 13'b0000000000000}) -
        $signed({delay_pipeline[30], 8'b00000000}) +
        $signed({delay_pipeline[30], 6'b000000}) +
        $signed({delay_pipeline[30], 4'b0000}) -
        $signed({delay_pipeline[30], 1'b0});
  assign product31 = $signed({{1{mulcsd_temp_40[30]}}, mulcsd_temp_40});

// For FCSD of 19180, using factorization: 137 7 5 2 2 
// 
  assign mulcsd_temp_41 = 
        $signed({delay_pipeline[29], 7'b0000000}) +
        $signed({delay_pipeline[29], 3'b000}) +
        delay_pipeline[29];
  assign factoredcsd_temp_26 = mulcsd_temp_41;

  assign mulcsd_temp_42 = 
        $signed({factoredcsd_temp_26, 3'b000}) -
        factoredcsd_temp_26;
  assign factoredcsd_temp_27 = mulcsd_temp_42[26:0];

  assign mulcsd_temp_43 = 
        $signed({factoredcsd_temp_27, 2'b00}) +
        factoredcsd_temp_27;
  assign factoredcsd_temp_28 = mulcsd_temp_43;

  assign factoredcsd_temp_29 = $signed({factoredcsd_temp_28[28:0], 2'b00});

  assign product30 = $signed({{1{factoredcsd_temp_29[30]}}, factoredcsd_temp_29});

// For FCSD of 7463, using factorization: 439 17 
// 
  assign mulcsd_temp_44 = 
        $signed({delay_pipeline[28], 9'b000000000}) -
        $signed({delay_pipeline[28], 7'b0000000}) +
        $signed({delay_pipeline[28], 6'b000000}) -
        $signed({delay_pipeline[28], 4'b0000}) +
        $signed({delay_pipeline[28], 3'b000}) -
        delay_pipeline[28];
  assign factoredcsd_temp_30 = mulcsd_temp_44[24:0];

  assign mulcsd_temp_45 = 
        $signed({factoredcsd_temp_30, 4'b0000}) +
        factoredcsd_temp_30;
  assign factoredcsd_temp_31 = mulcsd_temp_45[28:0];

  assign factoredcsd_temp_32 = factoredcsd_temp_31;

  assign product29 = $signed({{3{factoredcsd_temp_32[28]}}, factoredcsd_temp_32});

// For FCSD of -2468, optimizing to CSD due to lower cost
  assign mulcsd_temp_46 = - (
        $signed({delay_pipeline[27], 11'b00000000000}) +
        $signed({delay_pipeline[27], 9'b000000000}) -
        $signed({delay_pipeline[27], 7'b0000000}) +
        $signed({delay_pipeline[27], 5'b00000}) +
        $signed({delay_pipeline[27], 2'b00}));
  assign product28 = $signed({{4{mulcsd_temp_46[27]}}, mulcsd_temp_46});

// For FCSD of -5110, using factorization: 511 5 2 
// 
  assign mulcsd_temp_47 = 
        $signed({delay_pipeline[26], 9'b000000000}) -
        delay_pipeline[26];
  assign factoredcsd_temp_33 = mulcsd_temp_47[24:0];

  assign mulcsd_temp_48 = 
        $signed({factoredcsd_temp_33, 2'b00}) +
        factoredcsd_temp_33;
  assign factoredcsd_temp_34 = mulcsd_temp_48;

  assign factoredcsd_temp_35 = $signed({factoredcsd_temp_34[27:0], 1'b0});

  assign unaryminus_temp_2 = (factoredcsd_temp_35==29'b10000000000000000000000000000) ? $signed({1'b0, factoredcsd_temp_35}) : -factoredcsd_temp_35;
  assign product27 = $signed({{2{unaryminus_temp_2[29]}}, unaryminus_temp_2});

// For FCSD of -1709, optimizing to CSD due to lower cost
  assign mulcsd_temp_49 = - (
        $signed({delay_pipeline[25], 11'b00000000000}) -
        $signed({delay_pipeline[25], 9'b000000000}) +
        $signed({delay_pipeline[25], 7'b0000000}) +
        $signed({delay_pipeline[25], 5'b00000}) +
        $signed({delay_pipeline[25], 4'b0000}) -
        $signed({delay_pipeline[25], 2'b00}) +
        delay_pipeline[25]);
  assign product26 = $signed({{4{mulcsd_temp_49[27]}}, mulcsd_temp_49});

// For FCSD of 2225, optimizing to CSD due to lower cost
  assign mulcsd_temp_50 = 
        $signed({delay_pipeline[24], 11'b00000000000}) +
        $signed({delay_pipeline[24], 7'b0000000}) +
        $signed({delay_pipeline[24], 6'b000000}) -
        $signed({delay_pipeline[24], 4'b0000}) +
        delay_pipeline[24];
  assign product25 = $signed({{4{mulcsd_temp_50[27]}}, mulcsd_temp_50});

// For FCSD of 2654, optimizing to CSD due to lower cost
  assign mulcsd_temp_51 = 
        $signed({delay_pipeline[23], 11'b00000000000}) +
        $signed({delay_pipeline[23], 9'b000000000}) +
        $signed({delay_pipeline[23], 6'b000000}) +
        $signed({delay_pipeline[23], 5'b00000}) -
        $signed({delay_pipeline[23], 1'b0});
  assign product24 = $signed({{4{mulcsd_temp_51[27]}}, mulcsd_temp_51});

// For FCSD of 174, optimizing to CSD due to lower cost
  assign mulcsd_temp_52 = 
        $signed({delay_pipeline[22], 7'b0000000}) +
        $signed({delay_pipeline[22], 5'b00000}) +
        $signed({delay_pipeline[22], 4'b0000}) -
        $signed({delay_pipeline[22], 1'b0});
  assign product23 = $signed({{8{mulcsd_temp_52[23]}}, mulcsd_temp_52});

// For FCSD of -1865, optimizing to CSD due to lower cost
  assign mulcsd_temp_53 = - (
        $signed({delay_pipeline[21], 11'b00000000000}) -
        $signed({delay_pipeline[21], 8'b00000000}) +
        $signed({delay_pipeline[21], 6'b000000}) +
        $signed({delay_pipeline[21], 3'b000}) +
        delay_pipeline[21]);
  assign product22 = $signed({{4{mulcsd_temp_53[27]}}, mulcsd_temp_53});

// For FCSD of -1418, optimizing to CSD due to lower cost
  assign mulcsd_temp_54 = - (
        $signed({delay_pipeline[20], 10'b0000000000}) +
        $signed({delay_pipeline[20], 9'b000000000}) -
        $signed({delay_pipeline[20], 7'b0000000}) +
        $signed({delay_pipeline[20], 3'b000}) +
        $signed({delay_pipeline[20], 1'b0}));
  assign product21 = $signed({{5{mulcsd_temp_54[26]}}, mulcsd_temp_54});

// For FCSD of 465, using factorization: 31 15 
// 
  assign mulcsd_temp_55 = 
        $signed({delay_pipeline[19], 5'b00000}) -
        delay_pipeline[19];
  assign factoredcsd_temp_36 = mulcsd_temp_55[20:0];

  assign mulcsd_temp_56 = 
        $signed({factoredcsd_temp_36, 4'b0000}) -
        factoredcsd_temp_36;
  assign factoredcsd_temp_37 = mulcsd_temp_56[24:0];

  assign factoredcsd_temp_38 = factoredcsd_temp_37;

  assign product20 = $signed({{7{factoredcsd_temp_38[24]}}, factoredcsd_temp_38});

// For FCSD of 1445, using factorization: 17 17 5 
// 
  assign mulcsd_temp_57 = 
        $signed({delay_pipeline[18], 4'b0000}) +
        delay_pipeline[18];
  assign factoredcsd_temp_39 = mulcsd_temp_57;

  assign mulcsd_temp_58 = 
        $signed({factoredcsd_temp_39, 4'b0000}) +
        factoredcsd_temp_39;
  assign factoredcsd_temp_40 = mulcsd_temp_58;

  assign mulcsd_temp_59 = 
        $signed({factoredcsd_temp_40, 2'b00}) +
        factoredcsd_temp_40;
  assign factoredcsd_temp_41 = mulcsd_temp_59[26:0];

  assign factoredcsd_temp_42 = factoredcsd_temp_41;

  assign product19 = $signed({{5{factoredcsd_temp_42[26]}}, factoredcsd_temp_42});

// For FCSD of 647, optimizing to CSD due to lower cost
  assign mulcsd_temp_60 = 
        $signed({delay_pipeline[17], 9'b000000000}) +
        $signed({delay_pipeline[17], 7'b0000000}) +
        $signed({delay_pipeline[17], 3'b000}) -
        delay_pipeline[17];
  assign product18 = $signed({{6{mulcsd_temp_60[25]}}, mulcsd_temp_60});

// For FCSD of -703, optimizing to CSD due to lower cost
  assign mulcsd_temp_61 = - (
        $signed({delay_pipeline[16], 9'b000000000}) +
        $signed({delay_pipeline[16], 7'b0000000}) +
        $signed({delay_pipeline[16], 6'b000000}) -
        delay_pipeline[16]);
  assign product17 = $signed({{6{mulcsd_temp_61[25]}}, mulcsd_temp_61});

// For FCSD of -1022, optimizing to CSD due to lower cost
  assign mulcsd_temp_62 = - (
        $signed({delay_pipeline[15], 10'b0000000000}) -
        $signed({delay_pipeline[15], 1'b0}));
  assign product16 = $signed({{5{mulcsd_temp_62[26]}}, mulcsd_temp_62});

// For FCSD of -157, optimizing to CSD due to lower cost
  assign mulcsd_temp_63 = - (
        $signed({delay_pipeline[14], 7'b0000000}) +
        $signed({delay_pipeline[14], 5'b00000}) -
        $signed({delay_pipeline[14], 2'b00}) +
        delay_pipeline[14]);
  assign product15 = $signed({{8{mulcsd_temp_63[23]}}, mulcsd_temp_63});

// For FCSD of 723, using factorization: 241 3 
// 
  assign mulcsd_temp_64 = 
        $signed({delay_pipeline[13], 8'b00000000}) -
        $signed({delay_pipeline[13], 4'b0000}) +
        delay_pipeline[13];
  assign factoredcsd_temp_43 = mulcsd_temp_64[23:0];

  assign mulcsd_temp_65 = 
        $signed({factoredcsd_temp_43, 2'b00}) -
        factoredcsd_temp_43;
  assign factoredcsd_temp_44 = mulcsd_temp_65[25:0];

  assign factoredcsd_temp_45 = factoredcsd_temp_44;

  assign product14 = $signed({{6{factoredcsd_temp_45[25]}}, factoredcsd_temp_45});

// For FCSD of 647, optimizing to CSD due to lower cost
  assign mulcsd_temp_66 = 
        $signed({delay_pipeline[12], 9'b000000000}) +
        $signed({delay_pipeline[12], 7'b0000000}) +
        $signed({delay_pipeline[12], 3'b000}) -
        delay_pipeline[12];
  assign product13 = $signed({{6{mulcsd_temp_66[25]}}, mulcsd_temp_66});

// For FCSD of -133, optimizing to CSD due to lower cost
  assign mulcsd_temp_67 = - (
        $signed({delay_pipeline[11], 7'b0000000}) +
        $signed({delay_pipeline[11], 2'b00}) +
        delay_pipeline[11]);
  assign product12 = $signed({{8{mulcsd_temp_67[23]}}, mulcsd_temp_67});

// For FCSD of -635, using factorization: 127 5 
// 
  assign mulcsd_temp_68 = 
        $signed({delay_pipeline[10], 7'b0000000}) -
        delay_pipeline[10];
  assign factoredcsd_temp_46 = mulcsd_temp_68[22:0];

  assign mulcsd_temp_69 = 
        $signed({factoredcsd_temp_46, 2'b00}) +
        factoredcsd_temp_46;
  assign factoredcsd_temp_47 = mulcsd_temp_69;

  assign factoredcsd_temp_48 = factoredcsd_temp_47;

  assign unaryminus_temp_3 = (factoredcsd_temp_48==26'b10000000000000000000000000) ? $signed({1'b0, factoredcsd_temp_48}) : -factoredcsd_temp_48;
  assign product11 = $signed({{5{unaryminus_temp_3[26]}}, unaryminus_temp_3});

// For FCSD of -348, optimizing to CSD due to lower cost
  assign mulcsd_temp_70 = - (
        $signed({delay_pipeline[9], 8'b00000000}) +
        $signed({delay_pipeline[9], 6'b000000}) +
        $signed({delay_pipeline[9], 5'b00000}) -
        $signed({delay_pipeline[9], 2'b00}));
  assign product10 = $signed({{7{mulcsd_temp_70[24]}}, mulcsd_temp_70});

// For FCSD of 290, optimizing to CSD due to lower cost
  assign mulcsd_temp_71 = 
        $signed({delay_pipeline[8], 8'b00000000}) +
        $signed({delay_pipeline[8], 5'b00000}) +
        $signed({delay_pipeline[8], 1'b0});
  assign product9 = $signed({{7{mulcsd_temp_71[24]}}, mulcsd_temp_71});

// For FCSD of 515, optimizing to CSD due to lower cost
  assign mulcsd_temp_72 = 
        $signed({delay_pipeline[7], 9'b000000000}) +
        $signed({delay_pipeline[7], 2'b00}) -
        delay_pipeline[7];
  assign product8 = $signed({{6{mulcsd_temp_72[25]}}, mulcsd_temp_72});

// For FCSD of 90, using factorization: 15 3 2 
// 
  assign mulcsd_temp_73 = 
        $signed({delay_pipeline[6], 4'b0000}) -
        delay_pipeline[6];
  assign factoredcsd_temp_49 = mulcsd_temp_73[19:0];

  assign mulcsd_temp_74 = 
        $signed({factoredcsd_temp_49, 2'b00}) -
        factoredcsd_temp_49;
  assign factoredcsd_temp_50 = mulcsd_temp_74[21:0];

  assign factoredcsd_temp_51 = $signed({factoredcsd_temp_50[21:0], 1'b0});

  assign product7 = $signed({{9{factoredcsd_temp_51[22]}}, factoredcsd_temp_51});

// For FCSD of -545, optimizing to CSD due to lower cost
  assign mulcsd_temp_75 = - (
        $signed({delay_pipeline[5], 9'b000000000}) +
        $signed({delay_pipeline[5], 5'b00000}) +
        delay_pipeline[5]);
  assign product6 = $signed({{6{mulcsd_temp_75[25]}}, mulcsd_temp_75});

// For FCSD of -833, optimizing to CSD due to lower cost
  assign mulcsd_temp_76 = - (
        $signed({delay_pipeline[4], 10'b0000000000}) -
        $signed({delay_pipeline[4], 8'b00000000}) +
        $signed({delay_pipeline[4], 6'b000000}) +
        delay_pipeline[4]);
  assign product5 = $signed({{5{mulcsd_temp_76[26]}}, mulcsd_temp_76});

// For FCSD of -638, optimizing to CSD due to lower cost
  assign mulcsd_temp_77 = - (
        $signed({delay_pipeline[3], 9'b000000000}) +
        $signed({delay_pipeline[3], 7'b0000000}) -
        $signed({delay_pipeline[3], 1'b0}));
  assign product4 = $signed({{6{mulcsd_temp_77[25]}}, mulcsd_temp_77});

// For FCSD of -247, optimizing to CSD due to lower cost
  assign mulcsd_temp_78 = - (
        $signed({delay_pipeline[2], 8'b00000000}) -
        $signed({delay_pipeline[2], 4'b0000}) +
        $signed({delay_pipeline[2], 3'b000}) -
        delay_pipeline[2]);
  assign product3 = $signed({{7{mulcsd_temp_78[24]}}, mulcsd_temp_78});

// For FCSD of 13, optimizing to CSD due to lower cost
  assign mulcsd_temp_79 = 
        $signed({delay_pipeline[1], 4'b0000}) -
        $signed({delay_pipeline[1], 2'b00}) +
        delay_pipeline[1];
  assign product2 = $signed({{11{mulcsd_temp_79[20]}}, mulcsd_temp_79});

// For FCSD of 71, optimizing to CSD due to lower cost
  assign mulcsd_temp_80 = 
        $signed({delay_pipeline[0], 6'b000000}) +
        $signed({delay_pipeline[0], 3'b000}) -
        delay_pipeline[0];
  assign product1 = $signed({{9{mulcsd_temp_80[22]}}, mulcsd_temp_80});

  assign add_signext = product61;
  assign add_signext_1 = product60;
  assign add_temp = add_signext + add_signext_1;
  assign sum1_1 = $signed({{5{add_temp[32]}}, add_temp});

  assign add_signext_2 = product59;
  assign add_signext_3 = product58;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sum1_2 = $signed({{5{add_temp_1[32]}}, add_temp_1});

  assign add_signext_4 = product57;
  assign add_signext_5 = product56;
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sum1_3 = $signed({{5{add_temp_2[32]}}, add_temp_2});

  assign add_signext_6 = product55;
  assign add_signext_7 = product54;
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sum1_4 = $signed({{5{add_temp_3[32]}}, add_temp_3});

  assign add_signext_8 = product53;
  assign add_signext_9 = product52;
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sum1_5 = $signed({{5{add_temp_4[32]}}, add_temp_4});

  assign add_signext_10 = product51;
  assign add_signext_11 = product50;
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sum1_6 = $signed({{5{add_temp_5[32]}}, add_temp_5});

  assign add_signext_12 = product49;
  assign add_signext_13 = product48;
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sum1_7 = $signed({{5{add_temp_6[32]}}, add_temp_6});

  assign add_signext_14 = product47;
  assign add_signext_15 = product46;
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sum1_8 = $signed({{5{add_temp_7[32]}}, add_temp_7});

  assign add_signext_16 = product45;
  assign add_signext_17 = product44;
  assign add_temp_8 = add_signext_16 + add_signext_17;
  assign sum1_9 = $signed({{5{add_temp_8[32]}}, add_temp_8});

  assign add_signext_18 = product43;
  assign add_signext_19 = product42;
  assign add_temp_9 = add_signext_18 + add_signext_19;
  assign sum1_10 = $signed({{5{add_temp_9[32]}}, add_temp_9});

  assign add_signext_20 = product41;
  assign add_signext_21 = product40;
  assign add_temp_10 = add_signext_20 + add_signext_21;
  assign sum1_11 = $signed({{5{add_temp_10[32]}}, add_temp_10});

  assign add_signext_22 = product39;
  assign add_signext_23 = product38;
  assign add_temp_11 = add_signext_22 + add_signext_23;
  assign sum1_12 = $signed({{5{add_temp_11[32]}}, add_temp_11});

  assign add_signext_24 = product37;
  assign add_signext_25 = product36;
  assign add_temp_12 = add_signext_24 + add_signext_25;
  assign sum1_13 = $signed({{5{add_temp_12[32]}}, add_temp_12});

  assign add_signext_26 = product35;
  assign add_signext_27 = product34;
  assign add_temp_13 = add_signext_26 + add_signext_27;
  assign sum1_14 = $signed({{5{add_temp_13[32]}}, add_temp_13});

  assign add_signext_28 = product33;
  assign add_signext_29 = product32;
  assign add_temp_14 = add_signext_28 + add_signext_29;
  assign sum1_15 = $signed({{5{add_temp_14[32]}}, add_temp_14});

  assign add_signext_30 = product31;
  assign add_signext_31 = product30;
  assign add_temp_15 = add_signext_30 + add_signext_31;
  assign sum1_16 = $signed({{5{add_temp_15[32]}}, add_temp_15});

  assign add_signext_32 = product29;
  assign add_signext_33 = product28;
  assign add_temp_16 = add_signext_32 + add_signext_33;
  assign sum1_17 = $signed({{5{add_temp_16[32]}}, add_temp_16});

  assign add_signext_34 = product27;
  assign add_signext_35 = product26;
  assign add_temp_17 = add_signext_34 + add_signext_35;
  assign sum1_18 = $signed({{5{add_temp_17[32]}}, add_temp_17});

  assign add_signext_36 = product25;
  assign add_signext_37 = product24;
  assign add_temp_18 = add_signext_36 + add_signext_37;
  assign sum1_19 = $signed({{5{add_temp_18[32]}}, add_temp_18});

  assign add_signext_38 = product23;
  assign add_signext_39 = product22;
  assign add_temp_19 = add_signext_38 + add_signext_39;
  assign sum1_20 = $signed({{5{add_temp_19[32]}}, add_temp_19});

  assign add_signext_40 = product21;
  assign add_signext_41 = product20;
  assign add_temp_20 = add_signext_40 + add_signext_41;
  assign sum1_21 = $signed({{5{add_temp_20[32]}}, add_temp_20});

  assign add_signext_42 = product19;
  assign add_signext_43 = product18;
  assign add_temp_21 = add_signext_42 + add_signext_43;
  assign sum1_22 = $signed({{5{add_temp_21[32]}}, add_temp_21});

  assign add_signext_44 = product17;
  assign add_signext_45 = product16;
  assign add_temp_22 = add_signext_44 + add_signext_45;
  assign sum1_23 = $signed({{5{add_temp_22[32]}}, add_temp_22});

  assign add_signext_46 = product15;
  assign add_signext_47 = product14;
  assign add_temp_23 = add_signext_46 + add_signext_47;
  assign sum1_24 = $signed({{5{add_temp_23[32]}}, add_temp_23});

  assign add_signext_48 = product13;
  assign add_signext_49 = product12;
  assign add_temp_24 = add_signext_48 + add_signext_49;
  assign sum1_25 = $signed({{5{add_temp_24[32]}}, add_temp_24});

  assign add_signext_50 = product11;
  assign add_signext_51 = product10;
  assign add_temp_25 = add_signext_50 + add_signext_51;
  assign sum1_26 = $signed({{5{add_temp_25[32]}}, add_temp_25});

  assign add_signext_52 = product9;
  assign add_signext_53 = product8;
  assign add_temp_26 = add_signext_52 + add_signext_53;
  assign sum1_27 = $signed({{5{add_temp_26[32]}}, add_temp_26});

  assign add_signext_54 = product7;
  assign add_signext_55 = product6;
  assign add_temp_27 = add_signext_54 + add_signext_55;
  assign sum1_28 = $signed({{5{add_temp_27[32]}}, add_temp_27});

  assign add_signext_56 = product5;
  assign add_signext_57 = product4;
  assign add_temp_28 = add_signext_56 + add_signext_57;
  assign sum1_29 = $signed({{5{add_temp_28[32]}}, add_temp_28});

  assign add_signext_58 = product3;
  assign add_signext_59 = product2;
  assign add_temp_29 = add_signext_58 + add_signext_59;
  assign sum1_30 = $signed({{5{add_temp_29[32]}}, add_temp_29});

  always @ (posedge clk or posedge reset)
    begin: temp_process1
      if (reset == 1'b1) begin
        sumpipe1_1 <= 0;
        sumpipe1_2 <= 0;
        sumpipe1_3 <= 0;
        sumpipe1_4 <= 0;
        sumpipe1_5 <= 0;
        sumpipe1_6 <= 0;
        sumpipe1_7 <= 0;
        sumpipe1_8 <= 0;
        sumpipe1_9 <= 0;
        sumpipe1_10 <= 0;
        sumpipe1_11 <= 0;
        sumpipe1_12 <= 0;
        sumpipe1_13 <= 0;
        sumpipe1_14 <= 0;
        sumpipe1_15 <= 0;
        sumpipe1_16 <= 0;
        sumpipe1_17 <= 0;
        sumpipe1_18 <= 0;
        sumpipe1_19 <= 0;
        sumpipe1_20 <= 0;
        sumpipe1_21 <= 0;
        sumpipe1_22 <= 0;
        sumpipe1_23 <= 0;
        sumpipe1_24 <= 0;
        sumpipe1_25 <= 0;
        sumpipe1_26 <= 0;
        sumpipe1_27 <= 0;
        sumpipe1_28 <= 0;
        sumpipe1_29 <= 0;
        sumpipe1_30 <= 0;
        sumpipe1_31 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe1_1 <= sum1_1;
          sumpipe1_2 <= sum1_2;
          sumpipe1_3 <= sum1_3;
          sumpipe1_4 <= sum1_4;
          sumpipe1_5 <= sum1_5;
          sumpipe1_6 <= sum1_6;
          sumpipe1_7 <= sum1_7;
          sumpipe1_8 <= sum1_8;
          sumpipe1_9 <= sum1_9;
          sumpipe1_10 <= sum1_10;
          sumpipe1_11 <= sum1_11;
          sumpipe1_12 <= sum1_12;
          sumpipe1_13 <= sum1_13;
          sumpipe1_14 <= sum1_14;
          sumpipe1_15 <= sum1_15;
          sumpipe1_16 <= sum1_16;
          sumpipe1_17 <= sum1_17;
          sumpipe1_18 <= sum1_18;
          sumpipe1_19 <= sum1_19;
          sumpipe1_20 <= sum1_20;
          sumpipe1_21 <= sum1_21;
          sumpipe1_22 <= sum1_22;
          sumpipe1_23 <= sum1_23;
          sumpipe1_24 <= sum1_24;
          sumpipe1_25 <= sum1_25;
          sumpipe1_26 <= sum1_26;
          sumpipe1_27 <= sum1_27;
          sumpipe1_28 <= sum1_28;
          sumpipe1_29 <= sum1_29;
          sumpipe1_30 <= sum1_30;
          sumpipe1_31 <= product1;
        end
      end
    end // temp_process1

  assign add_signext_60 = sumpipe1_1;
  assign add_signext_61 = sumpipe1_2;
  assign add_temp_30 = add_signext_60 + add_signext_61;
  assign sum2_1 = add_temp_30[37:0];

  assign add_signext_62 = sumpipe1_3;
  assign add_signext_63 = sumpipe1_4;
  assign add_temp_31 = add_signext_62 + add_signext_63;
  assign sum2_2 = add_temp_31[37:0];

  assign add_signext_64 = sumpipe1_5;
  assign add_signext_65 = sumpipe1_6;
  assign add_temp_32 = add_signext_64 + add_signext_65;
  assign sum2_3 = add_temp_32[37:0];

  assign add_signext_66 = sumpipe1_7;
  assign add_signext_67 = sumpipe1_8;
  assign add_temp_33 = add_signext_66 + add_signext_67;
  assign sum2_4 = add_temp_33[37:0];

  assign add_signext_68 = sumpipe1_9;
  assign add_signext_69 = sumpipe1_10;
  assign add_temp_34 = add_signext_68 + add_signext_69;
  assign sum2_5 = add_temp_34[37:0];

  assign add_signext_70 = sumpipe1_11;
  assign add_signext_71 = sumpipe1_12;
  assign add_temp_35 = add_signext_70 + add_signext_71;
  assign sum2_6 = add_temp_35[37:0];

  assign add_signext_72 = sumpipe1_13;
  assign add_signext_73 = sumpipe1_14;
  assign add_temp_36 = add_signext_72 + add_signext_73;
  assign sum2_7 = add_temp_36[37:0];

  assign add_signext_74 = sumpipe1_15;
  assign add_signext_75 = sumpipe1_16;
  assign add_temp_37 = add_signext_74 + add_signext_75;
  assign sum2_8 = add_temp_37[37:0];

  assign add_signext_76 = sumpipe1_17;
  assign add_signext_77 = sumpipe1_18;
  assign add_temp_38 = add_signext_76 + add_signext_77;
  assign sum2_9 = add_temp_38[37:0];

  assign add_signext_78 = sumpipe1_19;
  assign add_signext_79 = sumpipe1_20;
  assign add_temp_39 = add_signext_78 + add_signext_79;
  assign sum2_10 = add_temp_39[37:0];

  assign add_signext_80 = sumpipe1_21;
  assign add_signext_81 = sumpipe1_22;
  assign add_temp_40 = add_signext_80 + add_signext_81;
  assign sum2_11 = add_temp_40[37:0];

  assign add_signext_82 = sumpipe1_23;
  assign add_signext_83 = sumpipe1_24;
  assign add_temp_41 = add_signext_82 + add_signext_83;
  assign sum2_12 = add_temp_41[37:0];

  assign add_signext_84 = sumpipe1_25;
  assign add_signext_85 = sumpipe1_26;
  assign add_temp_42 = add_signext_84 + add_signext_85;
  assign sum2_13 = add_temp_42[37:0];

  assign add_signext_86 = sumpipe1_27;
  assign add_signext_87 = sumpipe1_28;
  assign add_temp_43 = add_signext_86 + add_signext_87;
  assign sum2_14 = add_temp_43[37:0];

  assign add_signext_88 = sumpipe1_29;
  assign add_signext_89 = sumpipe1_30;
  assign add_temp_44 = add_signext_88 + add_signext_89;
  assign sum2_15 = add_temp_44[37:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process2
      if (reset == 1'b1) begin
        sumpipe2_1 <= 0;
        sumpipe2_2 <= 0;
        sumpipe2_3 <= 0;
        sumpipe2_4 <= 0;
        sumpipe2_5 <= 0;
        sumpipe2_6 <= 0;
        sumpipe2_7 <= 0;
        sumpipe2_8 <= 0;
        sumpipe2_9 <= 0;
        sumpipe2_10 <= 0;
        sumpipe2_11 <= 0;
        sumpipe2_12 <= 0;
        sumpipe2_13 <= 0;
        sumpipe2_14 <= 0;
        sumpipe2_15 <= 0;
        sumpipe2_16 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe2_1 <= sum2_1;
          sumpipe2_2 <= sum2_2;
          sumpipe2_3 <= sum2_3;
          sumpipe2_4 <= sum2_4;
          sumpipe2_5 <= sum2_5;
          sumpipe2_6 <= sum2_6;
          sumpipe2_7 <= sum2_7;
          sumpipe2_8 <= sum2_8;
          sumpipe2_9 <= sum2_9;
          sumpipe2_10 <= sum2_10;
          sumpipe2_11 <= sum2_11;
          sumpipe2_12 <= sum2_12;
          sumpipe2_13 <= sum2_13;
          sumpipe2_14 <= sum2_14;
          sumpipe2_15 <= sum2_15;
          sumpipe2_16 <= sumpipe1_31;
        end
      end
    end // temp_process2

  assign add_signext_90 = sumpipe2_1;
  assign add_signext_91 = sumpipe2_2;
  assign add_temp_45 = add_signext_90 + add_signext_91;
  assign sum3_1 = add_temp_45[37:0];

  assign add_signext_92 = sumpipe2_3;
  assign add_signext_93 = sumpipe2_4;
  assign add_temp_46 = add_signext_92 + add_signext_93;
  assign sum3_2 = add_temp_46[37:0];

  assign add_signext_94 = sumpipe2_5;
  assign add_signext_95 = sumpipe2_6;
  assign add_temp_47 = add_signext_94 + add_signext_95;
  assign sum3_3 = add_temp_47[37:0];

  assign add_signext_96 = sumpipe2_7;
  assign add_signext_97 = sumpipe2_8;
  assign add_temp_48 = add_signext_96 + add_signext_97;
  assign sum3_4 = add_temp_48[37:0];

  assign add_signext_98 = sumpipe2_9;
  assign add_signext_99 = sumpipe2_10;
  assign add_temp_49 = add_signext_98 + add_signext_99;
  assign sum3_5 = add_temp_49[37:0];

  assign add_signext_100 = sumpipe2_11;
  assign add_signext_101 = sumpipe2_12;
  assign add_temp_50 = add_signext_100 + add_signext_101;
  assign sum3_6 = add_temp_50[37:0];

  assign add_signext_102 = sumpipe2_13;
  assign add_signext_103 = sumpipe2_14;
  assign add_temp_51 = add_signext_102 + add_signext_103;
  assign sum3_7 = add_temp_51[37:0];

  assign add_signext_104 = sumpipe2_15;
  assign add_signext_105 = $signed({{6{sumpipe2_16[31]}}, sumpipe2_16});
  assign add_temp_52 = add_signext_104 + add_signext_105;
  assign sum3_8 = add_temp_52[37:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process3
      if (reset == 1'b1) begin
        sumpipe3_1 <= 0;
        sumpipe3_2 <= 0;
        sumpipe3_3 <= 0;
        sumpipe3_4 <= 0;
        sumpipe3_5 <= 0;
        sumpipe3_6 <= 0;
        sumpipe3_7 <= 0;
        sumpipe3_8 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe3_1 <= sum3_1;
          sumpipe3_2 <= sum3_2;
          sumpipe3_3 <= sum3_3;
          sumpipe3_4 <= sum3_4;
          sumpipe3_5 <= sum3_5;
          sumpipe3_6 <= sum3_6;
          sumpipe3_7 <= sum3_7;
          sumpipe3_8 <= sum3_8;
        end
      end
    end // temp_process3

  assign add_signext_106 = sumpipe3_1;
  assign add_signext_107 = sumpipe3_2;
  assign add_temp_53 = add_signext_106 + add_signext_107;
  assign sum4_1 = add_temp_53[37:0];

  assign add_signext_108 = sumpipe3_3;
  assign add_signext_109 = sumpipe3_4;
  assign add_temp_54 = add_signext_108 + add_signext_109;
  assign sum4_2 = add_temp_54[37:0];

  assign add_signext_110 = sumpipe3_5;
  assign add_signext_111 = sumpipe3_6;
  assign add_temp_55 = add_signext_110 + add_signext_111;
  assign sum4_3 = add_temp_55[37:0];

  assign add_signext_112 = sumpipe3_7;
  assign add_signext_113 = sumpipe3_8;
  assign add_temp_56 = add_signext_112 + add_signext_113;
  assign sum4_4 = add_temp_56[37:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process4
      if (reset == 1'b1) begin
        sumpipe4_1 <= 0;
        sumpipe4_2 <= 0;
        sumpipe4_3 <= 0;
        sumpipe4_4 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe4_1 <= sum4_1;
          sumpipe4_2 <= sum4_2;
          sumpipe4_3 <= sum4_3;
          sumpipe4_4 <= sum4_4;
        end
      end
    end // temp_process4

  assign add_signext_114 = sumpipe4_1;
  assign add_signext_115 = sumpipe4_2;
  assign add_temp_57 = add_signext_114 + add_signext_115;
  assign sum5_1 = add_temp_57[37:0];

  assign add_signext_116 = sumpipe4_3;
  assign add_signext_117 = sumpipe4_4;
  assign add_temp_58 = add_signext_116 + add_signext_117;
  assign sum5_2 = add_temp_58[37:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process5
      if (reset == 1'b1) begin
        sumpipe5_1 <= 0;
        sumpipe5_2 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe5_1 <= sum5_1;
          sumpipe5_2 <= sum5_2;
        end
      end
    end // temp_process5

  assign add_signext_118 = sumpipe5_1;
  assign add_signext_119 = sumpipe5_2;
  assign add_temp_59 = add_signext_118 + add_signext_119;
  assign sum6_1 = add_temp_59[37:0];

  always @ (posedge clk or posedge reset)
    begin: temp_process6
      if (reset == 1'b1) begin
        sumpipe6_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe6_1 <= sum6_1;
        end
      end
    end // temp_process6

  assign sum_final = sumpipe6_1;

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= sum_final;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // fir_min_16b_fcsd
